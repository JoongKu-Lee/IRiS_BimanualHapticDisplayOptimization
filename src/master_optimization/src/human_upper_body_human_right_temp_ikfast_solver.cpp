/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-03-21 12:11:04.014059
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

namespace rightarm {

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKsin(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
x14=((0.05)*x10);
x15=((0.05)*x9);
x16=((1.0)*x4);
x17=((1.0)*x0);
x18=((1.0)*x10);
x19=((0.31509)*x6);
x20=((0.2584)*x0);
x21=((1.0)*x2);
x22=((1.0)*x9);
x23=((1.0)*x7);
x24=((0.2584)*x3);
x25=((-0.05)*x8);
x26=((-1.0)*x10);
x27=((-0.05)*x11);
x28=((-1.0)*x9);
x29=(x6*x7);
x30=(x5*x6);
x31=(x2*x4);
x32=(x1*x3);
x33=(x1*x6);
x34=(x21*x5);
x35=(x0*x16*x2);
x36=(x17*x30);
x37=((((-1.0)*x35))+x32);
x38=((((-1.0)*x0*x16))+((x2*x32)));
x39=(((x0*x1))+((x3*x31)));
x40=((((-1.0)*x16*x29))+x34);
x41=((((-1.0)*x16*x3))+(((-1.0)*x1*x17*x2)));
x42=(x37*x7);
x43=(((x21*x7))+((x16*x30)));
x44=((-1.0)*x43);
x45=(x10*x38);
x46=(x38*x9);
x47=(x40*x9);
x48=(x10*x41);
x49=(x11*x44);
x50=((((-1.0)*x36))+x42);
x51=(((x3*x30))+((x39*x7)));
x52=(((x5*(((((-1.0)*x32))+x35))))+(((-1.0)*x17*x29)));
x53=(x36+(((-1.0)*x23*x37)));
x54=((((-1.0)*x22*x33))+((x18*(((((-1.0)*x29*x4))+x34)))));
x55=(((x29*x3))+((x5*(((((-1.0)*x16*x2*x3))+(((-1.0)*x1*x17)))))));
x56=((((-1.0)*x3*x30))+(((-1.0)*x23*x39)));
x57=(x10*x51);
x58=(x10*x50);
x59=(x11*x52);
x60=(x54*x8);
x61=(((x28*x41))+((x26*(((((-1.0)*x0*x30))+x42)))));
x62=((((-1.0)*x49))+(((-1.0)*x60)));
x63=(((x8*(((((-1.0)*x18*x51))+(((-1.0)*x22*x38))))))+((x11*x55)));
eerot[0]=(((x11*((((x41*x9))+x58))))+((x52*x8)));
eerot[1]=(((x13*((x59+((x61*x8))))))+((x12*(((((-1.0)*x18*x41))+(((-1.0)*x22*x53)))))));
eerot[2]=(((x12*((x59+((x8*(((((-1.0)*x18*x50))+(((-1.0)*x22*x41))))))))))+((x13*((((x9*(((((-1.0)*x42))+x36))))+x48)))));
eetrans[0]=(((x0*x19))+((x5*(((((-1.0)*x20*x31))+((x1*x24))))))+((x12*((((x15*x53))+((x14*x41))))))+((x13*((((x27*x52))+((x25*x61))))))+((x20*x29)));
eerot[3]=(((x11*x54))+((x43*x8)));
eerot[4]=(((x13*x62))+((x12*((((x10*x33))+x47)))));
eerot[5]=(((x12*x62))+((x13*(((((-1.0)*x18*x33))+(((-1.0)*x22*x40)))))));
eetrans[1]=((-0.16319)+((x13*(((((0.05)*x49))+(((0.05)*x60))))))+(((-0.2584)*x30*x4))+((x12*(((((-1.0)*x15*x40))+(((-1.0)*x14*x33))))))+(((-0.2584)*x2*x7))+(((-0.31509)*x2)));
eerot[6]=(((x11*((x46+x57))))+((x55*x8)));
eerot[7]=(((x13*x63))+((x12*((((x26*x38))+((x28*x56)))))));
eerot[8]=(((x12*x63))+((x13*((((x56*x9))+x45)))));
eetrans[2]=(((x12*((((x15*x56))+((x14*x38))))))+(((-1.0)*x19*x3))+((x13*((((x27*x55))+((x25*((((x26*x51))+((x28*x38))))))))))+(((-1.0)*x24*x29))+((x5*((((x1*x20))+((x24*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j11,cj11,sj11,htj11,j11mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j10,cj10,sj10,htj10,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij8[2], _nj8,_ij9[2], _nj9,_ij11[2], _nj11,_ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij10[2], _nj10;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1;  _ij10[0] = -1; _ij10[1] = -1; _nj10 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j10=pfree[0]; cj10=cos(pfree[0]); sj10=sin(pfree[0]), htj10=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((0.05)*r01))+px);
new_r10=r22;
new_r11=r21;
new_r12=((-1.0)*r20);
new_py=(pz+(((0.05)*r21)));
new_r20=((-1.0)*r12);
new_r21=((-1.0)*r11);
new_r22=r10;
new_pz=((-0.16319)+(((-0.05)*r11))+(((-1.0)*py)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x64=((1.0)*px);
IkReal x65=((1.0)*pz);
IkReal x66=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x66))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x65)));
rxp0_2=((((-1.0)*r10*x64))+((py*r00)));
rxp1_0=((((-1.0)*r21*x66))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x65)));
rxp1_2=((((-1.0)*r11*x64))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x66)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x65)));
rxp2_2=((((-1.0)*r12*x64))+((py*r02)));
{
IkReal j11array[2], cj11array[2], sj11array[2];
bool j11valid[2]={false};
_nj11 = 2;
cj11array[0]=((-1.01973584786872)+(((6.14105341370351)*pp)));
if( cj11array[0] >= -1-IKFAST_SINCOS_THRESH && cj11array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j11valid[0] = j11valid[1] = true;
    j11array[0] = IKacos(cj11array[0]);
    sj11array[0] = IKsin(j11array[0]);
    cj11array[1] = cj11array[0];
    j11array[1] = -j11array[0];
    sj11array[1] = -sj11array[0];
}
else if( isnan(cj11array[0]) )
{
    // probably any value will work
    j11valid[0] = true;
    cj11array[0] = 1; sj11array[0] = 0; j11array[0] = 0;
}
for(int ij11 = 0; ij11 < 2; ++ij11)
{
if( !j11valid[ij11] )
{
    continue;
}
_ij11[0] = ij11; _ij11[1] = -1;
for(int iij11 = ij11+1; iij11 < 2; ++iij11)
{
if( j11valid[iij11] && IKabs(cj11array[ij11]-cj11array[iij11]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij11]-sj11array[iij11]) < IKFAST_SOLUTION_THRESH )
{
    j11valid[iij11]=false; _ij11[1] = iij11; break; 
}
}
j11 = j11array[ij11]; cj11 = cj11array[ij11]; sj11 = sj11array[ij11];

{
IkReal j8eval[2];
j8eval[0]=((px*px)+(py*py));
j8eval[1]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=((1.48690842341295)+(((sj10*sj10)*(sj11*sj11)))+(cj11*cj11)+(((2.43877708978328)*cj11)));
j9eval[1]=((IKabs((sj10*sj11)))+(((3.86996904024768)*(IKabs(((0.31509)+(((0.2584)*cj11))))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j8eval[2];
IkReal x67=px*px;
IkReal x68=cj10*cj10;
IkReal x69=sj10*sj10;
IkReal x70=px*px*px*px;
IkReal x71=cj10*cj10*cj10*cj10;
IkReal x72=py*py;
IkReal x73=sj10*sj10*sj10*sj10;
IkReal x74=(px*py);
IkReal x75=(x67*x72);
IkReal x76=((2.0)*x68*x69);
j8eval[0]=((IKabs((((x69*x74))+((x68*x74)))))+(IKabs((((x67*x68))+((x67*x69))))));
j8eval[1]=(((x75*x76))+((x70*x73))+((x70*x71))+((x70*x76))+((x73*x75))+((x71*x75)));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j8, j9]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x77=px*px;
IkReal x78=cj10*cj10;
IkReal x79=sj10*sj10;
IkReal x80=(px*py);
IkReal x81=(((x77*x79))+((x77*x78)));
IkReal x82=(((x79*x80))+((x78*x80)));
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal(x81),IkReal(x82),IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
IkReal x83=((1.0)*(x85.value));
if((((x81*x81)+(x82*x82))) < -0.00001)
continue;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(IKabs(IKsqrt(((x81*x81)+(x82*x82)))),-1);
if(!x86.valid){
continue;
}
if( (((0.2584)*cj10*px*sj11*(x86.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2584)*cj10*px*sj11*(x86.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x84=IKasin(((0.2584)*cj10*px*sj11*(x86.value)));
j8array[0]=(x84+(((-1.0)*x83)));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x84))+(((-1.0)*x83)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x87=IKsin(j8);
IkReal x88=py*py;
IkReal x89=IKcos(j8);
IkReal x90=cj10*cj10;
IkReal x91=sj10*sj10;
IkReal x92=(px*py);
IkReal x93=((1.0)*x90);
IkReal x94=((0.2584)*cj10*sj11);
IkReal x95=((1.0)*x91);
evalcond[0]=(((py*x87))+((px*x89))+(((-1.0)*x94)));
evalcond[1]=(((x89*(((((-1.0)*x92*x93))+(((-1.0)*x92*x95))))))+((py*x94))+((x87*(((((-1.0)*x88*x95))+(((-1.0)*x88*x93)))))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
IkReal x96=(cj8*py);
IkReal x97=((323.0)*cj11);
IkReal x98=(sj10*sj11);
IkReal x99=(px*sj8);
IkReal x100=((1250.0)*pz);
j9eval[0]=((((-1.21938854489164)*x96))+(((-1.0)*pz*x98))+((cj11*x99))+(((-1.0)*cj11*x96))+(((1.21938854489164)*x99)));
j9eval[1]=IKsign(((((-393.8625)*x96))+((x97*x99))+(((393.8625)*x99))+(((-323.0)*pz*x98))+(((-1.0)*x96*x97))));
j9eval[2]=((IKabs(((((-101.77407)*x98))+((x100*x99))+(((-1.0)*x100*x96))+(((-83.4632)*cj11*x98)))))+(IKabs(((124.102135125)+(((-1.0)*pz*x100))+(((203.54814)*cj11))+(((83.4632)*(cj11*cj11)))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x101=(px*sj8);
IkReal x102=((39386250.0)*pz);
IkReal x103=(sj10*sj11);
IkReal x104=((16150000.0)*pp);
IkReal x105=(cj8*py);
IkReal x106=(cj11*x105);
j9eval[0]=((((-1.21938854489164)*x105))+(((1.21938854489164)*x101))+(((-1.0)*pz*x103))+(((-1.0)*x106))+((cj11*x101)));
j9eval[1]=IKsign(((((-12410213.5125)*x105))+(((-10177407.0)*pz*x103))+(((10177407.0)*cj11*x101))+(((-10177407.0)*x106))+(((12410213.5125)*x101))));
j9eval[2]=((IKabs(((640246.103426812)+(((-1.0)*pz*x102))+(((525055.041815)*cj11))+(((19693125.0)*pp))+((cj11*x104)))))+(IKabs(((((-525055.041815)*x103))+(((-1.0)*x103*x104))+(((-1.0)*x102*x105))+((x101*x102))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x107=cj10*cj10;
IkReal x108=cj11*cj11;
IkReal x109=(px*sj8);
IkReal x110=((403750.0)*cj11);
IkReal x111=(cj8*py);
IkReal x112=((403750.0)*sj10*sj11);
IkReal x113=((104329.0)*x107);
j9eval[0]=((-2.48690842341295)+x107+(((-1.0)*x107*x108))+(((-2.43877708978328)*cj11)));
j9eval[1]=IKsign(((-259456.66890625)+x113+(((-1.0)*x108*x113))+(((-254435.175)*cj11))));
j9eval[2]=((IKabs((((x110*x111))+(((-1.0)*x109*x110))+(((-492328.125)*x109))+(((492328.125)*x111))+(((-1.0)*pz*x112)))))+(IKabs(((((-1.0)*x111*x112))+(((-492328.125)*pz))+((x109*x112))+(((-1.0)*pz*x110))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x114=cj10*cj10;
IkReal x115=(px*sj8);
IkReal x116=((403750.0)*cj11);
IkReal x117=(cj8*py);
IkReal x118=((403750.0)*sj10*sj11);
IkReal x119=((104329.0)*x114);
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKsign(((-259456.66890625)+(((-1.0)*x119*(cj11*cj11)))+x119+(((-254435.175)*cj11)))),-1);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((((-1.0)*x117*x118))+(((-492328.125)*pz))+((x115*x118))+(((-1.0)*pz*x116)))),IkReal(((((-1.0)*x115*x116))+(((-492328.125)*x115))+((x116*x117))+(((492328.125)*x117))+(((-1.0)*pz*x118)))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x120.value)))+(x121.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x122=IKsin(j9);
IkReal x123=IKcos(j9);
IkReal x124=(px*sj8);
IkReal x125=(py*sj10);
IkReal x126=((1.0)*cj8);
IkReal x127=((0.2584)*sj11);
IkReal x128=((1.0)*pz);
IkReal x129=((0.2584)*cj11);
IkReal x130=(cj10*x122);
IkReal x131=(py*x123);
IkReal x132=(pz*x122);
IkReal x133=(sj10*x122);
IkReal x134=(sj10*x123);
evalcond[0]=(((x127*x134))+((x122*x129))+(((-1.0)*x128))+(((0.31509)*x122)));
evalcond[1]=((-0.31509)+(((-1.0)*x126*x131))+(((-1.0)*x129))+x132+((x123*x124)));
evalcond[2]=((-0.0325111481)+(((0.63018)*x123*x124))+(((-0.63018)*cj8*x131))+(((-1.0)*pp))+(((0.63018)*x132)));
evalcond[3]=(((x127*x133))+(((-1.0)*py*x126))+(((-1.0)*x123*x129))+(((-0.31509)*x123))+x124);
evalcond[4]=(((sj8*x125))+((cj8*px*sj10))+((x124*x130))+(((-1.0)*py*x126*x130))+(((-1.0)*cj10*x123*x128)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+(((-1.0)*cj10*px*x126))+(((-1.0)*x122*x125*x126))+x127+(((-1.0)*x128*x134))+((x124*x133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1563=((16150000.0)*pp);
IkReal x1564=(px*sj8);
IkReal x1565=((39386250.0)*pz);
IkReal x1566=(sj10*sj11);
IkReal x1567=(cj8*py);
IkReal x1568=((10177407.0)*cj11);
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal(((((-1.0)*x1565*x1567))+(((-525055.041815)*x1566))+(((-1.0)*x1563*x1566))+((x1564*x1565)))),IkReal(((640246.103426812)+(((-1.0)*pz*x1565))+((cj11*x1563))+(((525055.041815)*cj11))+(((19693125.0)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(IKsign(((((12410213.5125)*x1564))+(((-1.0)*x1567*x1568))+(((-10177407.0)*pz*x1566))+(((-12410213.5125)*x1567))+((x1564*x1568)))),-1);
if(!x1570.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1569.value)+(((1.5707963267949)*(x1570.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x1571=IKsin(j9);
IkReal x1572=IKcos(j9);
IkReal x1573=(px*sj8);
IkReal x1574=(py*sj10);
IkReal x1575=((1.0)*cj8);
IkReal x1576=((0.2584)*sj11);
IkReal x1577=((1.0)*pz);
IkReal x1578=((0.2584)*cj11);
IkReal x1579=(cj10*x1571);
IkReal x1580=(py*x1572);
IkReal x1581=(pz*x1571);
IkReal x1582=(sj10*x1571);
IkReal x1583=(sj10*x1572);
evalcond[0]=(((x1571*x1578))+(((0.31509)*x1571))+((x1576*x1583))+(((-1.0)*x1577)));
evalcond[1]=((-0.31509)+((x1572*x1573))+x1581+(((-1.0)*x1578))+(((-1.0)*x1575*x1580)));
evalcond[2]=((-0.0325111481)+(((-0.63018)*cj8*x1580))+(((-1.0)*pp))+(((0.63018)*x1581))+(((0.63018)*x1572*x1573)));
evalcond[3]=((((-1.0)*x1572*x1578))+((x1576*x1582))+(((-1.0)*py*x1575))+x1573+(((-0.31509)*x1572)));
evalcond[4]=(((x1573*x1579))+(((-1.0)*py*x1575*x1579))+((cj8*px*sj10))+(((-1.0)*cj10*x1572*x1577))+((sj8*x1574)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+(((-1.0)*x1577*x1583))+((x1573*x1582))+x1576+(((-1.0)*x1571*x1574*x1575))+(((-1.0)*cj10*px*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1584=(sj10*sj11);
IkReal x1585=(cj8*py);
IkReal x1586=((323.0)*cj11);
IkReal x1587=((1250.0)*pz);
IkReal x1588=(px*sj8);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal((((x1587*x1588))+(((-1.0)*x1585*x1587))+(((-101.77407)*x1584))+(((-83.4632)*cj11*x1584)))),IkReal(((124.102135125)+(((203.54814)*cj11))+(((-1.0)*pz*x1587))+(((83.4632)*(cj11*cj11))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((x1586*x1588))+(((-1.0)*x1585*x1586))+(((393.8625)*x1588))+(((-393.8625)*x1585))+(((-323.0)*pz*x1584)))),-1);
if(!x1590.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x1591=IKsin(j9);
IkReal x1592=IKcos(j9);
IkReal x1593=(px*sj8);
IkReal x1594=(py*sj10);
IkReal x1595=((1.0)*cj8);
IkReal x1596=((0.2584)*sj11);
IkReal x1597=((1.0)*pz);
IkReal x1598=((0.2584)*cj11);
IkReal x1599=(cj10*x1591);
IkReal x1600=(py*x1592);
IkReal x1601=(pz*x1591);
IkReal x1602=(sj10*x1591);
IkReal x1603=(sj10*x1592);
evalcond[0]=((((-1.0)*x1597))+(((0.31509)*x1591))+((x1591*x1598))+((x1596*x1603)));
evalcond[1]=((-0.31509)+(((-1.0)*x1598))+((x1592*x1593))+x1601+(((-1.0)*x1595*x1600)));
evalcond[2]=((-0.0325111481)+(((-0.63018)*cj8*x1600))+(((-1.0)*pp))+(((0.63018)*x1592*x1593))+(((0.63018)*x1601)));
evalcond[3]=((((-1.0)*x1592*x1598))+(((-1.0)*py*x1595))+x1593+(((-0.31509)*x1592))+((x1596*x1602)));
evalcond[4]=(((x1593*x1599))+(((-1.0)*py*x1595*x1599))+(((-1.0)*cj10*x1592*x1597))+((cj8*px*sj10))+((sj8*x1594)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+x1596+(((-1.0)*x1597*x1603))+((x1593*x1602))+(((-1.0)*x1591*x1594*x1595))+(((-1.0)*cj10*px*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[2], cj9array[2], sj9array[2];
bool j9valid[2]={false};
_nj9 = 2;
IkReal x1604=((0.31509)+(((0.2584)*cj11)));
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal(((0.2584)*sj10*sj11)),IkReal(x1604),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
IkReal x1605=((1.0)*(x1607.value));
if((((x1604*x1604)+(((0.06677056)*(sj10*sj10)*(sj11*sj11))))) < -0.00001)
continue;
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1604*x1604)+(((0.06677056)*(sj10*sj10)*(sj11*sj11)))))),-1);
if(!x1608.valid){
continue;
}
if( ((pz*(x1608.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x1608.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1606=IKasin((pz*(x1608.value)));
j9array[0]=((((-1.0)*x1605))+x1606);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
j9array[1]=((3.14159265358979)+(((-1.0)*x1606))+(((-1.0)*x1605)));
sj9array[1]=IKsin(j9array[1]);
cj9array[1]=IKcos(j9array[1]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
if( j9array[1] > IKPI )
{
    j9array[1]-=IK2PI;
}
else if( j9array[1] < -IKPI )
{    j9array[1]+=IK2PI;
}
j9valid[1] = true;
for(int ij9 = 0; ij9 < 2; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 2; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];

{
IkReal j8eval[3];
IkReal x1609=pz*pz;
IkReal x1610=((323.0)*px);
IkReal x1611=(cj9*pp);
IkReal x1612=((323.0)*py);
IkReal x1613=(cj10*cj9*sj11);
IkReal x1614=((1250.0)*pz*sj9);
IkReal x1615=(cj9*x1609);
j8eval[0]=((((-1.0)*x1615))+x1611);
j8eval[1]=((IKabs(((((393.8625)*px))+(((-1.0)*px*x1614))+((x1612*x1613))+((cj11*x1610)))))+(IKabs((((py*x1614))+(((-1.0)*cj11*x1612))+(((-393.8625)*py))+((x1610*x1613))))));
j8eval[2]=IKsign(((((1250.0)*x1611))+(((-1250.0)*x1615))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x1616=pz*pz;
IkReal x1617=((39386250.0)*cj9);
IkReal x1618=((62500000.0)*pp);
IkReal x1619=((39386250.0)*pz*sj9);
IkReal x1620=((10177407.0)*cj10*cj9*sj11);
j8eval[0]=(((cj9*pp))+(((-1.0)*cj9*x1616)));
j8eval[1]=IKsign(((((-1.0)*x1616*x1617))+((pp*x1617))));
j8eval[2]=((IKabs((((py*x1620))+(((2031946.75625)*px))+((px*x1618))+(((-1.0)*px*x1619)))))+(IKabs((((py*x1619))+(((-1.0)*py*x1618))+((px*x1620))+(((-2031946.75625)*py))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
IkReal x1621=pz*pz;
IkReal x1622=((323.0)*py);
IkReal x1623=(cj10*sj11);
IkReal x1624=(cj11*cj9);
IkReal x1625=((323.0)*px);
IkReal x1626=((393.8625)*cj9);
IkReal x1627=(sj10*sj11*sj9);
j8eval[0]=((((-1.0)*x1621))+pp);
j8eval[1]=IKsign(((((1250.0)*pp))+(((-1250.0)*x1621))));
j8eval[2]=((IKabs((((x1623*x1625))+((x1622*x1627))+(((-1.0)*py*x1626))+(((-1.0)*x1622*x1624)))))+(IKabs((((x1622*x1623))+((px*x1626))+(((-1.0)*x1625*x1627))+((x1624*x1625))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1628=pz*pz;
IkReal x1629=(cj10*sj11);
IkReal x1630=(sj10*sj11);
j8eval[0]=((((-1.0)*x1628))+pp);
j8eval[1]=IKsign(((((1250.0)*pp))+(((-1250.0)*x1628))));
j8eval[2]=((IKabs((((py*x1630))+((px*x1629)))))+(IKabs((((py*x1629))+(((-1.0)*px*x1630))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1631=pz*pz;
IkReal x1632=cj10*cj10;
IkReal x1633=((1.0)*cj10);
IkReal x1634=(py*sj11);
IkReal x1635=(px*sj11);
IkReal x1636=(cj10*x1631);
IkReal x1637=((1.0)*x1632);
j8eval[0]=(x1636+(((-1.0)*pp*x1633)));
j8eval[1]=IKsign(((((1250.0)*x1636))+(((-1250.0)*cj10*pp))));
j8eval[2]=((IKabs((((cj10*sj10*x1635))+(((-1.0)*x1634*x1637)))))+(IKabs(((((-1.0)*x1635*x1637))+(((-1.0)*sj10*x1633*x1634))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
IkReal x1638=pz*pz;
IkReal x1639=cj10*cj10;
IkReal x1640=(py*sj11);
IkReal x1641=((1.0)*sj10);
IkReal x1642=((1250.0)*sj10);
IkReal x1643=(px*sj11);
j8eval[0]=(((sj10*x1638))+(((-1.0)*pp*x1641)));
j8eval[1]=IKsign(((((-1.0)*pp*x1642))+((x1638*x1642))));
j8eval[2]=((IKabs(((((-1.0)*cj10*x1641*x1643))+(((-1.0)*x1640))+((x1639*x1640)))))+(IKabs((x1643+(((-1.0)*x1639*x1643))+(((-1.0)*cj10*x1640*x1641))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x1644=pz*pz;
j8eval[0]=((((-1.0)*x1644))+pp);
j8eval[1]=104329.0;
j8eval[2]=sj11;
j8eval[3]=IKsign(((((1250.0)*pp))+(((-1250.0)*x1644))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1646 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1646.valid){
continue;
}
IkReal x1645=x1646.value;
j8array[0]=((-1.0)*x1645);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1645)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
IkReal x1647=x1648.value;
j8array[0]=((-1.0)*x1647);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1647)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1649=((323.0)*sj11);
CheckValue<IkReal> x1650 = IKatan2WithCheck(IkReal((py*x1649)),IkReal((px*x1649)),IKFAST_ATAN2_MAGTHRESH);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1651.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1650.value)+(((1.5707963267949)*(x1651.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1652=IKsin(j8);
IkReal x1653=IKcos(j8);
evalcond[0]=((((-1.0)*py*x1653))+((px*x1652)));
evalcond[1]=((((-0.2584)*sj11))+((px*x1653))+((py*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x1654=pz*pz;
j8eval[0]=(x1654+(((-1.0)*pp)));
j8eval[1]=104329.0;
j8eval[2]=sj11;
j8eval[3]=IKsign(((((-1250.0)*pp))+(((1250.0)*x1654))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1656 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1656.valid){
continue;
}
IkReal x1655=x1656.value;
j8array[0]=((-1.0)*x1655);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1655)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
IkReal x1657=x1658.value;
j8array[0]=((-1.0)*x1657);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1657)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1659=((323.0)*sj11);
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(IKsign(((((-1250.0)*pp))+(((1250.0)*(pz*pz))))),-1);
if(!x1660.valid){
continue;
}
CheckValue<IkReal> x1661 = IKatan2WithCheck(IkReal((py*x1659)),IkReal((px*x1659)),IKFAST_ATAN2_MAGTHRESH);
if(!x1661.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1660.value)))+(x1661.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1662=IKsin(j8);
IkReal x1663=IKcos(j8);
evalcond[0]=((((-1.0)*py*x1663))+((px*x1662)));
evalcond[1]=(((px*x1663))+((py*x1662))+(((0.2584)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs((((px*sj10))+(((-1.0)*cj10*py)))))+(IKabs((((cj10*px))+((py*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
IkReal x1664=((1.0)*cj10);
j8eval[0]=((IKabs(((((-1.0)*px*x1664))+(((-1.0)*py*sj10)))))+(IKabs(((((-1.0)*py*x1664))+((px*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1665=((1.0)*cj10);
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(((((-1.0)*px*x1665))+(((-1.0)*py*sj10)))),IkReal(((((-1.0)*py*x1665))+((px*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
IkReal x1666=x1667.value;
j8array[0]=((-1.0)*x1666);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1666)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1668=IKsin(j8);
IkReal x1669=IKcos(j8);
IkReal x1670=(px*x1669);
IkReal x1671=(px*x1668);
IkReal x1672=(py*x1668);
IkReal x1673=((1.0)*py*x1669);
evalcond[0]=(x1670+x1672);
evalcond[1]=(x1671+(((-1.0)*x1673)));
evalcond[2]=(((cj10*x1671))+((sj10*x1672))+((sj10*x1670))+(((-1.0)*cj10*x1673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((((px*sj10))+(((-1.0)*cj10*py)))),IkReal((((cj10*px))+((py*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
IkReal x1674=x1675.value;
j8array[0]=((-1.0)*x1674);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1674)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1676=IKsin(j8);
IkReal x1677=IKcos(j8);
IkReal x1678=(px*x1676);
IkReal x1679=((1.0)*x1677);
IkReal x1680=(py*x1676);
evalcond[0]=(x1680+((px*x1677)));
evalcond[1]=(x1678+(((-1.0)*py*x1679)));
evalcond[2]=(((sj10*x1678))+(((-1.0)*cj10*x1680))+(((-1.0)*py*sj10*x1679))+(((-1.0)*cj10*px*x1679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1682 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1682.valid){
continue;
}
IkReal x1681=x1682.value;
j8array[0]=((-1.0)*x1681);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1681)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1683=IKcos(j8);
IkReal x1684=IKsin(j8);
IkReal x1685=((1.0)*py);
IkReal x1686=(sj10*x1683);
IkReal x1687=(px*x1684);
IkReal x1688=(cj10*x1683);
evalcond[0]=(x1687+(((-1.0)*x1683*x1685)));
evalcond[1]=((((-1.0)*x1685*x1688))+((cj10*x1687))+((px*x1686))+((py*sj10*x1684)));
evalcond[2]=((((-1.0)*px*x1688))+(((-1.0)*x1685*x1686))+(((-1.0)*cj10*x1684*x1685))+((sj10*x1687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs((((px*sj10))+(((-1.0)*cj10*py)))))+(IKabs((((cj10*px))+((py*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1689=((1.0)*cj10);
j8eval[0]=((IKabs(((((-1.0)*py*sj10))+(((-1.0)*px*x1689)))))+(IKabs(((((-1.0)*py*x1689))+((px*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1690=((1.0)*cj10);
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal(((((-1.0)*py*sj10))+(((-1.0)*px*x1690)))),IkReal(((((-1.0)*py*x1690))+((px*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
IkReal x1691=x1692.value;
j8array[0]=((-1.0)*x1691);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1691)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1693=IKsin(j8);
IkReal x1694=IKcos(j8);
IkReal x1695=(px*x1694);
IkReal x1696=(px*x1693);
IkReal x1697=(py*x1693);
IkReal x1698=((1.0)*py*x1694);
evalcond[0]=(x1697+x1695);
evalcond[1]=((((-1.0)*x1698))+x1696);
evalcond[2]=(((cj10*x1696))+(((-1.0)*cj10*x1698))+((sj10*x1697))+((sj10*x1695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal((((px*sj10))+(((-1.0)*cj10*py)))),IkReal((((cj10*px))+((py*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
IkReal x1699=x1700.value;
j8array[0]=((-1.0)*x1699);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1699)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1701=IKsin(j8);
IkReal x1702=IKcos(j8);
IkReal x1703=(px*x1701);
IkReal x1704=((1.0)*x1702);
IkReal x1705=(py*x1701);
evalcond[0]=(x1705+((px*x1702)));
evalcond[1]=((((-1.0)*py*x1704))+x1703);
evalcond[2]=((((-1.0)*cj10*px*x1704))+((sj10*x1703))+(((-1.0)*py*sj10*x1704))+(((-1.0)*cj10*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
IkReal x1706=x1707.value;
j8array[0]=((-1.0)*x1706);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1706)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1708=IKcos(j8);
IkReal x1709=IKsin(j8);
IkReal x1710=((1.0)*py);
IkReal x1711=(sj10*x1708);
IkReal x1712=(px*x1709);
IkReal x1713=(cj10*x1708);
evalcond[0]=(x1712+(((-1.0)*x1708*x1710)));
evalcond[1]=((((-1.0)*x1710*x1713))+((cj10*x1712))+((py*sj10*x1709))+((px*x1711)));
evalcond[2]=((((-1.0)*x1710*x1711))+(((-1.0)*px*x1713))+((sj10*x1712))+(((-1.0)*cj10*x1709*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x1714=pz*pz;
j8eval[0]=(x1714+(((-1.0)*pp)));
j8eval[1]=IKsign(((((-1250.0)*pp))+(((1250.0)*x1714))));
j8eval[2]=104329.0;
j8eval[3]=sj11;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
IkReal x1715=x1716.value;
j8array[0]=((-1.0)*x1715);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1715)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
IkReal x1717=x1718.value;
j8array[0]=((-1.0)*x1717);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1717)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1719 = IKatan2WithCheck(IkReal(((323.0)*px*sj11)),IkReal(((-323.0)*py*sj11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1719.valid){
continue;
}
CheckValue<IkReal> x1720=IKPowWithIntegerCheck(IKsign(((((-1250.0)*pp))+(((1250.0)*(pz*pz))))),-1);
if(!x1720.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1719.value)+(((1.5707963267949)*(x1720.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1721=IKsin(j8);
IkReal x1722=IKcos(j8);
evalcond[0]=(((px*x1722))+((py*x1721)));
evalcond[1]=(((px*x1721))+(((-1.0)*py*x1722))+(((0.2584)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x1723=pz*pz;
j8eval[0]=(pp+(((-1.0)*x1723)));
j8eval[1]=IKsign(((((-1250.0)*x1723))+(((1250.0)*pp))));
j8eval[2]=104329.0;
j8eval[3]=sj11;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1725 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1725.valid){
continue;
}
IkReal x1724=x1725.value;
j8array[0]=((-1.0)*x1724);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1724)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=1.0;
cj9=0;
j9=1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1727 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1727.valid){
continue;
}
IkReal x1726=x1727.value;
j8array[0]=((-1.0)*x1726);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1726)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1728 = IKatan2WithCheck(IkReal(((323.0)*px*sj11)),IkReal(((-323.0)*py*sj11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1728.valid){
continue;
}
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1729.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1728.value)+(((1.5707963267949)*(x1729.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1730=IKsin(j8);
IkReal x1731=IKcos(j8);
evalcond[0]=(((px*x1731))+((py*x1730)));
evalcond[1]=((((-0.2584)*sj11))+((px*x1730))+(((-1.0)*py*x1731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1732=cj10*cj10;
IkReal x1733=((323.0)*sj11);
IkReal x1734=(cj10*sj10);
IkReal x1735=((1250.0)*sj10);
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal((((px*x1733))+(((-1.0)*px*x1732*x1733))+(((-1.0)*py*x1733*x1734)))),IkReal((((py*x1732*x1733))+(((-1.0)*px*x1733*x1734))+(((-1.0)*py*x1733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
CheckValue<IkReal> x1737=IKPowWithIntegerCheck(IKsign((((x1735*(pz*pz)))+(((-1.0)*pp*x1735)))),-1);
if(!x1737.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1736.value)+(((1.5707963267949)*(x1737.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1738=IKsin(j8);
IkReal x1739=IKcos(j8);
IkReal x1740=((0.2584)*sj11);
IkReal x1741=((1.0)*cj10);
IkReal x1742=(px*x1738);
IkReal x1743=(px*x1739);
IkReal x1744=(py*x1738);
IkReal x1745=((1.0)*py*x1739);
evalcond[0]=(x1744+x1743+(((-1.0)*cj10*x1740)));
evalcond[1]=(x1742+(((-1.0)*x1745))+((sj10*x1740)));
evalcond[2]=((((-1.0)*py*x1739*x1741))+((cj10*x1742))+((sj10*x1744))+((sj10*x1743)));
evalcond[3]=((((-1.0)*x1741*x1743))+(((-1.0)*x1741*x1744))+x1740+(((-1.0)*sj10*x1745))+((sj10*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1746=cj10*cj10;
IkReal x1747=(cj10*sj10);
IkReal x1748=((1250.0)*cj10);
IkReal x1749=((323.0)*px*sj11);
IkReal x1750=((323.0)*py*sj11);
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal((((x1747*x1749))+(((-1.0)*x1746*x1750)))),IkReal(((((-1.0)*x1747*x1750))+(((-1.0)*x1746*x1749)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign((((x1748*(pz*pz)))+(((-1.0)*pp*x1748)))),-1);
if(!x1752.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1751.value)+(((1.5707963267949)*(x1752.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1753=IKsin(j8);
IkReal x1754=IKcos(j8);
IkReal x1755=((0.2584)*sj11);
IkReal x1756=((1.0)*cj10);
IkReal x1757=(px*x1753);
IkReal x1758=(px*x1754);
IkReal x1759=(py*x1753);
IkReal x1760=((1.0)*py*x1754);
evalcond[0]=(x1759+x1758+(((-1.0)*cj10*x1755)));
evalcond[1]=((((-1.0)*x1760))+x1757+((sj10*x1755)));
evalcond[2]=(((cj10*x1757))+(((-1.0)*py*x1754*x1756))+((sj10*x1759))+((sj10*x1758)));
evalcond[3]=((((-1.0)*x1756*x1759))+(((-1.0)*x1756*x1758))+x1755+(((-1.0)*sj10*x1760))+((sj10*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1761=((323.0)*sj11);
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal((((cj10*py*x1761))+(((-1.0)*px*sj10*x1761)))),IkReal((((cj10*px*x1761))+((py*sj10*x1761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1763.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1762.value)+(((1.5707963267949)*(x1763.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1764=IKsin(j8);
IkReal x1765=IKcos(j8);
IkReal x1766=((0.2584)*sj11);
IkReal x1767=((1.0)*cj10);
IkReal x1768=(px*x1764);
IkReal x1769=(px*x1765);
IkReal x1770=(py*x1764);
IkReal x1771=((1.0)*py*x1765);
evalcond[0]=(x1769+x1770+(((-1.0)*cj10*x1766)));
evalcond[1]=(x1768+((sj10*x1766))+(((-1.0)*x1771)));
evalcond[2]=((((-1.0)*py*x1765*x1767))+((sj10*x1770))+((sj10*x1769))+((cj10*x1768)));
evalcond[3]=(x1766+((sj10*x1768))+(((-1.0)*x1767*x1770))+(((-1.0)*sj10*x1771))+(((-1.0)*x1767*x1769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x1772=pz*pz;
IkReal x1773=(cj10*sj11);
IkReal x1774=(sj10*sj11);
j8eval[0]=((((-1.0)*x1772))+pp);
j8eval[1]=IKsign(((((1250.0)*pp))+(((-1250.0)*x1772))));
j8eval[2]=((IKabs((((px*x1774))+((py*x1773)))))+(IKabs(((((-1.0)*py*x1774))+((px*x1773))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x1775=cj10*cj10;
IkReal x1776=pz*pz;
IkReal x1777=(py*sj11);
IkReal x1778=(cj10*pp);
IkReal x1779=((1.0)*cj10);
IkReal x1780=(px*sj11);
j8eval[0]=(x1778+(((-1.0)*x1776*x1779)));
j8eval[1]=((IKabs((((x1775*x1780))+(((-1.0)*sj10*x1777*x1779)))))+(IKabs((((cj10*sj10*x1780))+((x1775*x1777))))));
j8eval[2]=IKsign(((((1250.0)*x1778))+(((-1250.0)*cj10*x1776))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal j8eval[3];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
IkReal x1781=cj10*cj10;
IkReal x1782=pz*pz;
IkReal x1783=(py*sj11);
IkReal x1784=(cj10*sj10);
IkReal x1785=(pp*sj10);
IkReal x1786=(px*sj11);
IkReal x1787=(sj10*x1782);
j8eval[0]=(x1785+(((-1.0)*x1787)));
j8eval[1]=((IKabs((((x1783*x1784))+x1786+(((-1.0)*x1781*x1786)))))+(IKabs((((x1784*x1786))+(((-1.0)*x1783))+((x1781*x1783))))));
j8eval[2]=IKsign(((((-1250.0)*x1787))+(((1250.0)*x1785))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
IkReal x1788=pz*pz;
j8eval[0]=(pp+(((-1.0)*x1788)));
j8eval[1]=104329.0;
j8eval[2]=sj11;
j8eval[3]=IKsign(((((-1250.0)*x1788))+(((1250.0)*pp))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
IkReal x1789=x1790.value;
j8array[0]=((-1.0)*x1789);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1789)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=1.0;
j10=0;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1792 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1792.valid){
continue;
}
IkReal x1791=x1792.value;
j8array[0]=((-1.0)*x1791);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1791)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1793=((323.0)*sj11);
CheckValue<IkReal> x1794 = IKatan2WithCheck(IkReal((py*x1793)),IkReal((px*x1793)),IKFAST_ATAN2_MAGTHRESH);
if(!x1794.valid){
continue;
}
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1795.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1794.value)+(((1.5707963267949)*(x1795.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1796=IKsin(j8);
IkReal x1797=IKcos(j8);
evalcond[0]=((((-1.0)*py*x1797))+((px*x1796)));
evalcond[1]=((((-0.2584)*sj11))+((py*x1796))+((px*x1797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
IkReal x1798=pz*pz;
j8eval[0]=(x1798+(((-1.0)*pp)));
j8eval[1]=104329.0;
j8eval[2]=sj11;
j8eval[3]=IKsign(((((-1250.0)*pp))+(((1250.0)*x1798))));
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1800 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1800.valid){
continue;
}
IkReal x1799=x1800.value;
j8array[0]=((-1.0)*x1799);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1799)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
IkReal x1801=x1802.value;
j8array[0]=((-1.0)*x1801);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1801)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1803=((323.0)*sj11);
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal((py*x1803)),IkReal((px*x1803)),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign(((((-1250.0)*pp))+(((1250.0)*(pz*pz))))),-1);
if(!x1805.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1804.value)+(((1.5707963267949)*(x1805.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1806=IKsin(j8);
IkReal x1807=IKcos(j8);
evalcond[0]=((((-1.0)*py*x1807))+((px*x1806)));
evalcond[1]=(((px*x1807))+((py*x1806))+(((0.2584)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs((((py*sj10))+(((-1.0)*cj10*px)))))+(IKabs((((cj10*py))+((px*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
IkReal x1808=((1.0)*px);
j8eval[0]=((IKabs(((((-1.0)*cj10*py))+(((-1.0)*sj10*x1808)))))+(IKabs((((py*sj10))+(((-1.0)*cj10*x1808))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1809=((1.0)*cj10);
CheckValue<IkReal> x1811 = IKatan2WithCheck(IkReal((((py*sj10))+(((-1.0)*px*x1809)))),IkReal(((((-1.0)*py*x1809))+(((-1.0)*px*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1811.valid){
continue;
}
IkReal x1810=x1811.value;
j8array[0]=((-1.0)*x1810);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1810)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1812=IKsin(j8);
IkReal x1813=IKcos(j8);
IkReal x1814=(px*x1813);
IkReal x1815=(py*x1813);
IkReal x1816=(px*x1812);
IkReal x1817=(py*x1812);
evalcond[0]=(x1814+x1817);
evalcond[1]=(x1816+(((-1.0)*x1815)));
evalcond[2]=((((-1.0)*cj10*x1816))+((cj10*x1815))+((sj10*x1814))+((sj10*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1819 = IKatan2WithCheck(IkReal((((cj10*py))+((px*sj10)))),IkReal((((py*sj10))+(((-1.0)*cj10*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1819.valid){
continue;
}
IkReal x1818=x1819.value;
j8array[0]=((-1.0)*x1818);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1818)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1820=IKsin(j8);
IkReal x1821=IKcos(j8);
IkReal x1822=(px*x1820);
IkReal x1823=((1.0)*x1821);
IkReal x1824=(py*x1820);
evalcond[0]=(((px*x1821))+x1824);
evalcond[1]=((((-1.0)*py*x1823))+x1822);
evalcond[2]=((((-1.0)*sj10*x1822))+(((-1.0)*cj10*x1824))+(((-1.0)*cj10*px*x1823))+((py*sj10*x1821)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
IkReal x1825=x1826.value;
j8array[0]=((-1.0)*x1825);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1825)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1827=IKcos(j8);
IkReal x1828=IKsin(j8);
IkReal x1829=(px*sj10);
IkReal x1830=(cj10*px);
IkReal x1831=(py*x1827);
IkReal x1832=((1.0)*x1828);
evalcond[0]=((((-1.0)*x1831))+((px*x1828)));
evalcond[1]=(((x1827*x1829))+((cj10*x1831))+((py*sj10*x1828))+(((-1.0)*x1830*x1832)));
evalcond[2]=(((sj10*x1831))+(((-1.0)*x1827*x1830))+(((-1.0)*cj10*py*x1832))+(((-1.0)*x1829*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs((((py*sj10))+(((-1.0)*cj10*px)))))+(IKabs((((cj10*py))+((px*sj10))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
IkReal x1833=((1.0)*px);
j8eval[0]=((IKabs((((py*sj10))+(((-1.0)*cj10*x1833)))))+(IKabs(((((-1.0)*cj10*py))+(((-1.0)*sj10*x1833))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
j8array[0]=0;
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=1.5707963267949;
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
j8array[2]=3.14159265358979;
sj8array[2]=IKsin(j8array[2]);
cj8array[2]=IKcos(j8array[2]);
j8array[3]=-1.5707963267949;
sj8array[3]=IKsin(j8array[3]);
cj8array[3]=IKcos(j8array[3]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
if( j8array[2] > IKPI )
{
    j8array[2]-=IK2PI;
}
else if( j8array[2] < -IKPI )
{    j8array[2]+=IK2PI;
}
j8valid[2] = true;
if( j8array[3] > IKPI )
{
    j8array[3]-=IK2PI;
}
else if( j8array[3] < -IKPI )
{    j8array[3]+=IK2PI;
}
j8valid[3] = true;
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x1834=((1.0)*cj10);
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal((((py*sj10))+(((-1.0)*px*x1834)))),IkReal(((((-1.0)*py*x1834))+(((-1.0)*px*sj10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=x1836.value;
j8array[0]=((-1.0)*x1835);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1835)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1837=IKsin(j8);
IkReal x1838=IKcos(j8);
IkReal x1839=(px*x1838);
IkReal x1840=(py*x1838);
IkReal x1841=(px*x1837);
IkReal x1842=(py*x1837);
evalcond[0]=(x1842+x1839);
evalcond[1]=(x1841+(((-1.0)*x1840)));
evalcond[2]=(((sj10*x1839))+(((-1.0)*cj10*x1841))+((cj10*x1840))+((sj10*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal((((cj10*py))+((px*sj10)))),IkReal((((py*sj10))+(((-1.0)*cj10*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1843=x1844.value;
j8array[0]=((-1.0)*x1843);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1843)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1845=IKsin(j8);
IkReal x1846=IKcos(j8);
IkReal x1847=(px*x1845);
IkReal x1848=((1.0)*x1846);
IkReal x1849=(py*x1845);
evalcond[0]=(((px*x1846))+x1849);
evalcond[1]=(x1847+(((-1.0)*py*x1848)));
evalcond[2]=((((-1.0)*cj10*px*x1848))+(((-1.0)*cj10*x1849))+(((-1.0)*sj10*x1847))+((py*sj10*x1846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1851 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1851.valid){
continue;
}
IkReal x1850=x1851.value;
j8array[0]=((-1.0)*x1850);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1850)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[3];
IkReal x1852=IKcos(j8);
IkReal x1853=IKsin(j8);
IkReal x1854=(px*sj10);
IkReal x1855=(cj10*px);
IkReal x1856=(py*x1852);
IkReal x1857=((1.0)*x1853);
evalcond[0]=((((-1.0)*x1856))+((px*x1853)));
evalcond[1]=(((x1852*x1854))+((cj10*x1856))+((py*sj10*x1853))+(((-1.0)*x1855*x1857)));
evalcond[2]=((((-1.0)*cj10*py*x1857))+((sj10*x1856))+(((-1.0)*x1852*x1855))+(((-1.0)*x1854*x1857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
IkReal x1858=pz*pz;
j8eval[0]=((((-1.0)*x1858))+pp);
j8eval[1]=IKsign(((((-1250.0)*x1858))+(((1250.0)*pp))));
j8eval[2]=104329.0;
j8eval[3]=sj11;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
IkReal x1859=x1860.value;
j8array[0]=((-1.0)*x1859);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1859)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=1.0;
cj10=0;
j10=1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1862 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1862.valid){
continue;
}
IkReal x1861=x1862.value;
j8array[0]=((-1.0)*x1861);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1861)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal(((323.0)*px*sj11)),IkReal(((-323.0)*py*sj11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
CheckValue<IkReal> x1864=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1864.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1863.value)+(((1.5707963267949)*(x1864.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1865=IKsin(j8);
IkReal x1866=IKcos(j8);
evalcond[0]=(((py*x1865))+((px*x1866)));
evalcond[1]=((((-0.2584)*sj11))+((px*x1865))+(((-1.0)*py*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j10)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[4];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
IkReal x1867=pz*pz;
j8eval[0]=((((-1.0)*pp))+x1867);
j8eval[1]=IKsign(((((-1250.0)*pp))+(((1250.0)*x1867))));
j8eval[2]=104329.0;
j8eval[3]=sj11;
if( IKabs(j8eval[0]) < 0.0000010000000000  || IKabs(j8eval[1]) < 0.0000010000000000  || IKabs(j8eval[2]) < 0.0000010000000000  || IKabs(j8eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j11))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj11=0;
cj11=1.0;
j11=0;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1868=x1869.value;
j8array[0]=((-1.0)*x1868);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1868)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j11)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j8eval[1];
sj9=-1.0;
cj9=0;
j9=-1.5707963267949;
sj10=-1.0;
cj10=0;
j10=-1.5707963267949;
sj11=0;
cj11=-1.0;
j11=3.14159265358979;
j8eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1871 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1871.valid){
continue;
}
IkReal x1870=x1871.value;
j8array[0]=((-1.0)*x1870);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1870)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*py*(IKcos(j8))))+((px*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
CheckValue<IkReal> x1872 = IKatan2WithCheck(IkReal(((323.0)*px*sj11)),IkReal(((-323.0)*py*sj11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(IKsign(((((-1250.0)*pp))+(((1250.0)*(pz*pz))))),-1);
if(!x1873.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1872.value)+(((1.5707963267949)*(x1873.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[2];
IkReal x1874=IKsin(j8);
IkReal x1875=IKcos(j8);
evalcond[0]=(((px*x1875))+((py*x1874)));
evalcond[1]=(((px*x1874))+(((-1.0)*py*x1875))+(((0.2584)*sj11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1876=cj10*cj10;
IkReal x1877=((323.0)*sj11);
IkReal x1878=(cj10*sj10);
IkReal x1879=((1250.0)*sj10);
CheckValue<IkReal> x1880=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1879*(pz*pz)))+((pp*x1879)))),-1);
if(!x1880.valid){
continue;
}
CheckValue<IkReal> x1881 = IKatan2WithCheck(IkReal((((px*x1877))+(((-1.0)*px*x1876*x1877))+((py*x1877*x1878)))),IkReal((((py*x1876*x1877))+((px*x1877*x1878))+(((-1.0)*py*x1877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1881.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1880.value)))+(x1881.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1882=IKsin(j8);
IkReal x1883=IKcos(j8);
IkReal x1884=((0.2584)*sj11);
IkReal x1885=(cj10*py);
IkReal x1886=((1.0)*cj10);
IkReal x1887=(px*x1882);
IkReal x1888=(px*x1883);
IkReal x1889=(py*x1882);
IkReal x1890=(py*x1883);
evalcond[0]=((((-1.0)*cj10*x1884))+x1889+x1888);
evalcond[1]=((((-1.0)*sj10*x1884))+(((-1.0)*x1890))+x1887);
evalcond[2]=(((x1883*x1885))+((sj10*x1888))+((sj10*x1889))+(((-1.0)*x1886*x1887)));
evalcond[3]=((((-1.0)*sj10*x1887))+((sj10*x1890))+x1884+(((-1.0)*x1882*x1885))+(((-1.0)*x1886*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1891=cj10*cj10;
IkReal x1892=((1250.0)*cj10);
IkReal x1893=((323.0)*cj10*sj10*sj11);
IkReal x1894=((323.0)*sj11*x1891);
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1892*(pz*pz)))+((pp*x1892)))),-1);
if(!x1895.valid){
continue;
}
CheckValue<IkReal> x1896 = IKatan2WithCheck(IkReal((((px*x1893))+((py*x1894)))),IkReal((((px*x1894))+(((-1.0)*py*x1893)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1896.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1895.value)))+(x1896.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1897=IKsin(j8);
IkReal x1898=IKcos(j8);
IkReal x1899=((0.2584)*sj11);
IkReal x1900=(cj10*py);
IkReal x1901=((1.0)*cj10);
IkReal x1902=(px*x1897);
IkReal x1903=(px*x1898);
IkReal x1904=(py*x1897);
IkReal x1905=(py*x1898);
evalcond[0]=((((-1.0)*cj10*x1899))+x1904+x1903);
evalcond[1]=((((-1.0)*sj10*x1899))+(((-1.0)*x1905))+x1902);
evalcond[2]=(((sj10*x1904))+((sj10*x1903))+(((-1.0)*x1901*x1902))+((x1898*x1900)));
evalcond[3]=((((-1.0)*sj10*x1902))+((sj10*x1905))+(((-1.0)*x1901*x1903))+(((-1.0)*x1897*x1900))+x1899);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1906=((323.0)*sj11);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal((((cj10*py*x1906))+((px*sj10*x1906)))),IkReal(((((-1.0)*py*sj10*x1906))+((cj10*px*x1906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
CheckValue<IkReal> x1908=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1908.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1907.value)+(((1.5707963267949)*(x1908.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[4];
IkReal x1909=IKsin(j8);
IkReal x1910=IKcos(j8);
IkReal x1911=((0.2584)*sj11);
IkReal x1912=(cj10*py);
IkReal x1913=((1.0)*cj10);
IkReal x1914=(px*x1909);
IkReal x1915=(px*x1910);
IkReal x1916=(py*x1909);
IkReal x1917=(py*x1910);
evalcond[0]=((((-1.0)*cj10*x1911))+x1915+x1916);
evalcond[1]=((((-1.0)*x1917))+x1914+(((-1.0)*sj10*x1911)));
evalcond[2]=(((x1910*x1912))+((sj10*x1915))+((sj10*x1916))+(((-1.0)*x1913*x1914)));
evalcond[3]=(((sj10*x1917))+x1911+(((-1.0)*x1913*x1915))+(((-1.0)*sj10*x1914))+(((-1.0)*x1909*x1912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1918=(sj10*sj9);
IkReal x1919=(cj9*py);
IkReal x1920=((323.0)*cj11);
IkReal x1921=(cj9*px);
IkReal x1922=((323.0)*py*sj11);
IkReal x1923=((323.0)*px*sj11);
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal((((cj10*x1922))+(((-1.0)*x1918*x1923))+((x1920*x1921))+(((393.8625)*x1921)))),IkReal((((cj10*x1923))+((x1918*x1922))+(((-1.0)*x1919*x1920))+(((-393.8625)*x1919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
CheckValue<IkReal> x1925=IKPowWithIntegerCheck(IKsign(((((1250.0)*pp))+(((-1250.0)*(pz*pz))))),-1);
if(!x1925.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1924.value)+(((1.5707963267949)*(x1925.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1926=IKsin(j8);
IkReal x1927=IKcos(j8);
IkReal x1928=(pz*sj9);
IkReal x1929=((1.0)*py);
IkReal x1930=(px*sj9);
IkReal x1931=((0.2584)*sj11);
IkReal x1932=(sj10*sj9);
IkReal x1933=((0.2584)*cj11);
IkReal x1934=(cj10*x1926);
IkReal x1935=((1.0)*cj9*pz);
IkReal x1936=(sj10*x1926);
IkReal x1937=(cj9*x1927);
IkReal x1938=(px*x1927);
IkReal x1939=(px*x1926);
evalcond[0]=((((-1.0)*cj10*x1931))+x1938+((py*x1926)));
evalcond[1]=((-0.31509)+((cj9*x1939))+x1928+(((-1.0)*x1929*x1937))+(((-1.0)*x1933)));
evalcond[2]=((-0.0325111481)+(((-0.63018)*py*x1937))+(((0.63018)*cj9*x1939))+(((0.63018)*x1928))+(((-1.0)*pp)));
evalcond[3]=((((-0.31509)*cj9))+((x1931*x1932))+(((-1.0)*cj9*x1933))+x1939+(((-1.0)*x1927*x1929)));
evalcond[4]=(((sj10*x1938))+(((-1.0)*cj10*x1935))+((x1930*x1934))+((py*x1936))+(((-1.0)*cj10*sj9*x1927*x1929)));
evalcond[5]=((((-1.0)*x1927*x1929*x1932))+((x1930*x1936))+(((-1.0)*sj10*x1935))+x1931+(((-1.0)*x1929*x1934))+(((-1.0)*cj10*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1940=((39386250.0)*cj9);
IkReal x1941=((62500000.0)*pp);
IkReal x1942=((39386250.0)*pz*sj9);
IkReal x1943=((10177407.0)*cj10*cj9*sj11);
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1940*(pz*pz)))+((pp*x1940)))),-1);
if(!x1944.valid){
continue;
}
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal((((py*x1943))+(((-1.0)*px*x1942))+((px*x1941))+(((2031946.75625)*px)))),IkReal((((py*x1942))+((px*x1943))+(((-1.0)*py*x1941))+(((-2031946.75625)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1944.value)))+(x1945.value));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1946=IKsin(j8);
IkReal x1947=IKcos(j8);
IkReal x1948=(pz*sj9);
IkReal x1949=((1.0)*py);
IkReal x1950=(px*sj9);
IkReal x1951=((0.2584)*sj11);
IkReal x1952=(sj10*sj9);
IkReal x1953=((0.2584)*cj11);
IkReal x1954=(cj10*x1946);
IkReal x1955=((1.0)*cj9*pz);
IkReal x1956=(sj10*x1946);
IkReal x1957=(cj9*x1947);
IkReal x1958=(px*x1947);
IkReal x1959=(px*x1946);
evalcond[0]=(((py*x1946))+(((-1.0)*cj10*x1951))+x1958);
evalcond[1]=((-0.31509)+(((-1.0)*x1949*x1957))+(((-1.0)*x1953))+((cj9*x1959))+x1948);
evalcond[2]=((-0.0325111481)+(((0.63018)*cj9*x1959))+(((-1.0)*pp))+(((-0.63018)*py*x1957))+(((0.63018)*x1948)));
evalcond[3]=((((-0.31509)*cj9))+(((-1.0)*x1947*x1949))+((x1951*x1952))+x1959+(((-1.0)*cj9*x1953)));
evalcond[4]=(((x1950*x1954))+((py*x1956))+(((-1.0)*cj10*x1955))+((sj10*x1958))+(((-1.0)*cj10*sj9*x1947*x1949)));
evalcond[5]=((((-1.0)*x1949*x1954))+(((-1.0)*x1947*x1949*x1952))+((x1950*x1956))+(((-1.0)*sj10*x1955))+x1951+(((-1.0)*cj10*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1960=((323.0)*px);
IkReal x1961=((1250.0)*cj9);
IkReal x1962=((323.0)*py);
IkReal x1963=(cj10*cj9*sj11);
IkReal x1964=((1250.0)*pz*sj9);
CheckValue<IkReal> x1965 = IKatan2WithCheck(IkReal(((((393.8625)*px))+(((-1.0)*px*x1964))+((cj11*x1960))+((x1962*x1963)))),IkReal(((((-1.0)*cj11*x1962))+((py*x1964))+((x1960*x1963))+(((-393.8625)*py)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1965.valid){
continue;
}
CheckValue<IkReal> x1966=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1961*(pz*pz)))+((pp*x1961)))),-1);
if(!x1966.valid){
continue;
}
j8array[0]=((-1.5707963267949)+(x1965.value)+(((1.5707963267949)*(x1966.value))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1967=IKsin(j8);
IkReal x1968=IKcos(j8);
IkReal x1969=(pz*sj9);
IkReal x1970=((1.0)*py);
IkReal x1971=(px*sj9);
IkReal x1972=((0.2584)*sj11);
IkReal x1973=(sj10*sj9);
IkReal x1974=((0.2584)*cj11);
IkReal x1975=(cj10*x1967);
IkReal x1976=((1.0)*cj9*pz);
IkReal x1977=(sj10*x1967);
IkReal x1978=(cj9*x1968);
IkReal x1979=(px*x1968);
IkReal x1980=(px*x1967);
evalcond[0]=(((py*x1967))+x1979+(((-1.0)*cj10*x1972)));
evalcond[1]=((-0.31509)+(((-1.0)*x1974))+((cj9*x1980))+(((-1.0)*x1970*x1978))+x1969);
evalcond[2]=((-0.0325111481)+(((0.63018)*cj9*x1980))+(((-1.0)*pp))+(((-0.63018)*py*x1978))+(((0.63018)*x1969)));
evalcond[3]=(((x1972*x1973))+(((-0.31509)*cj9))+(((-1.0)*x1968*x1970))+x1980+(((-1.0)*cj9*x1974)));
evalcond[4]=(((x1971*x1975))+((sj10*x1979))+((py*x1977))+(((-1.0)*cj10*sj9*x1968*x1970))+(((-1.0)*cj10*x1976)));
evalcond[5]=(((x1971*x1977))+(((-1.0)*sj10*x1976))+(((-1.0)*x1970*x1975))+(((-1.0)*cj10*x1979))+x1972+(((-1.0)*x1968*x1970*x1973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
CheckValue<IkReal> x1983 = IKatan2WithCheck(IkReal(px),IkReal(py),IKFAST_ATAN2_MAGTHRESH);
if(!x1983.valid){
continue;
}
IkReal x1981=((1.0)*(x1983.value));
if((((px*px)+(py*py))) < -0.00001)
continue;
CheckValue<IkReal> x1984=IKPowWithIntegerCheck(IKabs(IKsqrt(((px*px)+(py*py)))),-1);
if(!x1984.valid){
continue;
}
if( (((0.2584)*cj10*sj11*(x1984.value))) < -1-IKFAST_SINCOS_THRESH || (((0.2584)*cj10*sj11*(x1984.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1982=IKasin(((0.2584)*cj10*sj11*(x1984.value)));
j8array[0]=((((-1.0)*x1981))+x1982);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x1981))+(((-1.0)*x1982)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j9eval[3];
IkReal x1985=(cj8*py);
IkReal x1986=((323.0)*cj11);
IkReal x1987=(sj10*sj11);
IkReal x1988=(px*sj8);
IkReal x1989=((1250.0)*pz);
j9eval[0]=(((cj11*x1988))+(((-1.0)*cj11*x1985))+(((1.21938854489164)*x1988))+(((-1.21938854489164)*x1985))+(((-1.0)*pz*x1987)));
j9eval[1]=IKsign(((((-393.8625)*x1985))+(((-1.0)*x1985*x1986))+(((393.8625)*x1988))+(((-323.0)*pz*x1987))+((x1986*x1988))));
j9eval[2]=((IKabs(((((-1.0)*x1985*x1989))+(((-83.4632)*cj11*x1987))+((x1988*x1989))+(((-101.77407)*x1987)))))+(IKabs(((124.102135125)+(((203.54814)*cj11))+(((83.4632)*(cj11*cj11)))+(((-1.0)*pz*x1989))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x1990=(px*sj8);
IkReal x1991=((39386250.0)*pz);
IkReal x1992=(sj10*sj11);
IkReal x1993=((16150000.0)*pp);
IkReal x1994=(cj8*py);
IkReal x1995=(cj11*x1994);
j9eval[0]=(((cj11*x1990))+(((-1.21938854489164)*x1994))+(((-1.0)*x1995))+(((1.21938854489164)*x1990))+(((-1.0)*pz*x1992)));
j9eval[1]=IKsign(((((10177407.0)*cj11*x1990))+(((12410213.5125)*x1990))+(((-12410213.5125)*x1994))+(((-10177407.0)*x1995))+(((-10177407.0)*pz*x1992))));
j9eval[2]=((IKabs(((((-525055.041815)*x1992))+(((-1.0)*x1992*x1993))+(((-1.0)*x1991*x1994))+((x1990*x1991)))))+(IKabs(((640246.103426812)+((cj11*x1993))+(((-1.0)*pz*x1991))+(((525055.041815)*cj11))+(((19693125.0)*pp))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x1996=cj10*cj10;
IkReal x1997=cj11*cj11;
IkReal x1998=(px*sj8);
IkReal x1999=((403750.0)*cj11);
IkReal x2000=(cj8*py);
IkReal x2001=((403750.0)*sj10*sj11);
IkReal x2002=((104329.0)*x1996);
j9eval[0]=((-2.48690842341295)+x1996+(((-1.0)*x1996*x1997))+(((-2.43877708978328)*cj11)));
j9eval[1]=IKsign(((-259456.66890625)+x2002+(((-1.0)*x1997*x2002))+(((-254435.175)*cj11))));
j9eval[2]=((IKabs(((((-1.0)*x1998*x1999))+((x1999*x2000))+(((-1.0)*pz*x2001))+(((492328.125)*x2000))+(((-492328.125)*x1998)))))+(IKabs(((((-492328.125)*pz))+(((-1.0)*x2000*x2001))+(((-1.0)*pz*x1999))+((x1998*x2001))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2003=cj10*cj10;
IkReal x2004=(px*sj8);
IkReal x2005=((403750.0)*cj11);
IkReal x2006=(cj8*py);
IkReal x2007=((403750.0)*sj10*sj11);
IkReal x2008=((104329.0)*x2003);
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal(((((-1.0)*x2006*x2007))+(((-1.0)*pz*x2005))+(((-492328.125)*pz))+((x2004*x2007)))),IkReal(((((-1.0)*x2004*x2005))+(((-1.0)*pz*x2007))+(((-492328.125)*x2004))+(((492328.125)*x2006))+((x2005*x2006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010=IKPowWithIntegerCheck(IKsign(((-259456.66890625)+x2008+(((-254435.175)*cj11))+(((-1.0)*x2008*(cj11*cj11))))),-1);
if(!x2010.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2009.value)+(((1.5707963267949)*(x2010.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2011=IKsin(j9);
IkReal x2012=IKcos(j9);
IkReal x2013=(px*sj8);
IkReal x2014=(py*sj10);
IkReal x2015=((1.0)*cj8);
IkReal x2016=((0.2584)*sj11);
IkReal x2017=((1.0)*pz);
IkReal x2018=((0.2584)*cj11);
IkReal x2019=(cj10*x2011);
IkReal x2020=(py*x2012);
IkReal x2021=(pz*x2011);
IkReal x2022=(sj10*x2011);
IkReal x2023=(sj10*x2012);
evalcond[0]=((((0.31509)*x2011))+(((-1.0)*x2017))+((x2011*x2018))+((x2016*x2023)));
evalcond[1]=((-0.31509)+(((-1.0)*x2018))+x2021+((x2012*x2013))+(((-1.0)*x2015*x2020)));
evalcond[2]=((-0.0325111481)+(((0.63018)*x2012*x2013))+(((0.63018)*x2021))+(((-1.0)*pp))+(((-0.63018)*cj8*x2020)));
evalcond[3]=((((-1.0)*py*x2015))+x2013+((x2016*x2022))+(((-1.0)*x2012*x2018))+(((-0.31509)*x2012)));
evalcond[4]=(((sj8*x2014))+(((-1.0)*py*x2015*x2019))+((cj8*px*sj10))+(((-1.0)*cj10*x2012*x2017))+((x2013*x2019)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+(((-1.0)*cj10*px*x2015))+(((-1.0)*x2011*x2014*x2015))+x2016+(((-1.0)*x2017*x2023))+((x2013*x2022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2024=((16150000.0)*pp);
IkReal x2025=(px*sj8);
IkReal x2026=((39386250.0)*pz);
IkReal x2027=(sj10*sj11);
IkReal x2028=(cj8*py);
IkReal x2029=((10177407.0)*cj11);
CheckValue<IkReal> x2030 = IKatan2WithCheck(IkReal((((x2025*x2026))+(((-1.0)*x2024*x2027))+(((-1.0)*x2026*x2028))+(((-525055.041815)*x2027)))),IkReal(((640246.103426812)+(((-1.0)*pz*x2026))+((cj11*x2024))+(((525055.041815)*cj11))+(((19693125.0)*pp)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2030.valid){
continue;
}
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign(((((-10177407.0)*pz*x2027))+((x2025*x2029))+(((-12410213.5125)*x2028))+(((12410213.5125)*x2025))+(((-1.0)*x2028*x2029)))),-1);
if(!x2031.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2030.value)+(((1.5707963267949)*(x2031.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2032=IKsin(j9);
IkReal x2033=IKcos(j9);
IkReal x2034=(px*sj8);
IkReal x2035=(py*sj10);
IkReal x2036=((1.0)*cj8);
IkReal x2037=((0.2584)*sj11);
IkReal x2038=((1.0)*pz);
IkReal x2039=((0.2584)*cj11);
IkReal x2040=(cj10*x2032);
IkReal x2041=(py*x2033);
IkReal x2042=(pz*x2032);
IkReal x2043=(sj10*x2032);
IkReal x2044=(sj10*x2033);
evalcond[0]=(((x2037*x2044))+((x2032*x2039))+(((0.31509)*x2032))+(((-1.0)*x2038)));
evalcond[1]=((-0.31509)+((x2033*x2034))+x2042+(((-1.0)*x2039))+(((-1.0)*x2036*x2041)));
evalcond[2]=((-0.0325111481)+(((-0.63018)*cj8*x2041))+(((0.63018)*x2033*x2034))+(((-1.0)*pp))+(((0.63018)*x2042)));
evalcond[3]=(((x2037*x2043))+x2034+(((-1.0)*py*x2036))+(((-0.31509)*x2033))+(((-1.0)*x2033*x2039)));
evalcond[4]=(((sj8*x2035))+((cj8*px*sj10))+(((-1.0)*py*x2036*x2040))+(((-1.0)*cj10*x2033*x2038))+((x2034*x2040)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+x2037+(((-1.0)*cj10*px*x2036))+((x2034*x2043))+(((-1.0)*x2032*x2035*x2036))+(((-1.0)*x2038*x2044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x2045=(sj10*sj11);
IkReal x2046=(cj8*py);
IkReal x2047=((323.0)*cj11);
IkReal x2048=((1250.0)*pz);
IkReal x2049=(px*sj8);
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(IKsign(((((393.8625)*x2049))+(((-323.0)*pz*x2045))+(((-393.8625)*x2046))+((x2047*x2049))+(((-1.0)*x2046*x2047)))),-1);
if(!x2050.valid){
continue;
}
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal((((x2048*x2049))+(((-101.77407)*x2045))+(((-83.4632)*cj11*x2045))+(((-1.0)*x2046*x2048)))),IkReal(((124.102135125)+(((203.54814)*cj11))+(((83.4632)*(cj11*cj11)))+(((-1.0)*pz*x2048)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2050.value)))+(x2051.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[6];
IkReal x2052=IKsin(j9);
IkReal x2053=IKcos(j9);
IkReal x2054=(px*sj8);
IkReal x2055=(py*sj10);
IkReal x2056=((1.0)*cj8);
IkReal x2057=((0.2584)*sj11);
IkReal x2058=((1.0)*pz);
IkReal x2059=((0.2584)*cj11);
IkReal x2060=(cj10*x2052);
IkReal x2061=(py*x2053);
IkReal x2062=(pz*x2052);
IkReal x2063=(sj10*x2052);
IkReal x2064=(sj10*x2053);
evalcond[0]=(((x2052*x2059))+((x2057*x2064))+(((0.31509)*x2052))+(((-1.0)*x2058)));
evalcond[1]=((-0.31509)+((x2053*x2054))+x2062+(((-1.0)*x2056*x2061))+(((-1.0)*x2059)));
evalcond[2]=((-0.0325111481)+(((0.63018)*x2053*x2054))+(((0.63018)*x2062))+(((-1.0)*pp))+(((-0.63018)*cj8*x2061)));
evalcond[3]=((((-0.31509)*x2053))+x2054+(((-1.0)*py*x2056))+((x2057*x2063))+(((-1.0)*x2053*x2059)));
evalcond[4]=(((x2054*x2060))+(((-1.0)*cj10*x2053*x2058))+((cj8*px*sj10))+((sj8*x2055))+(((-1.0)*py*x2056*x2060)));
evalcond[5]=((((-1.0)*cj10*py*sj8))+((x2054*x2063))+(((-1.0)*x2058*x2064))+x2057+(((-1.0)*x2052*x2055*x2056))+(((-1.0)*cj10*px*x2056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x135=((1.0)*sj8);
IkReal x136=(cj10*cj8);
IkReal x137=(cj10*sj8);
IkReal x138=(sj11*sj9);
IkReal x139=(cj11*sj9);
IkReal x140=(cj10*cj9);
IkReal x141=(cj11*cj9);
IkReal x142=(cj9*sj11);
IkReal x143=(sj11*x136);
IkReal x144=(x142+((sj10*x139)));
IkReal x145=(((sj10*x141))+(((-1.0)*x138)));
IkReal x146=(((sj9*x136))+(((-1.0)*sj10*x135)));
IkReal x147=((((-1.0)*x141))+((sj10*x138)));
IkReal x148=(x139+((sj10*x142)));
IkReal x149=((((-1.0)*cj10*sj9*x135))+(((-1.0)*cj8*sj10)));
IkReal x150=(((cj11*x136))+(((-1.0)*x135*x144)));
IkReal x151=(((cj11*x137))+((cj8*x144)));
IkReal x152=(((sj11*x137))+((cj8*x147)));
IkReal x153=((((-1.0)*sj8*x147))+x143);
new_r00=(((r20*x145))+((r00*x150))+((r10*x151)));
new_r01=(((r01*x150))+((r21*x145))+((r11*x151)));
new_r02=(((r02*x150))+((r22*x145))+((r12*x151)));
new_r10=(((r20*x140))+((r00*x149))+((r10*x146)));
new_r11=(((r01*x149))+((r21*x140))+((r11*x146)));
new_r12=(((r02*x149))+((r22*x140))+((r12*x146)));
new_r20=(((r20*x148))+((r10*x152))+((r00*((x143+(((-1.0)*x135*x147)))))));
new_r21=(((r01*x153))+((r21*x148))+((r11*x152)));
new_r22=(((r02*x153))+((r22*x148))+((r12*x152)));
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
sj13array[0]=new_r22;
if( sj13array[0] >= -1-IKFAST_SINCOS_THRESH && sj13array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j13valid[0] = j13valid[1] = true;
    j13array[0] = IKasin(sj13array[0]);
    cj13array[0] = IKcos(j13array[0]);
    sj13array[1] = sj13array[0];
    j13array[1] = j13array[0] > 0 ? (IKPI-j13array[0]) : (-IKPI-j13array[0]);
    cj13array[1] = -cj13array[0];
}
else if( isnan(sj13array[0]) )
{
    // probably any value will work
    j13valid[0] = true;
    cj13array[0] = 1; sj13array[0] = 0; j13array[0] = 0;
}
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j12eval[3];
j12eval[0]=cj13;
j12eval[1]=IKsign(cj13);
j12eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
j14eval[0]=cj13;
j14eval[1]=IKsign(cj13);
j14eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=cj13;
j12eval[1]=new_r12;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j14mul = 1;
j14=0;
j12mul=-1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].fmul = j12mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].fmul = j14mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j14mul = 1;
j14=0;
j12mul=1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12=IKatan2(((-1.0)*new_r00), new_r01);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].fmul = j12mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].fmul = j14mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x154=new_r22*new_r22;
IkReal x155=((16.0)*new_r11);
IkReal x156=((16.0)*new_r00);
IkReal x157=((16.0)*new_r22);
IkReal x158=((8.0)*new_r22);
IkReal x159=((16.0)*x154);
IkReal x160=(x154*x155);
IkReal x161=(x154*x156);
j12eval[0]=((IKabs((((new_r10*x158))+(((8.0)*new_r01)))))+(IKabs(((((32.0)*new_r01*x154))+((new_r10*x157))+(((-16.0)*new_r01)))))+(IKabs((((new_r10*x159))+(((-32.0)*new_r10))+(((-1.0)*new_r01*x157)))))+(IKabs(((((-1.0)*x156))+x161)))+(IKabs(((((-1.0)*x160))+x155)))+(IKabs(((((-8.0)*new_r10*x154))+(((-1.0)*new_r01*x158)))))+(IKabs(((((-1.0)*x155))+x160)))+(IKabs(((((-1.0)*x161))+x156))));
if( IKabs(j12eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j12, j14]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j12evalpoly[1];
IkReal x162=new_r22*new_r22;
IkReal x163=((16.0)*new_r11);
IkReal x164=(new_r10*new_r22);
IkReal x165=(x162*x163);
IkReal x166=((((8.0)*x164))+(((8.0)*new_r01)));
op[0]=x166;
op[1]=((((-1.0)*x163))+x165);
op[2]=((((32.0)*new_r01*x162))+(((16.0)*x164))+(((-16.0)*new_r01)));
op[3]=((((-1.0)*x165))+x163);
op[4]=x166;
polyroots4(op,zeror,numroots);
IkReal j12array[4], cj12array[4], sj12array[4], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[4]={true,true,true,true};
_nj12 = 4;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

IkReal x167=new_r22*new_r22;
IkReal x168=((16.0)*new_r00);
IkReal x169=(new_r01*new_r22);
IkReal x170=((16.0)*x167);
IkReal x171=(x167*x168);
IkReal x172=((((8.0)*x169))+(((8.0)*new_r10*x167)));
j12evalpoly[0]=((((htj12*htj12)*((((new_r10*x170))+(((-32.0)*new_r10))+(((-16.0)*x169))))))+(((-1.0)*x172))+(((-1.0)*x172*(htj12*htj12*htj12*htj12)))+(((htj12*htj12*htj12)*(((((-1.0)*x171))+x168))))+((htj12*(((((-1.0)*x168))+x171)))));
if( IKabs(j12evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
{
IkReal j14eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x173=cj12*cj12;
IkReal x174=((1.0)*new_r00);
IkReal x175=(cj12*new_r22);
IkReal x176=((1.0)+((x173*(new_r22*new_r22)))+(((-1.0)*x173)));
j14eval[0]=x176;
j14eval[1]=((IKabs(((((-1.0)*x174*x175))+((new_r01*sj12)))))+(IKabs(((((-1.0)*new_r01*x175))+(((-1.0)*sj12*x174))))));
j14eval[2]=IKsign(x176);
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j14eval[0]=new_r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x177=new_r22*new_r22;
j14eval[0]=(((cj12*x177))+(((-1.0)*cj12)));
j14eval[1]=((((-1.0)*sj12))+((sj12*x177)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x178=IKsin(j14);
IkReal x179=IKcos(j14);
evalcond[0]=((-1.0)*x178);
evalcond[1]=((-1.0)*x179);
evalcond[2]=(x178+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x179))+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x180=IKsin(j14);
IkReal x181=IKcos(j14);
evalcond[0]=(x180+new_r01);
evalcond[1]=((-1.0)*x180);
evalcond[2]=((-1.0)*x181);
evalcond[3]=((((-1.0)*x181))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x182=IKsin(j14);
IkReal x183=IKcos(j14);
evalcond[0]=(x182+new_r11);
evalcond[1]=((-1.0)*x182);
evalcond[2]=((-1.0)*x183);
evalcond[3]=((((-1.0)*x183))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x184=IKsin(j14);
IkReal x185=IKcos(j14);
evalcond[0]=((-1.0)*x184);
evalcond[1]=((-1.0)*x185);
evalcond[2]=(x184+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x185))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x186=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x186.valid){
continue;
}
if((((-1.0)*(x186.value))) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(((-1.0)*(x186.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj12+(((-1.0)*gconst18)))))+(IKabs(((-1.0)+(IKsign(sj12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
sj12=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
cj12=gconst18;
if( (gconst18) < -1-IKFAST_SINCOS_THRESH || (gconst18) > 1+IKFAST_SINCOS_THRESH )
    continue;
j12=IKacos(gconst18);
CheckValue<IkReal> x187=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x187.valid){
continue;
}
if((((-1.0)*(x187.value))) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(((-1.0)*(x187.value)))));
j14eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(gconst18,-1);
if(!x188.valid){
continue;
}
if( IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18))))))))+(((-1.0)*gconst18*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18))))))))+(((-1.0)*gconst18*new_r11))))+IKsqr((new_r10*(x188.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18))))))))+(((-1.0)*gconst18*new_r11))), (new_r10*(x188.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x189=IKsin(j14);
IkReal x190=IKcos(j14);
IkReal x191=((1.0)*x190);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x192=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
IkReal x193=((1.0)*x192);
evalcond[0]=((-1.0)*x189);
evalcond[1]=((-1.0)*x190);
evalcond[2]=(((gconst18*x189))+new_r11);
evalcond[3]=((((-1.0)*gconst18*x191))+new_r10);
evalcond[4]=(((x190*x192))+new_r00);
evalcond[5]=((((-1.0)*x189*x193))+new_r01);
evalcond[6]=(((gconst18*new_r11))+x189+(((-1.0)*new_r01*x193)));
evalcond[7]=(((gconst18*new_r10))+(((-1.0)*x191))+(((-1.0)*new_r00*x193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x194=IKPowWithIntegerCheck(IKsign(gconst18),-1);
if(!x194.valid){
continue;
}
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x194.value)))+(x195.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x196=IKsin(j14);
IkReal x197=IKcos(j14);
IkReal x198=((1.0)*x197);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x199=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
IkReal x200=((1.0)*x199);
evalcond[0]=((-1.0)*x196);
evalcond[1]=((-1.0)*x197);
evalcond[2]=(((gconst18*x196))+new_r11);
evalcond[3]=((((-1.0)*gconst18*x198))+new_r10);
evalcond[4]=(new_r00+((x197*x199)));
evalcond[5]=(new_r01+(((-1.0)*x196*x200)));
evalcond[6]=(((gconst18*new_r11))+x196+(((-1.0)*new_r01*x200)));
evalcond[7]=((((-1.0)*new_r00*x200))+((gconst18*new_r10))+(((-1.0)*x198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x201.valid){
continue;
}
if((((-1.0)*(x201.value))) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(((-1.0)*(x201.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj12+(((-1.0)*gconst18)))))+(IKabs(((1.0)+(IKsign(sj12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
sj12=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))))));
cj12=gconst18;
if( (gconst18) < -1-IKFAST_SINCOS_THRESH || (gconst18) > 1+IKFAST_SINCOS_THRESH )
    continue;
j12=((-1.0)*(IKacos(gconst18)));
CheckValue<IkReal> x202=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x202.valid){
continue;
}
if((((-1.0)*(x202.value))) < -0.00001)
continue;
IkReal gconst18=((-1.0)*(IKsqrt(((-1.0)*(x202.value)))));
j14eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(gconst18,-1);
if(!x203.valid){
continue;
}
if( IKabs(((((-1.0)*gconst18*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x203.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst18*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18))))))))))+IKsqr((new_r10*(x203.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*gconst18*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18))))))))), (new_r10*(x203.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x204=IKsin(j14);
IkReal x205=IKcos(j14);
IkReal x206=((1.0)*x205);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x207=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
evalcond[0]=((-1.0)*x204);
evalcond[1]=((-1.0)*x205);
evalcond[2]=(((gconst18*x204))+new_r11);
evalcond[3]=((((-1.0)*gconst18*x206))+new_r10);
evalcond[4]=(((x204*x207))+new_r01);
evalcond[5]=((((-1.0)*x206*x207))+new_r00);
evalcond[6]=(((gconst18*new_r11))+((new_r01*x207))+x204);
evalcond[7]=(((gconst18*new_r10))+((new_r00*x207))+(((-1.0)*x206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x208=IKPowWithIntegerCheck(IKsign(gconst18),-1);
if(!x208.valid){
continue;
}
CheckValue<IkReal> x209 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x209.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x208.value)))+(x209.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x210=IKsin(j14);
IkReal x211=IKcos(j14);
IkReal x212=((1.0)*x211);
if((((1.0)+(((-1.0)*(gconst18*gconst18))))) < -0.00001)
continue;
IkReal x213=IKsqrt(((1.0)+(((-1.0)*(gconst18*gconst18)))));
evalcond[0]=((-1.0)*x210);
evalcond[1]=((-1.0)*x211);
evalcond[2]=(new_r11+((gconst18*x210)));
evalcond[3]=((((-1.0)*gconst18*x212))+new_r10);
evalcond[4]=(((x210*x213))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x212*x213)));
evalcond[6]=(((gconst18*new_r11))+x210+((new_r01*x213)));
evalcond[7]=(((gconst18*new_r10))+((new_r00*x213))+(((-1.0)*x212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x214.valid){
continue;
}
if((((-1.0)*(x214.value))) < -0.00001)
continue;
IkReal gconst19=IKsqrt(((-1.0)*(x214.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj12+(((-1.0)*gconst19)))))+(IKabs(((-1.0)+(IKsign(sj12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
sj12=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
cj12=gconst19;
if( (gconst19) < -1-IKFAST_SINCOS_THRESH || (gconst19) > 1+IKFAST_SINCOS_THRESH )
    continue;
j12=IKacos(gconst19);
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x215.valid){
continue;
}
if((((-1.0)*(x215.value))) < -0.00001)
continue;
IkReal gconst19=IKsqrt(((-1.0)*(x215.value)));
j14eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(gconst19,-1);
if(!x216.valid){
continue;
}
if( IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x216.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11))))+IKsqr((new_r10*(x216.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11))), (new_r10*(x216.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x217=IKsin(j14);
IkReal x218=IKcos(j14);
IkReal x219=((1.0)*x218);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x220=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
IkReal x221=((1.0)*x220);
evalcond[0]=((-1.0)*x217);
evalcond[1]=((-1.0)*x218);
evalcond[2]=(((gconst19*x217))+new_r11);
evalcond[3]=((((-1.0)*gconst19*x219))+new_r10);
evalcond[4]=(((x218*x220))+new_r00);
evalcond[5]=((((-1.0)*x217*x221))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x221))+((gconst19*new_r11))+x217);
evalcond[7]=(((gconst19*new_r10))+(((-1.0)*x219))+(((-1.0)*new_r00*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x222=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x222.valid){
continue;
}
CheckValue<IkReal> x223 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x223.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x222.value)))+(x223.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x224=IKsin(j14);
IkReal x225=IKcos(j14);
IkReal x226=((1.0)*x225);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x227=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
IkReal x228=((1.0)*x227);
evalcond[0]=((-1.0)*x224);
evalcond[1]=((-1.0)*x225);
evalcond[2]=(((gconst19*x224))+new_r11);
evalcond[3]=((((-1.0)*gconst19*x226))+new_r10);
evalcond[4]=(((x225*x227))+new_r00);
evalcond[5]=((((-1.0)*x224*x228))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x228))+((gconst19*new_r11))+x224);
evalcond[7]=(((gconst19*new_r10))+(((-1.0)*x226))+(((-1.0)*new_r00*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x229=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x229.valid){
continue;
}
if((((-1.0)*(x229.value))) < -0.00001)
continue;
IkReal gconst19=IKsqrt(((-1.0)*(x229.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj12+(((-1.0)*gconst19)))))+(IKabs(((1.0)+(IKsign(sj12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
sj12=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))))));
cj12=gconst19;
if( (gconst19) < -1-IKFAST_SINCOS_THRESH || (gconst19) > 1+IKFAST_SINCOS_THRESH )
    continue;
j12=((-1.0)*(IKacos(gconst19)));
CheckValue<IkReal> x230=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x230.valid){
continue;
}
if((((-1.0)*(x230.value))) < -0.00001)
continue;
IkReal gconst19=IKsqrt(((-1.0)*(x230.value)));
j14eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
CheckValue<IkReal> x231=IKPowWithIntegerCheck(gconst19,-1);
if(!x231.valid){
continue;
}
if( IKabs(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x231.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11))))+IKsqr((new_r10*(x231.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19))))))))+(((-1.0)*gconst19*new_r11))), (new_r10*(x231.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x232=IKsin(j14);
IkReal x233=IKcos(j14);
IkReal x234=((1.0)*x233);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x235=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
evalcond[0]=((-1.0)*x232);
evalcond[1]=((-1.0)*x233);
evalcond[2]=(((gconst19*x232))+new_r11);
evalcond[3]=((((-1.0)*gconst19*x234))+new_r10);
evalcond[4]=(((x232*x235))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x234*x235)));
evalcond[6]=(((gconst19*new_r11))+((new_r01*x235))+x232);
evalcond[7]=(((gconst19*new_r10))+((new_r00*x235))+(((-1.0)*x234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x236=IKPowWithIntegerCheck(IKsign(gconst19),-1);
if(!x236.valid){
continue;
}
CheckValue<IkReal> x237 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x237.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x236.value)))+(x237.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x238=IKsin(j14);
IkReal x239=IKcos(j14);
IkReal x240=((1.0)*x239);
if((((1.0)+(((-1.0)*(gconst19*gconst19))))) < -0.00001)
continue;
IkReal x241=IKsqrt(((1.0)+(((-1.0)*(gconst19*gconst19)))));
evalcond[0]=((-1.0)*x238);
evalcond[1]=((-1.0)*x239);
evalcond[2]=(((gconst19*x238))+new_r11);
evalcond[3]=((((-1.0)*gconst19*x240))+new_r10);
evalcond[4]=(((x238*x241))+new_r01);
evalcond[5]=((((-1.0)*x240*x241))+new_r00);
evalcond[6]=(((gconst19*new_r11))+x238+((new_r01*x241)));
evalcond[7]=(((gconst19*new_r10))+((new_r00*x241))+(((-1.0)*x240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x242=new_r22*new_r22;
IkReal x243=((1.0)*new_r22);
CheckValue<IkReal> x244=IKPowWithIntegerCheck(((((-1.0)*cj12))+((cj12*x242))),-1);
if(!x244.valid){
continue;
}
CheckValue<IkReal> x245=IKPowWithIntegerCheck((((sj12*x242))+(((-1.0)*sj12))),-1);
if(!x245.valid){
continue;
}
if( IKabs(((x244.value)*(((((-1.0)*new_r00*x243))+new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x245.value)*(((((-1.0)*new_r11*x243))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x244.value)*(((((-1.0)*new_r00*x243))+new_r11))))+IKsqr(((x245.value)*(((((-1.0)*new_r11*x243))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x244.value)*(((((-1.0)*new_r00*x243))+new_r11))), ((x245.value)*(((((-1.0)*new_r11*x243))+new_r00))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[10];
IkReal x246=IKsin(j14);
IkReal x247=IKcos(j14);
IkReal x248=(cj12*new_r01);
IkReal x249=((1.0)*new_r22);
IkReal x250=(cj12*new_r00);
IkReal x251=(new_r10*sj12);
IkReal x252=((1.0)*sj12);
IkReal x253=(new_r11*sj12);
IkReal x254=((1.0)*x247);
IkReal x255=(new_r22*x247);
IkReal x256=(cj12*x246);
IkReal x257=(new_r22*x246);
evalcond[0]=((((-1.0)*new_r01*x252))+((cj12*new_r11))+x246);
evalcond[1]=(x257+x250+x251);
evalcond[2]=(x255+x253+x248);
evalcond[3]=(((cj12*new_r10))+(((-1.0)*new_r00*x252))+(((-1.0)*x254)));
evalcond[4]=(((sj12*x247))+((new_r22*x256))+new_r00);
evalcond[5]=(((sj12*x255))+x256+new_r11);
evalcond[6]=(((cj12*x255))+(((-1.0)*x246*x252))+new_r01);
evalcond[7]=(((sj12*x257))+(((-1.0)*cj12*x254))+new_r10);
evalcond[8]=((((-1.0)*x246))+(((-1.0)*x249*x250))+(((-1.0)*x249*x251)));
evalcond[9]=((((-1.0)*x248*x249))+(((-1.0)*x249*x253))+(((-1.0)*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x258=((1.0)*sj12);
CheckValue<IkReal> x259=IKPowWithIntegerCheck(new_r22,-1);
if(!x259.valid){
continue;
}
if( IKabs(((x259.value)*(((((-1.0)*new_r10*x258))+(((-1.0)*cj12*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*new_r10))+(((-1.0)*new_r00*x258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x259.value)*(((((-1.0)*new_r10*x258))+(((-1.0)*cj12*new_r00))))))+IKsqr((((cj12*new_r10))+(((-1.0)*new_r00*x258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((x259.value)*(((((-1.0)*new_r10*x258))+(((-1.0)*cj12*new_r00))))), (((cj12*new_r10))+(((-1.0)*new_r00*x258))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[10];
IkReal x260=IKsin(j14);
IkReal x261=IKcos(j14);
IkReal x262=(cj12*new_r01);
IkReal x263=((1.0)*new_r22);
IkReal x264=(cj12*new_r00);
IkReal x265=(new_r10*sj12);
IkReal x266=((1.0)*sj12);
IkReal x267=(new_r11*sj12);
IkReal x268=((1.0)*x261);
IkReal x269=(new_r22*x261);
IkReal x270=(cj12*x260);
IkReal x271=(new_r22*x260);
evalcond[0]=((((-1.0)*new_r01*x266))+((cj12*new_r11))+x260);
evalcond[1]=(x265+x264+x271);
evalcond[2]=(x267+x262+x269);
evalcond[3]=((((-1.0)*new_r00*x266))+((cj12*new_r10))+(((-1.0)*x268)));
evalcond[4]=(((new_r22*x270))+((sj12*x261))+new_r00);
evalcond[5]=(x270+((sj12*x269))+new_r11);
evalcond[6]=(new_r01+((cj12*x269))+(((-1.0)*x260*x266)));
evalcond[7]=(((sj12*x271))+new_r10+(((-1.0)*cj12*x268)));
evalcond[8]=((((-1.0)*x263*x264))+(((-1.0)*x263*x265))+(((-1.0)*x260)));
evalcond[9]=((((-1.0)*x262*x263))+(((-1.0)*x263*x267))+(((-1.0)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x272=cj12*cj12;
IkReal x273=((1.0)*cj12*new_r22);
CheckValue<IkReal> x274=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x272))+((x272*(new_r22*new_r22))))),-1);
if(!x274.valid){
continue;
}
CheckValue<IkReal> x275 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x273))+((new_r01*sj12)))),IkReal(((((-1.0)*new_r01*x273))+(((-1.0)*new_r00*sj12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x275.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x274.value)))+(x275.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[10];
IkReal x276=IKsin(j14);
IkReal x277=IKcos(j14);
IkReal x278=(cj12*new_r01);
IkReal x279=((1.0)*new_r22);
IkReal x280=(cj12*new_r00);
IkReal x281=(new_r10*sj12);
IkReal x282=((1.0)*sj12);
IkReal x283=(new_r11*sj12);
IkReal x284=((1.0)*x277);
IkReal x285=(new_r22*x277);
IkReal x286=(cj12*x276);
IkReal x287=(new_r22*x276);
evalcond[0]=(((cj12*new_r11))+x276+(((-1.0)*new_r01*x282)));
evalcond[1]=(x287+x281+x280);
evalcond[2]=(x278+x285+x283);
evalcond[3]=(((cj12*new_r10))+(((-1.0)*new_r00*x282))+(((-1.0)*x284)));
evalcond[4]=(((sj12*x277))+new_r00+((new_r22*x286)));
evalcond[5]=(x286+((sj12*x285))+new_r11);
evalcond[6]=((((-1.0)*x276*x282))+new_r01+((cj12*x285)));
evalcond[7]=(((sj12*x287))+new_r10+(((-1.0)*cj12*x284)));
evalcond[8]=((((-1.0)*x276))+(((-1.0)*x279*x280))+(((-1.0)*x279*x281)));
evalcond[9]=((((-1.0)*x278*x279))+(((-1.0)*x284))+(((-1.0)*x279*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x289=IKPowWithIntegerCheck(cj13,-1);
if(!x289.valid){
continue;
}
IkReal x288=x289.value;
CheckValue<IkReal> x290=IKPowWithIntegerCheck(new_r12,-1);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291=IKPowWithIntegerCheck(x288,-2);
if(!x291.valid){
continue;
}
if( IKabs((x288*(x290.value)*(((new_r02*new_r02)+(((-1.0)*(x291.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x288)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x288*(x290.value)*(((new_r02*new_r02)+(((-1.0)*(x291.value)))))))+IKsqr(((-1.0)*new_r02*x288))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((x288*(x290.value)*(((new_r02*new_r02)+(((-1.0)*(x291.value)))))), ((-1.0)*new_r02*x288));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x292=IKcos(j12);
IkReal x293=IKsin(j12);
IkReal x294=((1.0)*sj13);
IkReal x295=(new_r02*x292);
IkReal x296=(cj13*x293);
IkReal x297=(new_r12*x293);
IkReal x298=(cj13*x292);
evalcond[0]=(x298+new_r02);
evalcond[1]=(x296+new_r12);
evalcond[2]=(((new_r12*x292))+(((-1.0)*new_r02*x293)));
evalcond[3]=(cj13+x295+x297);
evalcond[4]=((((-1.0)*new_r20*x294))+((new_r10*x296))+((new_r00*x298)));
evalcond[5]=((((-1.0)*new_r21*x294))+((new_r11*x296))+((new_r01*x298)));
evalcond[6]=((1.0)+((new_r12*x296))+((cj13*x295))+(((-1.0)*new_r22*x294)));
evalcond[7]=((((-1.0)*cj13*new_r22))+(((-1.0)*x294*x297))+(((-1.0)*x294*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
j14eval[0]=cj13;
j14eval[1]=IKsign(cj13);
j14eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj13;
j14eval[1]=sj12;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
j14eval[0]=cj13;
j14eval[1]=sj12;
j14eval[2]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x299=((1.0)*cj12);
if( IKabs((((new_r01*sj12))+(((-1.0)*new_r00*x299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x299))+(((-1.0)*new_r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj12))+(((-1.0)*new_r00*x299))))+IKsqr(((((-1.0)*new_r01*x299))+(((-1.0)*new_r00*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((new_r01*sj12))+(((-1.0)*new_r00*x299))), ((((-1.0)*new_r01*x299))+(((-1.0)*new_r00*sj12))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x300=IKsin(j14);
IkReal x301=IKcos(j14);
IkReal x302=((1.0)*sj12);
IkReal x303=(cj12*x300);
IkReal x304=(sj12*x301);
IkReal x305=((1.0)*x301);
IkReal x306=(sj12*x300);
IkReal x307=(x304+x303);
evalcond[0]=(((cj12*new_r00))+x300+((new_r10*sj12)));
evalcond[1]=(((cj12*new_r01))+x301+((new_r11*sj12)));
evalcond[2]=(((cj12*new_r11))+x300+(((-1.0)*new_r01*x302)));
evalcond[3]=(x307+new_r00);
evalcond[4]=(x307+new_r11);
evalcond[5]=(((cj12*new_r10))+(((-1.0)*new_r00*x302))+(((-1.0)*x305)));
evalcond[6]=(((cj12*x301))+new_r01+(((-1.0)*x300*x302)));
evalcond[7]=(x306+(((-1.0)*cj12*x305))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs((((cj12*new_r00))+((new_r01*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*new_r01))+(((-1.0)*new_r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*new_r00))+((new_r01*sj12))))+IKsqr((((cj12*new_r01))+(((-1.0)*new_r00*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj12*new_r00))+((new_r01*sj12))), (((cj12*new_r01))+(((-1.0)*new_r00*sj12))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x308=IKsin(j14);
IkReal x309=IKcos(j14);
IkReal x310=((1.0)*cj12);
IkReal x311=((1.0)*sj12);
IkReal x312=((1.0)*x309);
IkReal x313=((1.0)*x308);
IkReal x314=(((x308*x311))+((x309*x310)));
evalcond[0]=(((cj12*new_r11))+x308+(((-1.0)*new_r01*x311)));
evalcond[1]=(((cj12*new_r00))+(((-1.0)*x313))+((new_r10*sj12)));
evalcond[2]=(((cj12*new_r01))+(((-1.0)*x312))+((new_r11*sj12)));
evalcond[3]=((((-1.0)*new_r00*x311))+((cj12*new_r10))+(((-1.0)*x312)));
evalcond[4]=((((-1.0)*x308*x310))+new_r00+((sj12*x309)));
evalcond[5]=(((cj12*x308))+new_r11+(((-1.0)*x309*x311)));
evalcond[6]=((((-1.0)*x314))+new_r01);
evalcond[7]=((((-1.0)*x314))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x315=IKsin(j14);
IkReal x316=IKcos(j14);
IkReal x317=((1.0)*sj13);
IkReal x318=((1.0)*cj13);
IkReal x319=((1.0)*x316);
evalcond[0]=(x315+new_r11);
evalcond[1]=(((cj13*x315))+new_r20);
evalcond[2]=(((cj13*x316))+new_r21);
evalcond[3]=((((-1.0)*x319))+new_r10);
evalcond[4]=(new_r00+((sj13*x315)));
evalcond[5]=(new_r01+((new_r22*x316)));
evalcond[6]=((((-1.0)*new_r00*x317))+(((-1.0)*new_r20*x318))+(((-1.0)*x315)));
evalcond[7]=((((-1.0)*new_r21*x318))+(((-1.0)*x319))+(((-1.0)*new_r01*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
j14eval[1]=IKsign(cj13);
j14eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
j14eval[1]=new_r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, new_r01);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x320=IKsin(j14);
IkReal x321=IKcos(j14);
evalcond[0]=(x320+(((-1.0)*new_r11)));
evalcond[1]=(x320+(((-1.0)*new_r00)));
evalcond[2]=(x321+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x321))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x322=IKsin(j14);
IkReal x323=((1.0)*(IKcos(j14)));
evalcond[0]=(x322+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x323))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x322))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x323))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x324=IKsin(j14);
IkReal x325=IKcos(j14);
evalcond[0]=(new_r22*x324);
evalcond[1]=((-1.0)*x324);
evalcond[2]=((-1.0)*x325);
evalcond[3]=(x324+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x325))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x326=IKPowWithIntegerCheck(cj13,-1);
if(!x326.valid){
continue;
}
CheckValue<IkReal> x327=IKPowWithIntegerCheck(new_r22,-1);
if(!x327.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x326.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x327.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x326.value)))+IKsqr((new_r01*(x327.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*(x326.value)), (new_r01*(x327.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x328=IKsin(j14);
IkReal x329=IKcos(j14);
IkReal x330=((1.0)*cj13);
IkReal x331=((1.0)*x329);
evalcond[0]=(((cj13*x328))+new_r20);
evalcond[1]=(((cj13*x329))+new_r21);
evalcond[2]=(x328+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x331)));
evalcond[4]=(((sj13*x328))+(((-1.0)*new_r00)));
evalcond[5]=(((new_r22*x329))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x330))+(((-1.0)*x328))+((new_r00*sj13)));
evalcond[7]=((((-1.0)*new_r21*x330))+(((-1.0)*x331))+((new_r01*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(cj13,-1);
if(!x332.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x332.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x332.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x332.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x333=IKsin(j14);
IkReal x334=IKcos(j14);
IkReal x335=((1.0)*cj13);
IkReal x336=((1.0)*x334);
evalcond[0]=(((cj13*x333))+new_r20);
evalcond[1]=(((cj13*x334))+new_r21);
evalcond[2]=(x333+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x336)));
evalcond[4]=((((-1.0)*new_r00))+((sj13*x333)));
evalcond[5]=(((new_r22*x334))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x335))+(((-1.0)*x333))+((new_r00*sj13)));
evalcond[7]=((((-1.0)*new_r21*x335))+(((-1.0)*x336))+((new_r01*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x337=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x337.value)))+(x338.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x339=IKsin(j14);
IkReal x340=IKcos(j14);
IkReal x341=((1.0)*cj13);
IkReal x342=((1.0)*x340);
evalcond[0]=(((cj13*x339))+new_r20);
evalcond[1]=(((cj13*x340))+new_r21);
evalcond[2]=(x339+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x342)));
evalcond[4]=((((-1.0)*new_r00))+((sj13*x339)));
evalcond[5]=(((new_r22*x340))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x339))+(((-1.0)*new_r20*x341))+((new_r00*sj13)));
evalcond[7]=(((new_r01*sj13))+(((-1.0)*x342))+(((-1.0)*new_r21*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x343=IKcos(j14);
IkReal x344=IKsin(j14);
IkReal x345=((1.0)*sj12);
IkReal x346=((1.0)*x343);
evalcond[0]=(x344+new_r20);
evalcond[1]=(x343+new_r21);
evalcond[2]=(new_r00+((sj12*x343)));
evalcond[3]=(((cj12*x344))+new_r11);
evalcond[4]=((((-1.0)*x344*x345))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*cj12*x346)));
evalcond[6]=(((cj12*new_r11))+x344+(((-1.0)*new_r01*x345)));
evalcond[7]=(((cj12*new_r10))+(((-1.0)*new_r00*x345))+(((-1.0)*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r20, new_r21);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x347=IKcos(j14);
IkReal x348=IKsin(j14);
IkReal x349=((1.0)*sj12);
IkReal x350=((1.0)*x347);
IkReal x351=((1.0)*x348);
evalcond[0]=((((-1.0)*x351))+new_r20);
evalcond[1]=((((-1.0)*x350))+new_r21);
evalcond[2]=(new_r00+((sj12*x347)));
evalcond[3]=(((cj12*x348))+new_r11);
evalcond[4]=((((-1.0)*x348*x349))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*cj12*x350)));
evalcond[6]=(((cj12*new_r11))+x348+(((-1.0)*new_r01*x349)));
evalcond[7]=((((-1.0)*x350))+((cj12*new_r10))+(((-1.0)*new_r00*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j14]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(cj13,-1);
if(!x353.valid){
continue;
}
IkReal x352=x353.value;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(sj12,-1);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355=IKPowWithIntegerCheck(sj13,-1);
if(!x355.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x352)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x352*(x354.value)*(x355.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x352))+IKsqr((x352*(x354.value)*(x355.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*x352), (x352*(x354.value)*(x355.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x356=IKsin(j14);
IkReal x357=IKcos(j14);
IkReal x358=(cj12*new_r00);
IkReal x359=(cj12*new_r01);
IkReal x360=(new_r10*sj12);
IkReal x361=((1.0)*sj12);
IkReal x362=((1.0)*sj13);
IkReal x363=((1.0)*cj13);
IkReal x364=((1.0)*x357);
IkReal x365=(sj13*x356);
IkReal x366=(sj12*x357);
IkReal x367=(sj13*x357);
evalcond[0]=(((cj13*x356))+new_r20);
evalcond[1]=(((cj13*x357))+new_r21);
evalcond[2]=(((cj12*new_r11))+x356+(((-1.0)*new_r01*x361)));
evalcond[3]=(x358+x360+x365);
evalcond[4]=(x359+x367+((new_r11*sj12)));
evalcond[5]=((((-1.0)*new_r00*x361))+(((-1.0)*x364))+((cj12*new_r10)));
evalcond[6]=(x366+((cj12*x365))+new_r00);
evalcond[7]=(((sj13*x366))+((cj12*x356))+new_r11);
evalcond[8]=((((-1.0)*x356*x361))+((cj12*x367))+new_r01);
evalcond[9]=((((-1.0)*cj12*x364))+((sj12*x365))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x363))+(((-1.0)*x360*x362))+(((-1.0)*x358*x362))+(((-1.0)*x356)));
evalcond[11]=((((-1.0)*x364))+(((-1.0)*new_r11*sj13*x361))+(((-1.0)*x359*x362))+(((-1.0)*new_r21*x363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x369=IKPowWithIntegerCheck(cj13,-1);
if(!x369.valid){
continue;
}
IkReal x368=x369.value;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(sj12,-1);
if(!x370.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x368)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x368*(x370.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x368))+IKsqr((x368*(x370.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*x368), (x368*(x370.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x371=IKsin(j14);
IkReal x372=IKcos(j14);
IkReal x373=(cj12*new_r00);
IkReal x374=(cj12*new_r01);
IkReal x375=(new_r10*sj12);
IkReal x376=((1.0)*sj12);
IkReal x377=((1.0)*sj13);
IkReal x378=((1.0)*cj13);
IkReal x379=((1.0)*x372);
IkReal x380=(sj13*x371);
IkReal x381=(sj12*x372);
IkReal x382=(sj13*x372);
evalcond[0]=(((cj13*x371))+new_r20);
evalcond[1]=(((cj13*x372))+new_r21);
evalcond[2]=(((cj12*new_r11))+x371+(((-1.0)*new_r01*x376)));
evalcond[3]=(x380+x375+x373);
evalcond[4]=(x382+x374+((new_r11*sj12)));
evalcond[5]=((((-1.0)*new_r00*x376))+(((-1.0)*x379))+((cj12*new_r10)));
evalcond[6]=(x381+new_r00+((cj12*x380)));
evalcond[7]=(((cj12*x371))+new_r11+((sj13*x381)));
evalcond[8]=((((-1.0)*x371*x376))+new_r01+((cj12*x382)));
evalcond[9]=((((-1.0)*cj12*x379))+new_r10+((sj12*x380)));
evalcond[10]=((((-1.0)*x371))+(((-1.0)*new_r20*x378))+(((-1.0)*x373*x377))+(((-1.0)*x375*x377)));
evalcond[11]=((((-1.0)*new_r21*x378))+(((-1.0)*new_r11*sj13*x376))+(((-1.0)*x379))+(((-1.0)*x374*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x383=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x383.valid){
continue;
}
CheckValue<IkReal> x384 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x384.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x383.value)))+(x384.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x385=IKsin(j14);
IkReal x386=IKcos(j14);
IkReal x387=(cj12*new_r00);
IkReal x388=(cj12*new_r01);
IkReal x389=(new_r10*sj12);
IkReal x390=((1.0)*sj12);
IkReal x391=((1.0)*sj13);
IkReal x392=((1.0)*cj13);
IkReal x393=((1.0)*x386);
IkReal x394=(sj13*x385);
IkReal x395=(sj12*x386);
IkReal x396=(sj13*x386);
evalcond[0]=(((cj13*x385))+new_r20);
evalcond[1]=(((cj13*x386))+new_r21);
evalcond[2]=((((-1.0)*new_r01*x390))+((cj12*new_r11))+x385);
evalcond[3]=(x387+x389+x394);
evalcond[4]=(x388+x396+((new_r11*sj12)));
evalcond[5]=((((-1.0)*x393))+((cj12*new_r10))+(((-1.0)*new_r00*x390)));
evalcond[6]=(x395+((cj12*x394))+new_r00);
evalcond[7]=(((sj13*x395))+new_r11+((cj12*x385)));
evalcond[8]=((((-1.0)*x385*x390))+((cj12*x396))+new_r01);
evalcond[9]=((((-1.0)*cj12*x393))+((sj12*x394))+new_r10);
evalcond[10]=((((-1.0)*x387*x391))+(((-1.0)*x389*x391))+(((-1.0)*x385))+(((-1.0)*new_r20*x392)));
evalcond[11]=((((-1.0)*x393))+(((-1.0)*new_r21*x392))+(((-1.0)*new_r11*sj13*x390))+(((-1.0)*x388*x391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x397=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x397.valid){
continue;
}
CheckValue<IkReal> x398 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x398.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x397.value)))+(x398.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[2];
evalcond[0]=(((cj13*(IKsin(j14))))+new_r20);
evalcond[1]=(new_r21+((cj13*(IKcos(j14)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[3];
j12eval[0]=cj13;
j12eval[1]=IKsign(cj13);
j12eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=cj13;
j12eval[1]=new_r12;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x399=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j12eval[0]=x399;
j12eval[1]=IKsign(x399);
j12eval[2]=((IKabs(((((-1.0)*cj14*new_r00))+((new_r01*sj14)))))+(IKabs((((cj14*new_r10))+(((-1.0)*new_r11*sj14))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x400=(((cj14*new_r01))+(((-1.0)*new_r11*sj14)));
j12eval[0]=x400;
j12eval[1]=((IKabs((((cj14*sj14))+(((-1.0)*new_r00*new_r01)))))+(IKabs(((((-1.0)*(cj14*cj14)))+((new_r00*new_r11))))));
j12eval[2]=IKsign(x400);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
IkReal x401=((1.0)*sj14);
IkReal x402=(((cj14*new_r00))+(((-1.0)*new_r10*x401)));
j12eval[0]=x402;
j12eval[1]=((IKabs(((1.0)+(((-1.0)*(cj14*cj14)))+(((-1.0)*new_r00*new_r11)))))+(IKabs((((new_r10*new_r11))+(((-1.0)*cj14*x401))))));
j12eval[2]=IKsign(x402);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x405 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x405)==0){
continue;
}
IkReal x403=pow(x405,-0.5);
IkReal x404=((-1.0)*x403);
CheckValue<IkReal> x406 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x406.valid){
continue;
}
IkReal gconst0=((-1.0)*(x406.value));
IkReal gconst1=(new_r00*x404);
IkReal gconst2=(new_r10*x404);
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x407.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x411 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x411.valid){
continue;
}
IkReal x408=((-1.0)*(x411.value));
IkReal x409=x403;
IkReal x410=((-1.0)*x409);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x408;
IkReal gconst0=x408;
IkReal gconst1=(new_r00*x410);
IkReal gconst2=(new_r10*x410);
IkReal x412=new_r10*new_r10;
IkReal x413=(new_r00*new_r11);
IkReal x414=(x413+(((-1.0)*new_r01*new_r10)));
IkReal x415=x403;
IkReal x416=((1.0)*x415);
j12eval[0]=x414;
j12eval[1]=((IKabs(((((-1.0)*new_r00*new_r01*x416))+((new_r00*new_r10*x415)))))+(IKabs(((((-1.0)*x412*x416))+((x413*x415))))));
j12eval[2]=IKsign(x414);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x420 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x420.valid){
continue;
}
IkReal x417=((-1.0)*(x420.value));
IkReal x418=x403;
IkReal x419=((-1.0)*x418);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x417;
IkReal gconst0=x417;
IkReal gconst1=(new_r00*x419);
IkReal gconst2=(new_r10*x419);
IkReal x421=new_r10*new_r10;
IkReal x422=((1.0)*new_r00);
CheckValue<IkReal> x425=IKPowWithIntegerCheck((x421+(new_r00*new_r00)),-1);
if(!x425.valid){
continue;
}
IkReal x423=x425.value;
IkReal x424=(x421*x423);
j12eval[0]=((IKabs((x424+(((-1.0)*new_r11*x422)))))+(IKabs((((new_r00*new_r01*x424))+((new_r01*x423*(new_r00*new_r00*new_r00)))+(((-1.0)*new_r10*x422*x423))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
CheckValue<IkReal> x429 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x429.valid){
continue;
}
IkReal x426=((-1.0)*(x429.value));
IkReal x427=x403;
IkReal x428=((-1.0)*x427);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x426;
IkReal gconst0=x426;
IkReal gconst1=(new_r00*x428);
IkReal gconst2=(new_r10*x428);
IkReal x430=new_r00*new_r00;
IkReal x431=(new_r00*new_r01);
IkReal x432=(((new_r10*new_r11))+x431);
IkReal x433=x403;
IkReal x434=(new_r00*x433);
j12eval[0]=x432;
j12eval[1]=((IKabs((((new_r10*x434))+((x431*x433)))))+(IKabs((((new_r11*x434))+(((-1.0)*x430*x433))))));
j12eval[2]=IKsign(x432);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x435=IKPowWithIntegerCheck(gconst2,-1);
if(!x435.valid){
continue;
}
cj12array[0]=(new_r10*(x435.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x436=IKsin(j12);
IkReal x437=IKcos(j12);
evalcond[0]=(new_r10*x436);
evalcond[1]=(gconst2*x436);
evalcond[2]=((-1.0)*new_r01*x436);
evalcond[3]=(((new_r01*x437))+gconst2);
evalcond[4]=(((gconst2*x437))+new_r01);
evalcond[5]=((((-1.0)*gconst2))+((new_r10*x437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst1;
evalcond[2]=gconst2;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x438=((-1.0)*new_r10);
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(new_r00),IkReal(x438),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
IkReal x439=((-1.0)*(x440.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x439;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst0=x439;
IkReal gconst1=((-1.0)*new_r00);
IkReal gconst2=x438;
j12eval[0]=1.0;
j12eval[1]=1.0;
j12eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x441=((-1.0)*new_r10);
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal(new_r00),IkReal(x441),IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
IkReal x442=((-1.0)*(x443.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x442;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst0=x442;
IkReal gconst1=((-1.0)*new_r00);
IkReal gconst2=x441;
j12eval[0]=-1.0;
j12eval[1]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
j12eval[2]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x444=((-1.0)*new_r10);
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(new_r00),IkReal(x444),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
IkReal x445=((-1.0)*(x446.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x445;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst0=x445;
IkReal gconst1=((-1.0)*new_r00);
IkReal gconst2=x444;
j12eval[0]=-1.0;
j12eval[1]=((IKabs(new_r10*new_r10))+(IKabs((new_r00*new_r10))));
j12eval[2]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x447=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x447.valid){
continue;
}
CheckValue<IkReal> x448 = IKatan2WithCheck(IkReal((gconst1*new_r10)),IkReal(((-1.0)*gconst2*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x448.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x447.value)))+(x448.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x449=IKcos(j12);
IkReal x450=IKsin(j12);
IkReal x451=(gconst2*x450);
IkReal x452=(gconst1*x449);
IkReal x453=((1.0)*x450);
IkReal x454=(gconst2*x449);
IkReal x455=(x452+x451);
evalcond[0]=x455;
evalcond[1]=(((new_r00*x449))+((new_r10*x450))+gconst1);
evalcond[2]=(x455+new_r00);
evalcond[3]=((((-1.0)*gconst1*x453))+x454);
evalcond[4]=(((gconst1*x450))+(((-1.0)*x454))+new_r10);
evalcond[5]=((((-1.0)*gconst2))+(((-1.0)*new_r00*x453))+((new_r10*x449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal((gconst2*new_r00)),IkReal((gconst1*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst2*gconst2)))+(((-1.0)*(gconst1*gconst1))))),-1);
if(!x457.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x456.value)+(((1.5707963267949)*(x457.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x458=IKcos(j12);
IkReal x459=IKsin(j12);
IkReal x460=(gconst2*x459);
IkReal x461=(gconst1*x458);
IkReal x462=((1.0)*x459);
IkReal x463=(gconst2*x458);
IkReal x464=(x461+x460);
evalcond[0]=x464;
evalcond[1]=(((new_r10*x459))+((new_r00*x458))+gconst1);
evalcond[2]=(x464+new_r00);
evalcond[3]=((((-1.0)*gconst1*x462))+x463);
evalcond[4]=(((gconst1*x459))+(((-1.0)*x463))+new_r10);
evalcond[5]=(((new_r10*x458))+(((-1.0)*gconst2))+(((-1.0)*new_r00*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal((gconst1*gconst2)),IkReal(gconst1*gconst1),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*new_r00))+(((-1.0)*gconst2*new_r10)))),-1);
if(!x466.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x465.value)+(((1.5707963267949)*(x466.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x467=IKcos(j12);
IkReal x468=IKsin(j12);
IkReal x469=(gconst2*x468);
IkReal x470=(gconst1*x467);
IkReal x471=((1.0)*x468);
IkReal x472=(gconst2*x467);
IkReal x473=(x469+x470);
evalcond[0]=x473;
evalcond[1]=(((new_r10*x468))+((new_r00*x467))+gconst1);
evalcond[2]=(x473+new_r00);
evalcond[3]=((((-1.0)*gconst1*x471))+x472);
evalcond[4]=(((gconst1*x468))+(((-1.0)*x472))+new_r10);
evalcond[5]=(((new_r10*x467))+(((-1.0)*new_r00*x471))+(((-1.0)*gconst2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
IkReal x474=((-1.0)*(x475.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x474;
new_r01=0;
new_r10=0;
IkReal gconst0=x474;
IkReal x476 = new_r00*new_r00;
if(IKabs(x476)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r00*(pow(x476,-0.5)));
IkReal gconst2=0;
j12eval[0]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x478 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x478.valid){
continue;
}
IkReal x477=((-1.0)*(x478.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x477;
new_r01=0;
new_r10=0;
IkReal gconst0=x477;
IkReal x479 = new_r00*new_r00;
if(IKabs(x479)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r00*(pow(x479,-0.5)));
IkReal gconst2=0;
j12eval[0]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x480=IKPowWithIntegerCheck(gconst1,-1);
if(!x480.valid){
continue;
}
cj12array[0]=((-1.0)*new_r00*(x480.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x481=IKsin(j12);
IkReal x482=IKcos(j12);
IkReal x483=((-1.0)*x481);
evalcond[0]=(new_r11*x481);
evalcond[1]=(new_r00*x483);
evalcond[2]=(gconst1*x483);
evalcond[3]=(((new_r11*x482))+gconst1);
evalcond[4]=(gconst1+((new_r00*x482)));
evalcond[5]=(new_r11+((gconst1*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x484=IKPowWithIntegerCheck(new_r00,-1);
if(!x484.valid){
continue;
}
cj12array[0]=((-1.0)*gconst1*(x484.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x485=IKsin(j12);
IkReal x486=IKcos(j12);
IkReal x487=(gconst1*x486);
IkReal x488=((-1.0)*x485);
evalcond[0]=(new_r11*x485);
evalcond[1]=(new_r00*x488);
evalcond[2]=(gconst1*x488);
evalcond[3]=(((new_r11*x486))+gconst1);
evalcond[4]=(x487+new_r00);
evalcond[5]=(x487+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x489=IKPowWithIntegerCheck(new_r11,-1);
if(!x489.valid){
continue;
}
cj12array[0]=((-1.0)*gconst1*(x489.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x490=IKsin(j12);
IkReal x491=IKcos(j12);
IkReal x492=(gconst1*x491);
IkReal x493=((-1.0)*x490);
evalcond[0]=(new_r11*x490);
evalcond[1]=(new_r00*x493);
evalcond[2]=(gconst1*x493);
evalcond[3]=(gconst1+((new_r00*x491)));
evalcond[4]=(x492+new_r00);
evalcond[5]=(x492+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x494=((-1.0)*new_r10);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(0),IkReal(x494),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
IkReal x495=((-1.0)*(x496.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x495;
new_r00=0;
IkReal gconst0=x495;
IkReal gconst1=0;
IkReal x497 = new_r10*new_r10;
if(IKabs(x497)==0){
continue;
}
IkReal gconst2=(x494*(pow(x497,-0.5)));
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x498=((-1.0)*new_r10);
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(0),IkReal(x498),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
IkReal x499=((-1.0)*(x500.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x499;
new_r00=0;
IkReal gconst0=x499;
IkReal gconst1=0;
IkReal x501 = new_r10*new_r10;
if(IKabs(x501)==0){
continue;
}
IkReal gconst2=(x498*(pow(x501,-0.5)));
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x502=((-1.0)*new_r10);
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(0),IkReal(x502),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
IkReal x503=((-1.0)*(x504.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x503;
new_r00=0;
IkReal gconst0=x503;
IkReal gconst1=0;
IkReal x505 = new_r10*new_r10;
if(IKabs(x505)==0){
continue;
}
IkReal gconst2=(x502*(pow(x505,-0.5)));
j12eval[0]=new_r10;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x506=IKPowWithIntegerCheck(gconst2,-1);
if(!x506.valid){
continue;
}
CheckValue<IkReal> x507=IKPowWithIntegerCheck(new_r10,-1);
if(!x507.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x506.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst2*(x507.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x506.value)))+IKsqr((gconst2*(x507.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r11*(x506.value)), (gconst2*(x507.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x508=IKsin(j12);
IkReal x509=IKcos(j12);
IkReal x510=(gconst2*x508);
IkReal x511=(gconst2*x509);
evalcond[0]=(new_r10*x508);
evalcond[1]=x510;
evalcond[2]=(x510+new_r11);
evalcond[3]=(x511+new_r01);
evalcond[4]=((((-1.0)*x511))+new_r10);
evalcond[5]=((((-1.0)*gconst2))+((new_r10*x509)));
evalcond[6]=((((-1.0)*new_r01*x508))+((new_r11*x509)));
evalcond[7]=(gconst2+((new_r11*x508))+((new_r01*x509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x513.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x512.value)+(((1.5707963267949)*(x513.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x514=IKsin(j12);
IkReal x515=IKcos(j12);
IkReal x516=(gconst2*x514);
IkReal x517=(gconst2*x515);
evalcond[0]=(new_r10*x514);
evalcond[1]=x516;
evalcond[2]=(x516+new_r11);
evalcond[3]=(x517+new_r01);
evalcond[4]=((((-1.0)*x517))+new_r10);
evalcond[5]=(((new_r10*x515))+(((-1.0)*gconst2)));
evalcond[6]=(((new_r11*x515))+(((-1.0)*new_r01*x514)));
evalcond[7]=(((new_r01*x515))+((new_r11*x514))+gconst2);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x518 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x518.valid){
continue;
}
CheckValue<IkReal> x519=IKPowWithIntegerCheck(IKsign(gconst2),-1);
if(!x519.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x518.value)+(((1.5707963267949)*(x519.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x520=IKsin(j12);
IkReal x521=IKcos(j12);
IkReal x522=(gconst2*x520);
IkReal x523=(gconst2*x521);
evalcond[0]=(new_r10*x520);
evalcond[1]=x522;
evalcond[2]=(x522+new_r11);
evalcond[3]=(x523+new_r01);
evalcond[4]=((((-1.0)*x523))+new_r10);
evalcond[5]=((((-1.0)*gconst2))+((new_r10*x521)));
evalcond[6]=(((new_r11*x521))+(((-1.0)*new_r01*x520)));
evalcond[7]=(((new_r01*x521))+gconst2+((new_r11*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x525 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x525.valid){
continue;
}
IkReal x524=((-1.0)*(x525.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x524;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst0=x524;
IkReal x526 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x526)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r00*(pow(x526,-0.5)));
IkReal gconst2=0;
j12eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
IkReal x527=((-1.0)*(x528.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x527;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst0=x527;
IkReal x529 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x529)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r00*(pow(x529,-0.5)));
IkReal gconst2=0;
j12eval[0]=new_r01;
j12eval[1]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
IkReal x530=((-1.0)*(x531.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst1;
cj14=gconst2;
j14=x530;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst0=x530;
IkReal x532 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x532)==0){
continue;
}
IkReal gconst1=((-1.0)*new_r00*(pow(x532,-0.5)));
IkReal gconst2=0;
j12eval[0]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x533=IKPowWithIntegerCheck(gconst1,-1);
if(!x533.valid){
continue;
}
CheckValue<IkReal> x534=IKPowWithIntegerCheck(new_r00,-1);
if(!x534.valid){
continue;
}
if( IKabs((new_r01*(x533.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst1*(x534.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x533.value)))+IKsqr(((-1.0)*gconst1*(x534.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((new_r01*(x533.value)), ((-1.0)*gconst1*(x534.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x535=IKcos(j12);
IkReal x536=IKsin(j12);
IkReal x537=(gconst1*x535);
IkReal x538=((1.0)*x536);
evalcond[0]=(new_r01*x535);
evalcond[1]=x537;
evalcond[2]=(gconst1*x536);
evalcond[3]=((-1.0)*new_r00*x536);
evalcond[4]=(gconst1+((new_r00*x535)));
evalcond[5]=(x537+new_r00);
evalcond[6]=(gconst1+(((-1.0)*new_r01*x538)));
evalcond[7]=(new_r01+(((-1.0)*gconst1*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x539=IKPowWithIntegerCheck(new_r01,-1);
if(!x539.valid){
continue;
}
CheckValue<IkReal> x540=IKPowWithIntegerCheck(new_r00,-1);
if(!x540.valid){
continue;
}
if( IKabs((gconst1*(x539.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst1*(x540.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst1*(x539.value)))+IKsqr(((-1.0)*gconst1*(x540.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((gconst1*(x539.value)), ((-1.0)*gconst1*(x540.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x541=IKcos(j12);
IkReal x542=IKsin(j12);
IkReal x543=(gconst1*x541);
IkReal x544=((1.0)*x542);
evalcond[0]=(new_r01*x541);
evalcond[1]=x543;
evalcond[2]=(gconst1*x542);
evalcond[3]=((-1.0)*new_r00*x542);
evalcond[4]=(((new_r00*x541))+gconst1);
evalcond[5]=(x543+new_r00);
evalcond[6]=(gconst1+(((-1.0)*new_r01*x544)));
evalcond[7]=(new_r01+(((-1.0)*gconst1*x544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(IKsign(gconst1),-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x546.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x545.value)))+(x546.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x547=IKcos(j12);
IkReal x548=IKsin(j12);
IkReal x549=(gconst1*x547);
IkReal x550=((1.0)*x548);
evalcond[0]=(new_r01*x547);
evalcond[1]=x549;
evalcond[2]=(gconst1*x548);
evalcond[3]=((-1.0)*new_r00*x548);
evalcond[4]=(((new_r00*x547))+gconst1);
evalcond[5]=(x549+new_r00);
evalcond[6]=(gconst1+(((-1.0)*new_r01*x550)));
evalcond[7]=((((-1.0)*gconst1*x550))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x551=((1.0)*gconst1);
CheckValue<IkReal> x552 = IKatan2WithCheck(IkReal((((gconst1*new_r00))+(((-1.0)*new_r11*x551)))),IkReal(((((-1.0)*new_r10*x551))+(((-1.0)*new_r01*x551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x552.valid){
continue;
}
CheckValue<IkReal> x553=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x553.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x552.value)+(((1.5707963267949)*(x553.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x554=IKcos(j12);
IkReal x555=IKsin(j12);
IkReal x556=(gconst2*x555);
IkReal x557=(gconst1*x554);
IkReal x558=((1.0)*x555);
IkReal x559=(gconst2*x554);
IkReal x560=(x557+x556);
evalcond[0]=(((new_r10*x555))+gconst1+((new_r00*x554)));
evalcond[1]=(((new_r11*x555))+gconst2+((new_r01*x554)));
evalcond[2]=(x560+new_r00);
evalcond[3]=(x560+new_r11);
evalcond[4]=(((new_r11*x554))+gconst1+(((-1.0)*new_r01*x558)));
evalcond[5]=(x559+(((-1.0)*gconst1*x558))+new_r01);
evalcond[6]=((((-1.0)*x559))+((gconst1*x555))+new_r10);
evalcond[7]=(((new_r10*x554))+(((-1.0)*gconst2))+(((-1.0)*new_r00*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x561=((1.0)*gconst2);
CheckValue<IkReal> x562=IKPowWithIntegerCheck(IKsign((((gconst1*new_r11))+(((-1.0)*new_r01*x561)))),-1);
if(!x562.valid){
continue;
}
CheckValue<IkReal> x563 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x561))+((new_r00*new_r01)))),IkReal(((((-1.0)*new_r00*new_r11))+(gconst2*gconst2))),IKFAST_ATAN2_MAGTHRESH);
if(!x563.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x562.value)))+(x563.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x564=IKcos(j12);
IkReal x565=IKsin(j12);
IkReal x566=(gconst2*x565);
IkReal x567=(gconst1*x564);
IkReal x568=((1.0)*x565);
IkReal x569=(gconst2*x564);
IkReal x570=(x566+x567);
evalcond[0]=(gconst1+((new_r00*x564))+((new_r10*x565)));
evalcond[1]=(gconst2+((new_r01*x564))+((new_r11*x565)));
evalcond[2]=(x570+new_r00);
evalcond[3]=(x570+new_r11);
evalcond[4]=(gconst1+((new_r11*x564))+(((-1.0)*new_r01*x568)));
evalcond[5]=((((-1.0)*gconst1*x568))+x569+new_r01);
evalcond[6]=(((gconst1*x565))+(((-1.0)*x569))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x568))+(((-1.0)*gconst2))+((new_r10*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x571=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x571.valid){
continue;
}
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal((((gconst1*new_r01))+(((-1.0)*gconst2*new_r00)))),IkReal((((gconst2*new_r10))+(((-1.0)*gconst1*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x571.value)))+(x572.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x573=IKcos(j12);
IkReal x574=IKsin(j12);
IkReal x575=(gconst2*x574);
IkReal x576=(gconst1*x573);
IkReal x577=((1.0)*x574);
IkReal x578=(gconst2*x573);
IkReal x579=(x575+x576);
evalcond[0]=(((new_r00*x573))+((new_r10*x574))+gconst1);
evalcond[1]=(((new_r11*x574))+((new_r01*x573))+gconst2);
evalcond[2]=(x579+new_r00);
evalcond[3]=(x579+new_r11);
evalcond[4]=(((new_r11*x573))+gconst1+(((-1.0)*new_r01*x577)));
evalcond[5]=(x578+new_r01+(((-1.0)*gconst1*x577)));
evalcond[6]=(((gconst1*x574))+(((-1.0)*x578))+new_r10);
evalcond[7]=(((new_r10*x573))+(((-1.0)*gconst2))+(((-1.0)*new_r00*x577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x582 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x582)==0){
continue;
}
IkReal x580=pow(x582,-0.5);
IkReal x581=((1.0)*x580);
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x583.value))));
IkReal gconst4=(new_r00*x581);
IkReal gconst5=(new_r10*x581);
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x584.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
IkReal x585=((1.0)*(x588.value));
IkReal x586=x580;
IkReal x587=((1.0)*x586);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x585)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x585)));
IkReal gconst4=(new_r00*x587);
IkReal gconst5=(new_r10*x587);
IkReal x589=new_r10*new_r10;
IkReal x590=((1.0)*new_r10);
IkReal x591=(new_r00*new_r11);
IkReal x592=((((-1.0)*new_r01*x590))+x591);
IkReal x593=x580;
IkReal x594=(new_r00*x593);
j12eval[0]=x592;
j12eval[1]=IKsign(x592);
j12eval[2]=((IKabs(((((-1.0)*x591*x593))+((x589*x593)))))+(IKabs((((new_r01*x594))+(((-1.0)*x590*x594))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x598 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x598.valid){
continue;
}
IkReal x595=((1.0)*(x598.value));
IkReal x596=x580;
IkReal x597=((1.0)*x596);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x595)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x595)));
IkReal gconst4=(new_r00*x597);
IkReal gconst5=(new_r10*x597);
IkReal x599=new_r10*new_r10;
IkReal x600=new_r00*new_r00*new_r00;
CheckValue<IkReal> x604=IKPowWithIntegerCheck((x599+(new_r00*new_r00)),-1);
if(!x604.valid){
continue;
}
IkReal x601=x604.value;
IkReal x602=((1.0)*x601);
IkReal x603=(x599*x601);
j12eval[0]=((IKabs(((((-1.0)*new_r00*new_r11*x599*x602))+x603+(((-1.0)*new_r11*x600*x602)))))+(IKabs((((new_r00*new_r01*x603))+(((-1.0)*new_r00*new_r10*x602))+((new_r01*x600*x601))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
CheckValue<IkReal> x608 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x608.valid){
continue;
}
IkReal x605=((1.0)*(x608.value));
IkReal x606=x580;
IkReal x607=((1.0)*x606);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x605)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x605)));
IkReal gconst4=(new_r00*x607);
IkReal gconst5=(new_r10*x607);
IkReal x609=new_r00*new_r00;
IkReal x610=(new_r00*new_r01);
IkReal x611=(((new_r10*new_r11))+x610);
IkReal x612=x580;
IkReal x613=((1.0)*x612);
j12eval[0]=x611;
j12eval[1]=((IKabs(((((-1.0)*new_r00*new_r11*x613))+((x609*x612)))))+(IKabs(((((-1.0)*x610*x613))+(((-1.0)*new_r00*new_r10*x613))))));
j12eval[2]=IKsign(x611);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x614=IKPowWithIntegerCheck(gconst5,-1);
if(!x614.valid){
continue;
}
cj12array[0]=(new_r10*(x614.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x615=IKsin(j12);
IkReal x616=IKcos(j12);
evalcond[0]=(new_r10*x615);
evalcond[1]=(gconst5*x615);
evalcond[2]=((-1.0)*new_r01*x615);
evalcond[3]=(gconst5+((new_r01*x616)));
evalcond[4]=(((gconst5*x616))+new_r01);
evalcond[5]=((((-1.0)*gconst5))+((new_r10*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst4;
evalcond[2]=gconst5;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x618 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x618.valid){
continue;
}
IkReal x617=((1.0)*(x618.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x617)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x617)));
IkReal gconst4=((1.0)*new_r00);
IkReal gconst5=((1.0)*new_r10);
j12eval[0]=-1.0;
j12eval[1]=-1.0;
j12eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
CheckValue<IkReal> x620 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x620.valid){
continue;
}
IkReal x619=((1.0)*(x620.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x619)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x619)));
IkReal gconst4=((1.0)*new_r00);
IkReal gconst5=((1.0)*new_r10);
j12eval[0]=-1.0;
j12eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j12eval[2]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
CheckValue<IkReal> x622 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x622.valid){
continue;
}
IkReal x621=((1.0)*(x622.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x621)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x621)));
IkReal gconst4=((1.0)*new_r00);
IkReal gconst5=((1.0)*new_r10);
j12eval[0]=-1.0;
j12eval[1]=new_r10;
j12eval[2]=1.0;
j12eval[3]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal((gconst4*new_r10)),IkReal(((-1.0)*gconst5*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x623.value)))+(x624.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x625=IKcos(j12);
IkReal x626=IKsin(j12);
IkReal x627=(gconst4*x625);
IkReal x628=(gconst5*x626);
IkReal x629=(gconst5*x625);
IkReal x630=(gconst4*x626);
IkReal x631=(x627+x628);
evalcond[0]=x631;
evalcond[1]=(gconst4+((new_r00*x625))+((new_r10*x626)));
evalcond[2]=(x631+new_r00);
evalcond[3]=(x629+(((-1.0)*x630)));
evalcond[4]=(x630+(((-1.0)*x629))+new_r10);
evalcond[5]=((((-1.0)*new_r00*x626))+(((-1.0)*gconst5))+((new_r10*x625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal((gconst5*new_r00)),IkReal((gconst4*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
CheckValue<IkReal> x633=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst4*gconst4)))+(((-1.0)*(gconst5*gconst5))))),-1);
if(!x633.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x632.value)+(((1.5707963267949)*(x633.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x634=IKcos(j12);
IkReal x635=IKsin(j12);
IkReal x636=(gconst4*x634);
IkReal x637=(gconst5*x635);
IkReal x638=(gconst5*x634);
IkReal x639=(gconst4*x635);
IkReal x640=(x636+x637);
evalcond[0]=x640;
evalcond[1]=(gconst4+((new_r00*x634))+((new_r10*x635)));
evalcond[2]=(x640+new_r00);
evalcond[3]=(x638+(((-1.0)*x639)));
evalcond[4]=(x639+(((-1.0)*x638))+new_r10);
evalcond[5]=((((-1.0)*gconst5))+(((-1.0)*new_r00*x635))+((new_r10*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*new_r00))+(((-1.0)*gconst5*new_r10)))),-1);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal((gconst4*gconst5)),IkReal(gconst4*gconst4),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x641.value)))+(x642.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x643=IKcos(j12);
IkReal x644=IKsin(j12);
IkReal x645=(gconst4*x643);
IkReal x646=(gconst5*x644);
IkReal x647=(gconst5*x643);
IkReal x648=(gconst4*x644);
IkReal x649=(x646+x645);
evalcond[0]=x649;
evalcond[1]=(gconst4+((new_r10*x644))+((new_r00*x643)));
evalcond[2]=(x649+new_r00);
evalcond[3]=((((-1.0)*x648))+x647);
evalcond[4]=((((-1.0)*x647))+x648+new_r10);
evalcond[5]=((((-1.0)*new_r00*x644))+(((-1.0)*gconst5))+((new_r10*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x651 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x651.valid){
continue;
}
IkReal x650=((1.0)*(x651.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x650)));
new_r01=0;
new_r10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x650)));
IkReal x652 = new_r00*new_r00;
if(IKabs(x652)==0){
continue;
}
IkReal gconst4=((1.0)*new_r00*(pow(x652,-0.5)));
IkReal gconst5=0;
j12eval[0]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
IkReal x653=((1.0)*(x654.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x653)));
new_r01=0;
new_r10=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x653)));
IkReal x655 = new_r00*new_r00;
if(IKabs(x655)==0){
continue;
}
IkReal gconst4=((1.0)*new_r00*(pow(x655,-0.5)));
IkReal gconst5=0;
j12eval[0]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x656=IKPowWithIntegerCheck(gconst4,-1);
if(!x656.valid){
continue;
}
cj12array[0]=((-1.0)*new_r00*(x656.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x657=IKsin(j12);
IkReal x658=IKcos(j12);
IkReal x659=((-1.0)*x657);
evalcond[0]=(new_r11*x657);
evalcond[1]=(new_r00*x659);
evalcond[2]=(gconst4*x659);
evalcond[3]=(gconst4+((new_r11*x658)));
evalcond[4]=(gconst4+((new_r00*x658)));
evalcond[5]=(((gconst4*x658))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(new_r00,-1);
if(!x660.valid){
continue;
}
cj12array[0]=((-1.0)*gconst4*(x660.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x661=IKsin(j12);
IkReal x662=IKcos(j12);
IkReal x663=(gconst4*x662);
IkReal x664=((-1.0)*x661);
evalcond[0]=(new_r11*x661);
evalcond[1]=(new_r00*x664);
evalcond[2]=(gconst4*x664);
evalcond[3]=(gconst4+((new_r11*x662)));
evalcond[4]=(x663+new_r00);
evalcond[5]=(x663+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x665=IKPowWithIntegerCheck(new_r11,-1);
if(!x665.valid){
continue;
}
cj12array[0]=((-1.0)*gconst4*(x665.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x666=IKsin(j12);
IkReal x667=IKcos(j12);
IkReal x668=(gconst4*x667);
IkReal x669=((-1.0)*x666);
evalcond[0]=(new_r11*x666);
evalcond[1]=(new_r00*x669);
evalcond[2]=(gconst4*x669);
evalcond[3]=(gconst4+((new_r00*x667)));
evalcond[4]=(x668+new_r00);
evalcond[5]=(x668+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x671 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x671.valid){
continue;
}
IkReal x670=((1.0)*(x671.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x670)));
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x670)));
IkReal gconst4=0;
IkReal x672 = new_r10*new_r10;
if(IKabs(x672)==0){
continue;
}
IkReal gconst5=((1.0)*new_r10*(pow(x672,-0.5)));
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x674 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x674.valid){
continue;
}
IkReal x673=((1.0)*(x674.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x673)));
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x673)));
IkReal gconst4=0;
IkReal x675 = new_r10*new_r10;
if(IKabs(x675)==0){
continue;
}
IkReal gconst5=((1.0)*new_r10*(pow(x675,-0.5)));
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((1.0)*(x677.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x676)));
new_r00=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x676)));
IkReal gconst4=0;
IkReal x678 = new_r10*new_r10;
if(IKabs(x678)==0){
continue;
}
IkReal gconst5=((1.0)*new_r10*(pow(x678,-0.5)));
j12eval[0]=new_r10;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x679=IKPowWithIntegerCheck(gconst5,-1);
if(!x679.valid){
continue;
}
CheckValue<IkReal> x680=IKPowWithIntegerCheck(new_r10,-1);
if(!x680.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst5*(x680.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x679.value)))+IKsqr((gconst5*(x680.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r11*(x679.value)), (gconst5*(x680.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x681=IKsin(j12);
IkReal x682=IKcos(j12);
IkReal x683=(gconst5*x681);
IkReal x684=(gconst5*x682);
evalcond[0]=(new_r10*x681);
evalcond[1]=x683;
evalcond[2]=(x683+new_r11);
evalcond[3]=(x684+new_r01);
evalcond[4]=(new_r10+(((-1.0)*x684)));
evalcond[5]=((((-1.0)*gconst5))+((new_r10*x682)));
evalcond[6]=((((-1.0)*new_r01*x681))+((new_r11*x682)));
evalcond[7]=(gconst5+((new_r01*x682))+((new_r11*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x685 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x685.valid){
continue;
}
CheckValue<IkReal> x686=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x686.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x685.value)+(((1.5707963267949)*(x686.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x687=IKsin(j12);
IkReal x688=IKcos(j12);
IkReal x689=(gconst5*x687);
IkReal x690=(gconst5*x688);
evalcond[0]=(new_r10*x687);
evalcond[1]=x689;
evalcond[2]=(x689+new_r11);
evalcond[3]=(x690+new_r01);
evalcond[4]=(new_r10+(((-1.0)*x690)));
evalcond[5]=((((-1.0)*gconst5))+((new_r10*x688)));
evalcond[6]=((((-1.0)*new_r01*x687))+((new_r11*x688)));
evalcond[7]=(gconst5+((new_r01*x688))+((new_r11*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x692.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x691.value)+(((1.5707963267949)*(x692.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x693=IKsin(j12);
IkReal x694=IKcos(j12);
IkReal x695=(gconst5*x693);
IkReal x696=(gconst5*x694);
evalcond[0]=(new_r10*x693);
evalcond[1]=x695;
evalcond[2]=(x695+new_r11);
evalcond[3]=(x696+new_r01);
evalcond[4]=(new_r10+(((-1.0)*x696)));
evalcond[5]=(((new_r10*x694))+(((-1.0)*gconst5)));
evalcond[6]=(((new_r11*x694))+(((-1.0)*new_r01*x693)));
evalcond[7]=(gconst5+((new_r11*x693))+((new_r01*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x698 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x698.valid){
continue;
}
IkReal x697=((1.0)*(x698.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x697)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x697)));
IkReal x699 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x699)==0){
continue;
}
IkReal gconst4=((1.0)*new_r00*(pow(x699,-0.5)));
IkReal gconst5=0;
j12eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
CheckValue<IkReal> x701 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x701.valid){
continue;
}
IkReal x700=((1.0)*(x701.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x700)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x700)));
IkReal x702 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x702)==0){
continue;
}
IkReal gconst4=((1.0)*new_r00*(pow(x702,-0.5)));
IkReal gconst5=0;
j12eval[0]=new_r01;
j12eval[1]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x703=((1.0)*(x704.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst4;
cj14=gconst5;
j14=((3.14159265)+(((-1.0)*x703)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x703)));
IkReal x705 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x705)==0){
continue;
}
IkReal gconst4=((1.0)*new_r00*(pow(x705,-0.5)));
IkReal gconst5=0;
j12eval[0]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x706=IKPowWithIntegerCheck(gconst4,-1);
if(!x706.valid){
continue;
}
CheckValue<IkReal> x707=IKPowWithIntegerCheck(new_r00,-1);
if(!x707.valid){
continue;
}
if( IKabs((new_r01*(x706.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst4*(x707.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x706.value)))+IKsqr(((-1.0)*gconst4*(x707.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((new_r01*(x706.value)), ((-1.0)*gconst4*(x707.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x708=IKcos(j12);
IkReal x709=IKsin(j12);
IkReal x710=(gconst4*x708);
IkReal x711=(gconst4*x709);
evalcond[0]=(new_r01*x708);
evalcond[1]=x710;
evalcond[2]=x711;
evalcond[3]=((-1.0)*new_r00*x709);
evalcond[4]=(((new_r00*x708))+gconst4);
evalcond[5]=(x710+new_r00);
evalcond[6]=((((-1.0)*new_r01*x709))+gconst4);
evalcond[7]=((((-1.0)*x711))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x712=IKPowWithIntegerCheck(new_r01,-1);
if(!x712.valid){
continue;
}
CheckValue<IkReal> x713=IKPowWithIntegerCheck(new_r00,-1);
if(!x713.valid){
continue;
}
if( IKabs((gconst4*(x712.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst4*(x713.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst4*(x712.value)))+IKsqr(((-1.0)*gconst4*(x713.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((gconst4*(x712.value)), ((-1.0)*gconst4*(x713.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x714=IKcos(j12);
IkReal x715=IKsin(j12);
IkReal x716=(gconst4*x714);
IkReal x717=(gconst4*x715);
evalcond[0]=(new_r01*x714);
evalcond[1]=x716;
evalcond[2]=x717;
evalcond[3]=((-1.0)*new_r00*x715);
evalcond[4]=(((new_r00*x714))+gconst4);
evalcond[5]=(x716+new_r00);
evalcond[6]=(gconst4+(((-1.0)*new_r01*x715)));
evalcond[7]=((((-1.0)*x717))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign(gconst4),-1);
if(!x719.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x718.value)+(((1.5707963267949)*(x719.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x720=IKcos(j12);
IkReal x721=IKsin(j12);
IkReal x722=(gconst4*x720);
IkReal x723=(gconst4*x721);
evalcond[0]=(new_r01*x720);
evalcond[1]=x722;
evalcond[2]=x723;
evalcond[3]=((-1.0)*new_r00*x721);
evalcond[4]=(gconst4+((new_r00*x720)));
evalcond[5]=(x722+new_r00);
evalcond[6]=(gconst4+(((-1.0)*new_r01*x721)));
evalcond[7]=((((-1.0)*x723))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x724=((1.0)*gconst4);
CheckValue<IkReal> x725 = IKatan2WithCheck(IkReal((((gconst4*new_r00))+(((-1.0)*new_r11*x724)))),IkReal(((((-1.0)*new_r01*x724))+(((-1.0)*new_r10*x724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x725.valid){
continue;
}
CheckValue<IkReal> x726=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x726.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x725.value)+(((1.5707963267949)*(x726.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x727=IKcos(j12);
IkReal x728=IKsin(j12);
IkReal x729=(gconst4*x727);
IkReal x730=(gconst5*x728);
IkReal x731=(gconst5*x727);
IkReal x732=(gconst4*x728);
IkReal x733=((1.0)*x728);
IkReal x734=(x730+x729);
evalcond[0]=(gconst4+((new_r00*x727))+((new_r10*x728)));
evalcond[1]=(gconst5+((new_r01*x727))+((new_r11*x728)));
evalcond[2]=(x734+new_r00);
evalcond[3]=(x734+new_r11);
evalcond[4]=(gconst4+(((-1.0)*new_r01*x733))+((new_r11*x727)));
evalcond[5]=((((-1.0)*x732))+x731+new_r01);
evalcond[6]=((((-1.0)*x731))+x732+new_r10);
evalcond[7]=((((-1.0)*gconst5))+(((-1.0)*new_r00*x733))+((new_r10*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x735=((1.0)*gconst5);
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+(((-1.0)*gconst4*x735)))),IkReal(((gconst5*gconst5)+(((-1.0)*new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
CheckValue<IkReal> x737=IKPowWithIntegerCheck(IKsign((((gconst4*new_r11))+(((-1.0)*new_r01*x735)))),-1);
if(!x737.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x736.value)+(((1.5707963267949)*(x737.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x738=IKcos(j12);
IkReal x739=IKsin(j12);
IkReal x740=(gconst4*x738);
IkReal x741=(gconst5*x739);
IkReal x742=(gconst5*x738);
IkReal x743=(gconst4*x739);
IkReal x744=((1.0)*x739);
IkReal x745=(x740+x741);
evalcond[0]=(gconst4+((new_r00*x738))+((new_r10*x739)));
evalcond[1]=(gconst5+((new_r01*x738))+((new_r11*x739)));
evalcond[2]=(x745+new_r00);
evalcond[3]=(x745+new_r11);
evalcond[4]=((((-1.0)*new_r01*x744))+gconst4+((new_r11*x738)));
evalcond[5]=((((-1.0)*x743))+x742+new_r01);
evalcond[6]=((((-1.0)*x742))+x743+new_r10);
evalcond[7]=((((-1.0)*new_r00*x744))+(((-1.0)*gconst5))+((new_r10*x738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal((((gconst4*new_r01))+(((-1.0)*gconst5*new_r00)))),IkReal((((gconst5*new_r10))+(((-1.0)*gconst4*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
CheckValue<IkReal> x747=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x747.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x746.value)+(((1.5707963267949)*(x747.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x748=IKcos(j12);
IkReal x749=IKsin(j12);
IkReal x750=(gconst4*x748);
IkReal x751=(gconst5*x749);
IkReal x752=(gconst5*x748);
IkReal x753=(gconst4*x749);
IkReal x754=((1.0)*x749);
IkReal x755=(x751+x750);
evalcond[0]=(gconst4+((new_r10*x749))+((new_r00*x748)));
evalcond[1]=(gconst5+((new_r01*x748))+((new_r11*x749)));
evalcond[2]=(x755+new_r00);
evalcond[3]=(x755+new_r11);
evalcond[4]=((((-1.0)*new_r01*x754))+gconst4+((new_r11*x748)));
evalcond[5]=((((-1.0)*x753))+x752+new_r01);
evalcond[6]=((((-1.0)*x752))+x753+new_r10);
evalcond[7]=((((-1.0)*new_r00*x754))+(((-1.0)*gconst5))+((new_r10*x748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x756=((-1.0)*new_r11);
IkReal x758 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x758)==0){
continue;
}
IkReal x757=pow(x758,-0.5);
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(new_r01),IkReal(x756),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal gconst6=((-1.0)*(x759.value));
IkReal gconst7=((-1.0)*new_r01*x757);
IkReal gconst8=(x756*x757);
CheckValue<IkReal> x760 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x760.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x761=((-1.0)*new_r11);
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(new_r01),IkReal(x761),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
IkReal x762=((-1.0)*(x764.value));
IkReal x763=x757;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x762;
IkReal gconst6=x762;
IkReal gconst7=((-1.0)*new_r01*x763);
IkReal gconst8=(x761*x763);
IkReal x765=new_r01*new_r01;
IkReal x766=((1.0)*new_r10);
IkReal x767=(((new_r00*new_r11))+(((-1.0)*new_r01*x766)));
IkReal x768=x757;
IkReal x769=(new_r11*x768);
j12eval[0]=x767;
j12eval[1]=((IKabs(((((-1.0)*x766*x769))+((new_r01*x769)))))+(IKabs((((new_r00*x769))+(((-1.0)*x765*x768))))));
j12eval[2]=IKsign(x767);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x770=((-1.0)*new_r11);
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(new_r01),IkReal(x770),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
IkReal x771=((-1.0)*(x773.value));
IkReal x772=x757;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x771;
IkReal gconst6=x771;
IkReal gconst7=((-1.0)*new_r01*x772);
IkReal gconst8=(x770*x772);
IkReal x774=new_r01*new_r01;
IkReal x775=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x776=x757;
IkReal x777=(new_r01*x776);
j12eval[0]=x775;
j12eval[1]=((IKabs((((x774*x776))+((new_r10*x777)))))+(IKabs(((((-1.0)*new_r00*x777))+((new_r11*x777))))));
j12eval[2]=IKsign(x775);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x778=((-1.0)*new_r11);
CheckValue<IkReal> x781 = IKatan2WithCheck(IkReal(new_r01),IkReal(x778),IKFAST_ATAN2_MAGTHRESH);
if(!x781.valid){
continue;
}
IkReal x779=((-1.0)*(x781.value));
IkReal x780=x757;
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x779;
IkReal gconst6=x779;
IkReal gconst7=((-1.0)*new_r01*x780);
IkReal gconst8=(x778*x780);
IkReal x782=new_r01*new_r01;
CheckValue<IkReal> x784=IKPowWithIntegerCheck(((new_r11*new_r11)+x782),-1);
if(!x784.valid){
continue;
}
IkReal x783=x784.value;
j12eval[0]=((IKabs(((((-1.0)*x782*x783))+(new_r00*new_r00))))+(IKabs(((((-1.0)*new_r00*new_r10))+((new_r01*new_r11*x783))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x785=((-1.0)*new_r11);
CheckValue<IkReal> x787 = IKatan2WithCheck(IkReal(new_r01),IkReal(x785),IKFAST_ATAN2_MAGTHRESH);
if(!x787.valid){
continue;
}
IkReal x786=((-1.0)*(x787.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x786;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x786;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=x785;
j12eval[0]=-1.0;
j12eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j12eval[2]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x788=((-1.0)*new_r11);
CheckValue<IkReal> x790 = IKatan2WithCheck(IkReal(new_r01),IkReal(x788),IKFAST_ATAN2_MAGTHRESH);
if(!x790.valid){
continue;
}
IkReal x789=((-1.0)*(x790.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x789;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x789;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=x788;
j12eval[0]=1.0;
j12eval[1]=1.0;
j12eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x791=((-1.0)*new_r11);
CheckValue<IkReal> x793 = IKatan2WithCheck(IkReal(new_r01),IkReal(x791),IKFAST_ATAN2_MAGTHRESH);
if(!x793.valid){
continue;
}
IkReal x792=((-1.0)*(x793.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x792;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x792;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=x791;
j12eval[0]=1.0;
j12eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j12eval[2]=1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x794=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*new_r11)))),-1);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(gconst8*gconst8),IkReal((gconst7*gconst8)),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x794.value)))+(x795.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x796=IKcos(j12);
IkReal x797=IKsin(j12);
IkReal x798=(gconst7*x796);
IkReal x799=(gconst8*x797);
IkReal x800=(gconst8*x796);
IkReal x801=((1.0)*x797);
IkReal x802=(x799+x798);
evalcond[0]=x802;
evalcond[1]=(((new_r11*x797))+gconst8+((new_r01*x796)));
evalcond[2]=(new_r11+x802);
evalcond[3]=((((-1.0)*x800))+((gconst7*x797)));
evalcond[4]=((((-1.0)*new_r01*x801))+((new_r11*x796))+gconst7);
evalcond[5]=((((-1.0)*gconst7*x801))+new_r01+x800);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x803=IKPowWithIntegerCheck(IKsign(((gconst7*gconst7)+(gconst8*gconst8))),-1);
if(!x803.valid){
continue;
}
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal((gconst7*new_r01)),IkReal(((-1.0)*gconst8*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x803.value)))+(x804.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x805=IKcos(j12);
IkReal x806=IKsin(j12);
IkReal x807=(gconst7*x805);
IkReal x808=(gconst8*x806);
IkReal x809=(gconst8*x805);
IkReal x810=((1.0)*x806);
IkReal x811=(x808+x807);
evalcond[0]=x811;
evalcond[1]=(gconst8+((new_r11*x806))+((new_r01*x805)));
evalcond[2]=(new_r11+x811);
evalcond[3]=((((-1.0)*x809))+((gconst7*x806)));
evalcond[4]=(gconst7+(((-1.0)*new_r01*x810))+((new_r11*x805)));
evalcond[5]=((((-1.0)*gconst7*x810))+new_r01+x809);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign((((gconst8*new_r11))+((gconst7*new_r01)))),-1);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal(gconst7*gconst7),IkReal(((-1.0)*gconst7*gconst8)),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x812.value)))+(x813.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x814=IKcos(j12);
IkReal x815=IKsin(j12);
IkReal x816=(gconst7*x814);
IkReal x817=(gconst8*x815);
IkReal x818=(gconst8*x814);
IkReal x819=((1.0)*x815);
IkReal x820=(x816+x817);
evalcond[0]=x820;
evalcond[1]=(((new_r11*x815))+((new_r01*x814))+gconst8);
evalcond[2]=(new_r11+x820);
evalcond[3]=((((-1.0)*x818))+((gconst7*x815)));
evalcond[4]=(((new_r11*x814))+gconst7+(((-1.0)*new_r01*x819)));
evalcond[5]=((((-1.0)*gconst7*x819))+new_r01+x818);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x821=((-1.0)*new_r11);
CheckValue<IkReal> x823 = IKatan2WithCheck(IkReal(0),IkReal(x821),IKFAST_ATAN2_MAGTHRESH);
if(!x823.valid){
continue;
}
IkReal x822=((-1.0)*(x823.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x822;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x822;
IkReal gconst7=0;
IkReal x824 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x824)==0){
continue;
}
IkReal gconst8=(x821*(pow(x824,-0.5)));
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x825=((-1.0)*new_r11);
CheckValue<IkReal> x827 = IKatan2WithCheck(IkReal(0),IkReal(x825),IKFAST_ATAN2_MAGTHRESH);
if(!x827.valid){
continue;
}
IkReal x826=((-1.0)*(x827.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x826;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x826;
IkReal gconst7=0;
IkReal x828 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x828)==0){
continue;
}
IkReal gconst8=(x825*(pow(x828,-0.5)));
j12eval[0]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
IkReal x829=((-1.0)*new_r11);
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(0),IkReal(x829),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
IkReal x830=((-1.0)*(x831.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x830;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x830;
IkReal gconst7=0;
IkReal x832 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x832)==0){
continue;
}
IkReal gconst8=(x829*(pow(x832,-0.5)));
j12eval[0]=new_r11;
j12eval[1]=new_r10;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x833=IKPowWithIntegerCheck(new_r11,-1);
if(!x833.valid){
continue;
}
CheckValue<IkReal> x834=IKPowWithIntegerCheck(new_r10,-1);
if(!x834.valid){
continue;
}
if( IKabs(((-1.0)*gconst8*(x833.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst8*(x834.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst8*(x833.value)))+IKsqr((gconst8*(x834.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*gconst8*(x833.value)), (gconst8*(x834.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x835=IKsin(j12);
IkReal x836=IKcos(j12);
IkReal x837=(gconst8*x835);
IkReal x838=(gconst8*x836);
evalcond[0]=(new_r11*x836);
evalcond[1]=(new_r10*x835);
evalcond[2]=x837;
evalcond[3]=x838;
evalcond[4]=(((new_r11*x835))+gconst8);
evalcond[5]=(new_r11+x837);
evalcond[6]=((((-1.0)*x838))+new_r10);
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x839=IKPowWithIntegerCheck(new_r11,-1);
if(!x839.valid){
continue;
}
CheckValue<IkReal> x840=IKPowWithIntegerCheck(gconst8,-1);
if(!x840.valid){
continue;
}
if( IKabs(((-1.0)*gconst8*(x839.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x840.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst8*(x839.value)))+IKsqr((new_r10*(x840.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*gconst8*(x839.value)), (new_r10*(x840.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x841=IKsin(j12);
IkReal x842=IKcos(j12);
IkReal x843=(gconst8*x841);
IkReal x844=(gconst8*x842);
evalcond[0]=(new_r11*x842);
evalcond[1]=(new_r10*x841);
evalcond[2]=x843;
evalcond[3]=x844;
evalcond[4]=(gconst8+((new_r11*x841)));
evalcond[5]=(new_r11+x843);
evalcond[6]=((((-1.0)*x844))+new_r10);
evalcond[7]=(((new_r10*x842))+(((-1.0)*gconst8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x845=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x845.valid){
continue;
}
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x845.value)))+(x846.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x847=IKsin(j12);
IkReal x848=IKcos(j12);
IkReal x849=(gconst8*x847);
IkReal x850=(gconst8*x848);
evalcond[0]=(new_r11*x848);
evalcond[1]=(new_r10*x847);
evalcond[2]=x849;
evalcond[3]=x850;
evalcond[4]=(gconst8+((new_r11*x847)));
evalcond[5]=(new_r11+x849);
evalcond[6]=((((-1.0)*x850))+new_r10);
evalcond[7]=(((new_r10*x848))+(((-1.0)*gconst8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
IkReal x851=((-1.0)*(x852.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x851;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst6=x851;
IkReal x853 = new_r01*new_r01;
if(IKabs(x853)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x853,-0.5)));
IkReal gconst8=0;
j12eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
CheckValue<IkReal> x855 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x855.valid){
continue;
}
IkReal x854=((-1.0)*(x855.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x854;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst6=x854;
IkReal x856 = new_r01*new_r01;
if(IKabs(x856)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x856,-0.5)));
IkReal gconst8=0;
j12eval[0]=new_r01;
j12eval[1]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
IkReal x857=((-1.0)*(x858.value));
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst7;
cj14=gconst8;
j14=x857;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst6=x857;
IkReal x859 = new_r01*new_r01;
if(IKabs(x859)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x859,-0.5)));
IkReal gconst8=0;
j12eval[0]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x860=IKPowWithIntegerCheck(gconst7,-1);
if(!x860.valid){
continue;
}
CheckValue<IkReal> x861=IKPowWithIntegerCheck(new_r00,-1);
if(!x861.valid){
continue;
}
if( IKabs((new_r01*(x860.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst7*(x861.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x860.value)))+IKsqr(((-1.0)*gconst7*(x861.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((new_r01*(x860.value)), ((-1.0)*gconst7*(x861.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x862=IKcos(j12);
IkReal x863=IKsin(j12);
IkReal x864=(gconst7*x862);
IkReal x865=((1.0)*x863);
evalcond[0]=(new_r01*x862);
evalcond[1]=x864;
evalcond[2]=(gconst7*x863);
evalcond[3]=((-1.0)*new_r00*x863);
evalcond[4]=(((new_r00*x862))+gconst7);
evalcond[5]=(new_r00+x864);
evalcond[6]=(gconst7+(((-1.0)*new_r01*x865)));
evalcond[7]=((((-1.0)*gconst7*x865))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x866=IKPowWithIntegerCheck(new_r01,-1);
if(!x866.valid){
continue;
}
CheckValue<IkReal> x867=IKPowWithIntegerCheck(new_r00,-1);
if(!x867.valid){
continue;
}
if( IKabs((gconst7*(x866.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst7*(x867.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst7*(x866.value)))+IKsqr(((-1.0)*gconst7*(x867.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((gconst7*(x866.value)), ((-1.0)*gconst7*(x867.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x868=IKcos(j12);
IkReal x869=IKsin(j12);
IkReal x870=(gconst7*x868);
IkReal x871=((1.0)*x869);
evalcond[0]=(new_r01*x868);
evalcond[1]=x870;
evalcond[2]=(gconst7*x869);
evalcond[3]=((-1.0)*new_r00*x869);
evalcond[4]=(((new_r00*x868))+gconst7);
evalcond[5]=(new_r00+x870);
evalcond[6]=(gconst7+(((-1.0)*new_r01*x871)));
evalcond[7]=((((-1.0)*gconst7*x871))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(gconst7),-1);
if(!x872.valid){
continue;
}
CheckValue<IkReal> x873 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x873.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x872.value)))+(x873.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x874=IKcos(j12);
IkReal x875=IKsin(j12);
IkReal x876=(gconst7*x874);
IkReal x877=((1.0)*x875);
evalcond[0]=(new_r01*x874);
evalcond[1]=x876;
evalcond[2]=(gconst7*x875);
evalcond[3]=((-1.0)*new_r00*x875);
evalcond[4]=(((new_r00*x874))+gconst7);
evalcond[5]=(new_r00+x876);
evalcond[6]=(gconst7+(((-1.0)*new_r01*x877)));
evalcond[7]=((((-1.0)*gconst7*x877))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x878=((1.0)*new_r00);
CheckValue<IkReal> x879=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x878))+((gconst7*new_r10)))),-1);
if(!x879.valid){
continue;
}
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r10*x878))+((gconst7*gconst8)))),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x879.value)))+(x880.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x881=IKcos(j12);
IkReal x882=IKsin(j12);
IkReal x883=((1.0)*gconst8);
IkReal x884=(gconst7*x881);
IkReal x885=(gconst8*x882);
IkReal x886=((1.0)*x882);
IkReal x887=(x885+x884);
evalcond[0]=(((new_r10*x882))+((new_r00*x881))+gconst7);
evalcond[1]=(((new_r01*x881))+((new_r11*x882))+gconst8);
evalcond[2]=(new_r00+x887);
evalcond[3]=(new_r11+x887);
evalcond[4]=(((new_r11*x881))+gconst7+(((-1.0)*new_r01*x886)));
evalcond[5]=((((-1.0)*gconst7*x886))+new_r01+((gconst8*x881)));
evalcond[6]=((((-1.0)*x881*x883))+((gconst7*x882))+new_r10);
evalcond[7]=(((new_r10*x881))+(((-1.0)*x883))+(((-1.0)*new_r00*x886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x888=((1.0)*gconst7);
CheckValue<IkReal> x889=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x889.valid){
continue;
}
CheckValue<IkReal> x890 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x888))+((gconst7*new_r00)))),IkReal(((((-1.0)*new_r10*x888))+(((-1.0)*new_r01*x888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x890.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x889.value)))+(x890.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x891=IKcos(j12);
IkReal x892=IKsin(j12);
IkReal x893=((1.0)*gconst8);
IkReal x894=(gconst7*x891);
IkReal x895=(gconst8*x892);
IkReal x896=((1.0)*x892);
IkReal x897=(x894+x895);
evalcond[0]=(((new_r00*x891))+((new_r10*x892))+gconst7);
evalcond[1]=(((new_r11*x892))+((new_r01*x891))+gconst8);
evalcond[2]=(new_r00+x897);
evalcond[3]=(new_r11+x897);
evalcond[4]=(((new_r11*x891))+gconst7+(((-1.0)*new_r01*x896)));
evalcond[5]=((((-1.0)*gconst7*x896))+new_r01+((gconst8*x891)));
evalcond[6]=(((gconst7*x892))+new_r10+(((-1.0)*x891*x893)));
evalcond[7]=(((new_r10*x891))+(((-1.0)*x893))+(((-1.0)*new_r00*x896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x898=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x898.valid){
continue;
}
CheckValue<IkReal> x899 = IKatan2WithCheck(IkReal((((gconst7*new_r01))+(((-1.0)*gconst8*new_r00)))),IkReal((((gconst8*new_r10))+(((-1.0)*gconst7*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x899.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x898.value)))+(x899.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x900=IKcos(j12);
IkReal x901=IKsin(j12);
IkReal x902=((1.0)*gconst8);
IkReal x903=(gconst7*x900);
IkReal x904=(gconst8*x901);
IkReal x905=((1.0)*x901);
IkReal x906=(x904+x903);
evalcond[0]=(gconst7+((new_r10*x901))+((new_r00*x900)));
evalcond[1]=(gconst8+((new_r11*x901))+((new_r01*x900)));
evalcond[2]=(new_r00+x906);
evalcond[3]=(new_r11+x906);
evalcond[4]=(gconst7+((new_r11*x900))+(((-1.0)*new_r01*x905)));
evalcond[5]=((((-1.0)*gconst7*x905))+new_r01+((gconst8*x900)));
evalcond[6]=((((-1.0)*x900*x902))+((gconst7*x901))+new_r10);
evalcond[7]=((((-1.0)*x902))+((new_r10*x900))+(((-1.0)*new_r00*x905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x909 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x909)==0){
continue;
}
IkReal x907=pow(x909,-0.5);
IkReal x908=((1.0)*x907);
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x910.value))));
IkReal gconst10=(new_r01*x908);
IkReal gconst11=(new_r11*x908);
CheckValue<IkReal> x911 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x911.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x911.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x915 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x915.valid){
continue;
}
IkReal x912=((1.0)*(x915.value));
IkReal x913=x907;
IkReal x914=((1.0)*x913);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst10;
cj14=gconst11;
j14=((3.14159265)+(((-1.0)*x912)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x912)));
IkReal gconst10=(new_r01*x914);
IkReal gconst11=(new_r11*x914);
IkReal x916=new_r01*new_r01;
IkReal x917=((1.0)*new_r01);
IkReal x918=(((new_r00*new_r11))+(((-1.0)*new_r10*x917)));
IkReal x919=x907;
IkReal x920=(new_r11*x919);
j12eval[0]=x918;
j12eval[1]=IKsign(x918);
j12eval[2]=((IKabs(((((-1.0)*new_r00*x920))+((x916*x919)))))+(IKabs((((new_r10*x920))+(((-1.0)*x917*x920))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
IkReal x921=((1.0)*(x924.value));
IkReal x922=x907;
IkReal x923=((1.0)*x922);
sj13=1.0;
cj13=0;
j13=1.5707963267949;
sj14=gconst10;
cj14=gconst11;
j14=((3.14159265)+(((-1.0)*x921)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x921)));
IkReal gconst10=(new_r01*x923);
IkReal gconst11=(new_r11*x923);
IkReal x925=new_r01*new_r01;
IkReal x926=(new_r00*new_r01);
IkReal x927=(((new_r10*new_r11))+x926);
IkReal x928=x907;
IkReal x929=((1.0)*new_r01*x928);
j12eval[0]=x927;
j12eval[1]=IKsign(x927);
j12eval[2]=((IKabs(((((-1.0)*new_r11*x929))+((x926*x928)))))+(IKabs(((((-1.0)*x925*x928))+(((-1.0)*new_r10*x929))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x930=((1.0)*new_r00);
CheckValue<IkReal> x931=IKPowWithIntegerCheck(IKsign((((gconst10*new_r10))+(((-1.0)*gconst11*x930)))),-1);
if(!x931.valid){
continue;
}
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst10*gconst10)))+(new_r00*new_r00))),IkReal((((gconst10*gconst11))+(((-1.0)*new_r10*x930)))),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x931.value)))+(x932.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x933=IKcos(j12);
IkReal x934=IKsin(j12);
IkReal x935=(gconst10*x933);
IkReal x936=(gconst11*x934);
IkReal x937=((1.0)*x934);
IkReal x938=(gconst11*x933);
IkReal x939=(x935+x936);
evalcond[0]=(gconst10+((new_r00*x933))+((new_r10*x934)));
evalcond[1]=(gconst11+((new_r01*x933))+((new_r11*x934)));
evalcond[2]=(new_r00+x939);
evalcond[3]=(new_r11+x939);
evalcond[4]=(gconst10+(((-1.0)*new_r01*x937))+((new_r11*x933)));
evalcond[5]=((((-1.0)*gconst10*x937))+new_r01+x938);
evalcond[6]=(((gconst10*x934))+(((-1.0)*x938))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x937))+(((-1.0)*gconst11))+((new_r10*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x940=((1.0)*gconst10);
CheckValue<IkReal> x941 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x940))+((gconst10*new_r00)))),IkReal(((((-1.0)*new_r10*x940))+(((-1.0)*new_r01*x940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x942.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x941.value)+(((1.5707963267949)*(x942.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x943=IKcos(j12);
IkReal x944=IKsin(j12);
IkReal x945=(gconst10*x943);
IkReal x946=(gconst11*x944);
IkReal x947=((1.0)*x944);
IkReal x948=(gconst11*x943);
IkReal x949=(x945+x946);
evalcond[0]=(((new_r00*x943))+gconst10+((new_r10*x944)));
evalcond[1]=(((new_r01*x943))+gconst11+((new_r11*x944)));
evalcond[2]=(new_r00+x949);
evalcond[3]=(new_r11+x949);
evalcond[4]=(gconst10+((new_r11*x943))+(((-1.0)*new_r01*x947)));
evalcond[5]=(new_r01+(((-1.0)*gconst10*x947))+x948);
evalcond[6]=((((-1.0)*x948))+((gconst10*x944))+new_r10);
evalcond[7]=(((new_r10*x943))+(((-1.0)*gconst11))+(((-1.0)*new_r00*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x950=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x950.valid){
continue;
}
CheckValue<IkReal> x951 = IKatan2WithCheck(IkReal((((gconst10*new_r01))+(((-1.0)*gconst11*new_r00)))),IkReal(((((-1.0)*gconst10*new_r11))+((gconst11*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x951.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x950.value)))+(x951.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x952=IKcos(j12);
IkReal x953=IKsin(j12);
IkReal x954=(gconst10*x952);
IkReal x955=(gconst11*x953);
IkReal x956=((1.0)*x953);
IkReal x957=(gconst11*x952);
IkReal x958=(x955+x954);
evalcond[0]=(((new_r10*x953))+((new_r00*x952))+gconst10);
evalcond[1]=(((new_r01*x952))+gconst11+((new_r11*x953)));
evalcond[2]=(new_r00+x958);
evalcond[3]=(new_r11+x958);
evalcond[4]=(gconst10+(((-1.0)*new_r01*x956))+((new_r11*x952)));
evalcond[5]=((((-1.0)*gconst10*x956))+new_r01+x957);
evalcond[6]=((((-1.0)*x957))+((gconst10*x953))+new_r10);
evalcond[7]=(((new_r10*x952))+(((-1.0)*new_r00*x956))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
IkReal x959=x960.value;
j12array[0]=((-1.0)*x959);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x959)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j12))))+((new_r10*(IKcos(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j12eval[0]=new_r01;
j12eval[1]=((IKabs(sj14))+(IKabs(cj14)));
j12eval[2]=IKsign(new_r01);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j12eval[0]=new_r01;
j12eval[1]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j12eval[0]=cj14;
j12eval[1]=new_r00;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x961=IKcos(j12);
IkReal x962=IKsin(j12);
IkReal x963=((1.0)*x962);
evalcond[0]=x961;
evalcond[1]=x962;
evalcond[2]=(new_r01*x961);
evalcond[3]=(new_r00+x961);
evalcond[4]=((-1.0)*new_r00*x962);
evalcond[5]=((1.0)+((new_r00*x961)));
evalcond[6]=(new_r01+(((-1.0)*x963)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x964=IKcos(j12);
IkReal x965=IKsin(j12);
IkReal x966=((-1.0)*x965);
evalcond[0]=(new_r01*x964);
evalcond[1]=((-1.0)*x964);
evalcond[2]=(new_r01+x965);
evalcond[3]=x966;
evalcond[4]=(new_r00*x966);
evalcond[5]=((-1.0)+((new_r00*x964)));
evalcond[6]=((((-1.0)*x964))+new_r00);
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x968=IKPowWithIntegerCheck(new_r00,-1);
if(!x968.valid){
continue;
}
IkReal x967=x968.value;
CheckValue<IkReal> x969=IKPowWithIntegerCheck(cj14,-1);
if(!x969.valid){
continue;
}
if( IKabs((x967*(x969.value)*(((1.0)+(((-1.0)*(cj14*cj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj14*x967)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x967*(x969.value)*(((1.0)+(((-1.0)*(cj14*cj14)))))))+IKsqr(((-1.0)*sj14*x967))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((x967*(x969.value)*(((1.0)+(((-1.0)*(cj14*cj14)))))), ((-1.0)*sj14*x967));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x970=IKcos(j12);
IkReal x971=IKsin(j12);
IkReal x972=(cj14*x971);
IkReal x973=(sj14*x970);
IkReal x974=((1.0)*x971);
IkReal x975=(cj14*x970);
IkReal x976=(x973+x972);
evalcond[0]=(sj14+((new_r00*x970)));
evalcond[1]=(((new_r01*x970))+cj14);
evalcond[2]=((((-1.0)*new_r01*x974))+sj14);
evalcond[3]=((((-1.0)*new_r00*x974))+(((-1.0)*cj14)));
evalcond[4]=x976;
evalcond[5]=(new_r00+x976);
evalcond[6]=(((sj14*x971))+(((-1.0)*x975)));
evalcond[7]=(new_r01+(((-1.0)*sj14*x974))+x975);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x977=IKPowWithIntegerCheck(new_r01,-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978=IKPowWithIntegerCheck(new_r00,-1);
if(!x978.valid){
continue;
}
if( IKabs((sj14*(x977.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj14*(x978.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj14*(x977.value)))+IKsqr(((-1.0)*sj14*(x978.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((sj14*(x977.value)), ((-1.0)*sj14*(x978.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x979=IKcos(j12);
IkReal x980=IKsin(j12);
IkReal x981=(cj14*x980);
IkReal x982=(sj14*x979);
IkReal x983=((1.0)*x980);
IkReal x984=(cj14*x979);
IkReal x985=(x981+x982);
evalcond[0]=(sj14+((new_r00*x979)));
evalcond[1]=(((new_r01*x979))+cj14);
evalcond[2]=((((-1.0)*new_r01*x983))+sj14);
evalcond[3]=((((-1.0)*new_r00*x983))+(((-1.0)*cj14)));
evalcond[4]=x985;
evalcond[5]=(new_r00+x985);
evalcond[6]=((((-1.0)*x984))+((sj14*x980)));
evalcond[7]=(new_r01+x984+(((-1.0)*sj14*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x986=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x986.valid){
continue;
}
CheckValue<IkReal> x987 = IKatan2WithCheck(IkReal(sj14),IkReal(((-1.0)*cj14)),IKFAST_ATAN2_MAGTHRESH);
if(!x987.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x986.value)))+(x987.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x988=IKcos(j12);
IkReal x989=IKsin(j12);
IkReal x990=(cj14*x989);
IkReal x991=(sj14*x988);
IkReal x992=((1.0)*x989);
IkReal x993=(cj14*x988);
IkReal x994=(x991+x990);
evalcond[0]=(((new_r00*x988))+sj14);
evalcond[1]=(cj14+((new_r01*x988)));
evalcond[2]=((((-1.0)*new_r01*x992))+sj14);
evalcond[3]=((((-1.0)*new_r00*x992))+(((-1.0)*cj14)));
evalcond[4]=x994;
evalcond[5]=(new_r00+x994);
evalcond[6]=((((-1.0)*x993))+((sj14*x989)));
evalcond[7]=((((-1.0)*sj14*x992))+new_r01+x993);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j12eval[0]=new_r10;
j12eval[1]=((IKabs(sj14))+(IKabs(cj14)));
j12eval[2]=IKsign(new_r10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j12eval[0]=new_r11;
j12eval[1]=IKsign(new_r11);
j12eval[2]=((IKabs(sj14))+(IKabs(cj14)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j12eval[0]=new_r10;
j12eval[1]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x995=((-1.0)*sj14);
CheckValue<IkReal> x996=IKPowWithIntegerCheck(new_r10,-1);
if(!x996.valid){
continue;
}
CheckValue<IkReal> x997=IKPowWithIntegerCheck(new_r11,-1);
if(!x997.valid){
continue;
}
if( IKabs((x995*(x996.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x995*(x997.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x995*(x996.value)))+IKsqr((x995*(x997.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((x995*(x996.value)), (x995*(x997.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x998=IKsin(j12);
IkReal x999=IKcos(j12);
IkReal x1000=(cj14*x998);
IkReal x1001=(sj14*x999);
IkReal x1002=(cj14*x999);
IkReal x1003=(sj14*x998);
IkReal x1004=(x1001+x1000);
evalcond[0]=(((new_r11*x999))+sj14);
evalcond[1]=(((new_r10*x998))+sj14);
evalcond[2]=(((new_r11*x998))+cj14);
evalcond[3]=(((new_r10*x999))+(((-1.0)*cj14)));
evalcond[4]=x1004;
evalcond[5]=(x1004+new_r11);
evalcond[6]=((((-1.0)*x1003))+x1002);
evalcond[7]=((((-1.0)*x1002))+x1003+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1005.valid){
continue;
}
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(((-1.0)*cj14)),IkReal(((-1.0)*sj14)),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1005.value)))+(x1006.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1007=IKsin(j12);
IkReal x1008=IKcos(j12);
IkReal x1009=(cj14*x1007);
IkReal x1010=(sj14*x1008);
IkReal x1011=(cj14*x1008);
IkReal x1012=(sj14*x1007);
IkReal x1013=(x1010+x1009);
evalcond[0]=(((new_r11*x1008))+sj14);
evalcond[1]=(((new_r10*x1007))+sj14);
evalcond[2]=(((new_r11*x1007))+cj14);
evalcond[3]=(((new_r10*x1008))+(((-1.0)*cj14)));
evalcond[4]=x1013;
evalcond[5]=(x1013+new_r11);
evalcond[6]=(x1011+(((-1.0)*x1012)));
evalcond[7]=(x1012+new_r10+(((-1.0)*x1011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1014=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1014.valid){
continue;
}
CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal(((-1.0)*sj14)),IkReal(cj14),IKFAST_ATAN2_MAGTHRESH);
if(!x1015.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1014.value)))+(x1015.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1016=IKsin(j12);
IkReal x1017=IKcos(j12);
IkReal x1018=(cj14*x1016);
IkReal x1019=(sj14*x1017);
IkReal x1020=(cj14*x1017);
IkReal x1021=(sj14*x1016);
IkReal x1022=(x1018+x1019);
evalcond[0]=(((new_r11*x1017))+sj14);
evalcond[1]=(((new_r10*x1016))+sj14);
evalcond[2]=(((new_r11*x1016))+cj14);
evalcond[3]=(((new_r10*x1017))+(((-1.0)*cj14)));
evalcond[4]=x1022;
evalcond[5]=(x1022+new_r11);
evalcond[6]=(x1020+(((-1.0)*x1021)));
evalcond[7]=(x1021+(((-1.0)*x1020))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=1.0;
cj13=0;
j13=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1024 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1024.valid){
continue;
}
IkReal x1023=x1024.value;
j12array[0]=((-1.0)*x1023);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1023)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j12))))+(((-1.0)*new_r01*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1025=((1.0)*sj14);
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign((((cj14*new_r00))+(((-1.0)*new_r10*x1025)))),-1);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(((1.0)+(((-1.0)*(cj14*cj14)))+(((-1.0)*new_r00*new_r11)))),IkReal(((((-1.0)*cj14*x1025))+((new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1028=IKcos(j12);
IkReal x1029=IKsin(j12);
IkReal x1030=(cj14*x1029);
IkReal x1031=(sj14*x1028);
IkReal x1032=(cj14*x1028);
IkReal x1033=((1.0)*x1029);
IkReal x1034=(x1030+x1031);
evalcond[0]=(((new_r10*x1029))+sj14+((new_r00*x1028)));
evalcond[1]=(((new_r11*x1029))+cj14+((new_r01*x1028)));
evalcond[2]=(x1034+new_r00);
evalcond[3]=(x1034+new_r11);
evalcond[4]=(((new_r11*x1028))+sj14+(((-1.0)*new_r01*x1033)));
evalcond[5]=((((-1.0)*sj14*x1033))+x1032+new_r01);
evalcond[6]=((((-1.0)*x1032))+((sj14*x1029))+new_r10);
evalcond[7]=(((new_r10*x1028))+(((-1.0)*new_r00*x1033))+(((-1.0)*cj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal((((cj14*sj14))+(((-1.0)*new_r00*new_r01)))),IkReal(((((-1.0)*(cj14*cj14)))+((new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign((((cj14*new_r01))+(((-1.0)*new_r11*sj14)))),-1);
if(!x1036.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1035.value)+(((1.5707963267949)*(x1036.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1037=IKcos(j12);
IkReal x1038=IKsin(j12);
IkReal x1039=(cj14*x1038);
IkReal x1040=(sj14*x1037);
IkReal x1041=(cj14*x1037);
IkReal x1042=((1.0)*x1038);
IkReal x1043=(x1040+x1039);
evalcond[0]=(((new_r10*x1038))+sj14+((new_r00*x1037)));
evalcond[1]=(((new_r11*x1038))+cj14+((new_r01*x1037)));
evalcond[2]=(x1043+new_r00);
evalcond[3]=(x1043+new_r11);
evalcond[4]=(((new_r11*x1037))+(((-1.0)*new_r01*x1042))+sj14);
evalcond[5]=(x1041+(((-1.0)*sj14*x1042))+new_r01);
evalcond[6]=((((-1.0)*x1041))+((sj14*x1038))+new_r10);
evalcond[7]=(((new_r10*x1037))+(((-1.0)*new_r00*x1042))+(((-1.0)*cj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1044 = IKatan2WithCheck(IkReal(((((-1.0)*cj14*new_r00))+((new_r01*sj14)))),IkReal((((cj14*new_r10))+(((-1.0)*new_r11*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1045.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1044.value)+(((1.5707963267949)*(x1045.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1046=IKcos(j12);
IkReal x1047=IKsin(j12);
IkReal x1048=(cj14*x1047);
IkReal x1049=(sj14*x1046);
IkReal x1050=(cj14*x1046);
IkReal x1051=((1.0)*x1047);
IkReal x1052=(x1049+x1048);
evalcond[0]=(((new_r00*x1046))+sj14+((new_r10*x1047)));
evalcond[1]=(((new_r11*x1047))+cj14+((new_r01*x1046)));
evalcond[2]=(x1052+new_r00);
evalcond[3]=(x1052+new_r11);
evalcond[4]=((((-1.0)*new_r01*x1051))+((new_r11*x1046))+sj14);
evalcond[5]=(x1050+(((-1.0)*sj14*x1051))+new_r01);
evalcond[6]=((((-1.0)*x1050))+new_r10+((sj14*x1047)));
evalcond[7]=((((-1.0)*new_r00*x1051))+((new_r10*x1046))+(((-1.0)*cj14)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1053=(((new_r10*new_r11))+((new_r00*new_r01)));
j12eval[0]=x1053;
j12eval[1]=((IKabs(((((-1.0)*new_r10*sj14))+((new_r01*sj14)))))+(IKabs((((new_r00*sj14))+((new_r11*sj14))))));
j12eval[2]=IKsign(x1053);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1054=((new_r01*new_r01)+(new_r11*new_r11));
j12eval[0]=x1054;
j12eval[1]=((IKabs((((cj14*new_r01))+(((-1.0)*new_r11*sj14)))))+(IKabs((((cj14*new_r11))+((new_r01*sj14))))));
j12eval[2]=IKsign(x1054);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
IkReal x1055=((1.0)*sj14);
IkReal x1056=(((cj14*new_r11))+(((-1.0)*new_r01*x1055)));
j12eval[0]=x1056;
j12eval[1]=IKsign(x1056);
j12eval[2]=((IKabs((((new_r01*new_r11))+(((-1.0)*cj14*x1055)))))+(IKabs(((-1.0)+(new_r11*new_r11)+(cj14*cj14)))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1059 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1059)==0){
continue;
}
IkReal x1057=pow(x1059,-0.5);
IkReal x1058=((-1.0)*x1057);
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1060.value));
IkReal gconst13=(new_r11*x1058);
IkReal gconst14=(new_r01*x1058);
CheckValue<IkReal> x1061 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1061.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1061.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x1065 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1065.valid){
continue;
}
IkReal x1062=((-1.0)*(x1065.value));
IkReal x1063=x1057;
IkReal x1064=((-1.0)*x1063);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1062;
IkReal gconst12=x1062;
IkReal gconst13=(new_r11*x1064);
IkReal gconst14=(new_r01*x1064);
IkReal x1066=new_r11*new_r11;
IkReal x1067=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1068=x1057;
IkReal x1069=(new_r11*x1068);
j12eval[0]=x1067;
j12eval[1]=IKsign(x1067);
j12eval[2]=((IKabs(((((-1.0)*new_r01*x1069))+((new_r10*x1069)))))+(IKabs(((((-1.0)*x1066*x1068))+(((-1.0)*new_r00*x1069))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
IkReal x1070=((-1.0)*(x1073.value));
IkReal x1071=x1057;
IkReal x1072=((-1.0)*x1071);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1070;
IkReal gconst12=x1070;
IkReal gconst13=(new_r11*x1072);
IkReal gconst14=(new_r01*x1072);
IkReal x1074=((new_r01*new_r01)+(new_r11*new_r11));
j12eval[0]=x1074;
j12eval[1]=IKsign(x1074);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
IkReal x1075=((-1.0)*(x1078.value));
IkReal x1076=x1057;
IkReal x1077=((-1.0)*x1076);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1075;
IkReal gconst12=x1075;
IkReal gconst13=(new_r11*x1077);
IkReal gconst14=(new_r01*x1077);
IkReal x1079=new_r01*new_r01;
IkReal x1080=new_r11*new_r11;
CheckValue<IkReal> x1084=IKPowWithIntegerCheck((x1079+x1080),-1);
if(!x1084.valid){
continue;
}
IkReal x1081=x1084.value;
IkReal x1082=(new_r01*x1081);
IkReal x1083=(x1080*x1081);
j12eval[0]=((IKabs((((x1082*(new_r11*new_r11*new_r11)))+((new_r11*x1082*(new_r01*new_r01)))+((new_r11*x1082)))))+(IKabs((((x1079*x1083))+(((-1.0)*x1083))+((x1081*(x1079*x1079)))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1085=IKPowWithIntegerCheck(gconst14,-1);
if(!x1085.valid){
continue;
}
cj12array[0]=(new_r01*(x1085.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1086=IKsin(j12);
IkReal x1087=IKcos(j12);
IkReal x1088=((1.0)*gconst14);
evalcond[0]=(new_r10*x1086);
evalcond[1]=(gconst14*x1086);
evalcond[2]=((-1.0)*new_r01*x1086);
evalcond[3]=((((-1.0)*x1087*x1088))+new_r10);
evalcond[4]=(((new_r10*x1087))+(((-1.0)*x1088)));
evalcond[5]=(((new_r01*x1087))+(((-1.0)*x1088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
IkReal x1089=((-1.0)*new_r01);
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1089),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
IkReal x1090=((-1.0)*(x1091.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1090;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst12=x1090;
IkReal gconst13=((-1.0)*new_r11);
IkReal gconst14=x1089;
j12eval[0]=-1.0;
j12eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j12eval[2]=-1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1092=((-1.0)*new_r01);
CheckValue<IkReal> x1094 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1092),IKFAST_ATAN2_MAGTHRESH);
if(!x1094.valid){
continue;
}
IkReal x1093=((-1.0)*(x1094.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1093;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst12=x1093;
IkReal gconst13=((-1.0)*new_r11);
IkReal gconst14=x1092;
j12eval[0]=1.0;
j12eval[1]=1.0;
j12eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1095=((-1.0)*new_r01);
CheckValue<IkReal> x1097 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1095),IKFAST_ATAN2_MAGTHRESH);
if(!x1097.valid){
continue;
}
IkReal x1096=((-1.0)*(x1097.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1096;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst12=x1096;
IkReal gconst13=((-1.0)*new_r11);
IkReal gconst14=x1095;
j12eval[0]=1.0;
j12eval[1]=1.0;
j12eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1098 = IKatan2WithCheck(IkReal((gconst14*new_r11)),IkReal(((-1.0)*gconst13*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(IKsign(((gconst14*gconst14)+(gconst13*gconst13))),-1);
if(!x1099.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1098.value)+(((1.5707963267949)*(x1099.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1100=IKcos(j12);
IkReal x1101=IKsin(j12);
IkReal x1102=((1.0)*gconst14);
IkReal x1103=((1.0)*x1101);
IkReal x1104=(gconst13*x1100);
IkReal x1105=(((gconst13*x1103))+((x1100*x1102)));
evalcond[0]=(((gconst14*x1101))+(((-1.0)*x1104)));
evalcond[1]=(gconst13+((new_r11*x1100))+(((-1.0)*new_r01*x1103)));
evalcond[2]=(x1104+new_r11+(((-1.0)*x1101*x1102)));
evalcond[3]=((-1.0)*x1105);
evalcond[4]=(((new_r11*x1101))+((new_r01*x1100))+(((-1.0)*x1102)));
evalcond[5]=(new_r01+(((-1.0)*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1106 = IKatan2WithCheck(IkReal((gconst13*new_r01)),IkReal((gconst14*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1106.valid){
continue;
}
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(IKsign(((gconst14*gconst14)+(gconst13*gconst13))),-1);
if(!x1107.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1106.value)+(((1.5707963267949)*(x1107.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1108=IKcos(j12);
IkReal x1109=IKsin(j12);
IkReal x1110=((1.0)*gconst14);
IkReal x1111=((1.0)*x1109);
IkReal x1112=(gconst13*x1108);
IkReal x1113=(((x1108*x1110))+((gconst13*x1111)));
evalcond[0]=(((gconst14*x1109))+(((-1.0)*x1112)));
evalcond[1]=(gconst13+((new_r11*x1108))+(((-1.0)*new_r01*x1111)));
evalcond[2]=(x1112+(((-1.0)*x1109*x1110))+new_r11);
evalcond[3]=((-1.0)*x1113);
evalcond[4]=(((new_r11*x1109))+((new_r01*x1108))+(((-1.0)*x1110)));
evalcond[5]=(new_r01+(((-1.0)*x1113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign((((gconst14*new_r01))+((gconst13*new_r11)))),-1);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115 = IKatan2WithCheck(IkReal((gconst13*gconst14)),IkReal(gconst14*gconst14),IKFAST_ATAN2_MAGTHRESH);
if(!x1115.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1114.value)))+(x1115.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1116=IKcos(j12);
IkReal x1117=IKsin(j12);
IkReal x1118=((1.0)*gconst14);
IkReal x1119=((1.0)*x1117);
IkReal x1120=(gconst13*x1116);
IkReal x1121=(((gconst13*x1119))+((x1116*x1118)));
evalcond[0]=(((gconst14*x1117))+(((-1.0)*x1120)));
evalcond[1]=(gconst13+((new_r11*x1116))+(((-1.0)*new_r01*x1119)));
evalcond[2]=(x1120+new_r11+(((-1.0)*x1117*x1118)));
evalcond[3]=((-1.0)*x1121);
evalcond[4]=(((new_r11*x1117))+((new_r01*x1116))+(((-1.0)*x1118)));
evalcond[5]=((((-1.0)*x1121))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(gconst13,-1);
if(!x1122.valid){
continue;
}
cj12array[0]=(new_r00*(x1122.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1123=IKsin(j12);
IkReal x1124=IKcos(j12);
IkReal x1125=((-1.0)*x1123);
evalcond[0]=(new_r11*x1123);
evalcond[1]=(new_r00*x1125);
evalcond[2]=(gconst13*x1125);
evalcond[3]=(gconst13+((new_r11*x1124)));
evalcond[4]=(((gconst13*x1124))+new_r11);
evalcond[5]=(((new_r00*x1124))+(((-1.0)*gconst13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
IkReal x1126=((-1.0)*new_r01);
CheckValue<IkReal> x1128 = IKatan2WithCheck(IkReal(0),IkReal(x1126),IKFAST_ATAN2_MAGTHRESH);
if(!x1128.valid){
continue;
}
IkReal x1127=((-1.0)*(x1128.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1127;
new_r11=0;
IkReal gconst12=x1127;
IkReal gconst13=0;
IkReal x1129 = new_r01*new_r01;
if(IKabs(x1129)==0){
continue;
}
IkReal gconst14=(x1126*(pow(x1129,-0.5)));
j12eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x1130=((-1.0)*new_r01);
CheckValue<IkReal> x1132 = IKatan2WithCheck(IkReal(0),IkReal(x1130),IKFAST_ATAN2_MAGTHRESH);
if(!x1132.valid){
continue;
}
IkReal x1131=((-1.0)*(x1132.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1131;
new_r11=0;
IkReal gconst12=x1131;
IkReal gconst13=0;
IkReal x1133 = new_r01*new_r01;
if(IKabs(x1133)==0){
continue;
}
IkReal gconst14=(x1130*(pow(x1133,-0.5)));
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
IkReal x1134=((-1.0)*new_r01);
CheckValue<IkReal> x1136 = IKatan2WithCheck(IkReal(0),IkReal(x1134),IKFAST_ATAN2_MAGTHRESH);
if(!x1136.valid){
continue;
}
IkReal x1135=((-1.0)*(x1136.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst13;
cj14=gconst14;
j14=x1135;
new_r11=0;
IkReal gconst12=x1135;
IkReal gconst13=0;
IkReal x1137 = new_r01*new_r01;
if(IKabs(x1137)==0){
continue;
}
IkReal gconst14=(x1134*(pow(x1137,-0.5)));
j12eval[0]=new_r01;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(gconst14,-1);
if(!x1138.valid){
continue;
}
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(new_r01,-1);
if(!x1139.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1138.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst14*(x1139.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1138.value)))+IKsqr((gconst14*(x1139.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r00*(x1138.value)), (gconst14*(x1139.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1140=IKsin(j12);
IkReal x1141=IKcos(j12);
IkReal x1142=((1.0)*gconst14);
IkReal x1143=(gconst14*x1140);
IkReal x1144=(x1141*x1142);
evalcond[0]=((-1.0)*new_r01*x1140);
evalcond[1]=((-1.0)*x1143);
evalcond[2]=(x1143+new_r00);
evalcond[3]=((((-1.0)*x1144))+new_r01);
evalcond[4]=((((-1.0)*x1144))+new_r10);
evalcond[5]=((((-1.0)*x1142))+((new_r01*x1141)));
evalcond[6]=(((new_r00*x1141))+((new_r10*x1140)));
evalcond[7]=((((-1.0)*x1142))+(((-1.0)*new_r00*x1140))+((new_r10*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1145=IKPowWithIntegerCheck(IKsign(gconst14),-1);
if(!x1145.valid){
continue;
}
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1145.value)))+(x1146.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1147=IKsin(j12);
IkReal x1148=IKcos(j12);
IkReal x1149=((1.0)*gconst14);
IkReal x1150=(gconst14*x1147);
IkReal x1151=(x1148*x1149);
evalcond[0]=((-1.0)*new_r01*x1147);
evalcond[1]=((-1.0)*x1150);
evalcond[2]=(x1150+new_r00);
evalcond[3]=((((-1.0)*x1151))+new_r01);
evalcond[4]=((((-1.0)*x1151))+new_r10);
evalcond[5]=((((-1.0)*x1149))+((new_r01*x1148)));
evalcond[6]=(((new_r00*x1148))+((new_r10*x1147)));
evalcond[7]=((((-1.0)*x1149))+(((-1.0)*new_r00*x1147))+((new_r10*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(IKsign(gconst14),-1);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1153.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1152.value)))+(x1153.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1154=IKsin(j12);
IkReal x1155=IKcos(j12);
IkReal x1156=((1.0)*gconst14);
IkReal x1157=(gconst14*x1154);
IkReal x1158=(x1155*x1156);
evalcond[0]=((-1.0)*new_r01*x1154);
evalcond[1]=((-1.0)*x1157);
evalcond[2]=(x1157+new_r00);
evalcond[3]=((((-1.0)*x1158))+new_r01);
evalcond[4]=((((-1.0)*x1158))+new_r10);
evalcond[5]=((((-1.0)*x1156))+((new_r01*x1155)));
evalcond[6]=(((new_r10*x1154))+((new_r00*x1155)));
evalcond[7]=(((new_r10*x1155))+(((-1.0)*x1156))+(((-1.0)*new_r00*x1154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1159 = IKatan2WithCheck(IkReal((((gconst13*gconst14))+((new_r01*new_r11)))),IkReal(((new_r01*new_r01)+(((-1.0)*(gconst13*gconst13))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1159.valid){
continue;
}
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(IKsign((((gconst14*new_r01))+((gconst13*new_r11)))),-1);
if(!x1160.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1159.value)+(((1.5707963267949)*(x1160.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1161=IKsin(j12);
IkReal x1162=IKcos(j12);
IkReal x1163=((1.0)*gconst14);
IkReal x1164=((1.0)*x1161);
IkReal x1165=((1.0)*x1162);
IkReal x1166=(((gconst13*x1164))+((x1162*x1163)));
evalcond[0]=(gconst13+((new_r11*x1162))+(((-1.0)*new_r01*x1164)));
evalcond[1]=(((gconst14*x1161))+new_r00+(((-1.0)*gconst13*x1165)));
evalcond[2]=(((gconst13*x1162))+new_r11+(((-1.0)*x1161*x1163)));
evalcond[3]=(((new_r10*x1161))+(((-1.0)*gconst13))+((new_r00*x1162)));
evalcond[4]=(((new_r11*x1161))+((new_r01*x1162))+(((-1.0)*x1163)));
evalcond[5]=(new_r01+(((-1.0)*x1166)));
evalcond[6]=(new_r10+(((-1.0)*x1166)));
evalcond[7]=(((new_r10*x1162))+(((-1.0)*new_r00*x1164))+(((-1.0)*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1167=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x1167.valid){
continue;
}
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal((((gconst14*new_r11))+((gconst13*new_r01)))),IkReal((((gconst14*new_r01))+(((-1.0)*gconst13*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1167.value)))+(x1168.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1169=IKsin(j12);
IkReal x1170=IKcos(j12);
IkReal x1171=((1.0)*gconst14);
IkReal x1172=((1.0)*x1169);
IkReal x1173=((1.0)*x1170);
IkReal x1174=(((x1170*x1171))+((gconst13*x1172)));
evalcond[0]=(gconst13+((new_r11*x1170))+(((-1.0)*new_r01*x1172)));
evalcond[1]=((((-1.0)*gconst13*x1173))+((gconst14*x1169))+new_r00);
evalcond[2]=((((-1.0)*x1169*x1171))+new_r11+((gconst13*x1170)));
evalcond[3]=(((new_r10*x1169))+((new_r00*x1170))+(((-1.0)*gconst13)));
evalcond[4]=(((new_r11*x1169))+(((-1.0)*x1171))+((new_r01*x1170)));
evalcond[5]=((((-1.0)*x1174))+new_r01);
evalcond[6]=((((-1.0)*x1174))+new_r10);
evalcond[7]=(((new_r10*x1170))+(((-1.0)*x1171))+(((-1.0)*new_r00*x1172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1175.valid){
continue;
}
CheckValue<IkReal> x1176 = IKatan2WithCheck(IkReal((((gconst13*new_r00))+((gconst13*new_r11)))),IkReal(((((-1.0)*gconst13*new_r10))+((gconst13*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1176.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1175.value)))+(x1176.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1177=IKsin(j12);
IkReal x1178=IKcos(j12);
IkReal x1179=((1.0)*gconst14);
IkReal x1180=((1.0)*x1177);
IkReal x1181=((1.0)*x1178);
IkReal x1182=(((gconst13*x1180))+((x1178*x1179)));
evalcond[0]=(gconst13+((new_r11*x1178))+(((-1.0)*new_r01*x1180)));
evalcond[1]=(((gconst14*x1177))+new_r00+(((-1.0)*gconst13*x1181)));
evalcond[2]=(new_r11+(((-1.0)*x1177*x1179))+((gconst13*x1178)));
evalcond[3]=(((new_r10*x1177))+((new_r00*x1178))+(((-1.0)*gconst13)));
evalcond[4]=(((new_r11*x1177))+(((-1.0)*x1179))+((new_r01*x1178)));
evalcond[5]=((((-1.0)*x1182))+new_r01);
evalcond[6]=((((-1.0)*x1182))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x1180))+((new_r10*x1178))+(((-1.0)*x1179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1185 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1185)==0){
continue;
}
IkReal x1183=pow(x1185,-0.5);
IkReal x1184=((1.0)*x1183);
CheckValue<IkReal> x1186 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1186.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1186.value))));
IkReal gconst16=(new_r11*x1184);
IkReal gconst17=(new_r01*x1184);
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1187.value)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
IkReal x1188=((1.0)*(x1191.value));
IkReal x1189=x1183;
IkReal x1190=((1.0)*x1189);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1188)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1188)));
IkReal gconst16=(new_r11*x1190);
IkReal gconst17=(new_r01*x1190);
IkReal x1192=new_r11*new_r11;
IkReal x1193=(new_r10*new_r11);
IkReal x1194=(x1193+((new_r00*new_r01)));
IkReal x1195=x1183;
IkReal x1196=(new_r11*x1195);
j12eval[0]=x1194;
j12eval[1]=((IKabs(((((-1.0)*x1193*x1195))+((new_r01*x1196)))))+(IKabs((((x1192*x1195))+((new_r00*x1196))))));
j12eval[2]=IKsign(x1194);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
CheckValue<IkReal> x1200 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1200.valid){
continue;
}
IkReal x1197=((1.0)*(x1200.value));
IkReal x1198=x1183;
IkReal x1199=((1.0)*x1198);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1197)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1197)));
IkReal gconst16=(new_r11*x1199);
IkReal gconst17=(new_r01*x1199);
IkReal x1201=((new_r01*new_r01)+(new_r11*new_r11));
j12eval[0]=x1201;
j12eval[1]=IKsign(x1201);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x1205 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1205.valid){
continue;
}
IkReal x1202=((1.0)*(x1205.value));
IkReal x1203=x1183;
IkReal x1204=((1.0)*x1203);
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1202)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1202)));
IkReal gconst16=(new_r11*x1204);
IkReal gconst17=(new_r01*x1204);
IkReal x1206=new_r01*new_r01;
IkReal x1207=new_r11*new_r11;
CheckValue<IkReal> x1211=IKPowWithIntegerCheck((x1207+x1206),-1);
if(!x1211.valid){
continue;
}
IkReal x1208=x1211.value;
IkReal x1209=(new_r01*x1208);
IkReal x1210=(x1207*x1208);
j12eval[0]=((IKabs((((x1206*x1210))+((x1208*(x1206*x1206)))+(((-1.0)*x1210)))))+(IKabs((((x1209*(new_r11*new_r11*new_r11)))+((new_r11*x1209))+((new_r11*x1209*(new_r01*new_r01)))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(gconst17,-1);
if(!x1212.valid){
continue;
}
cj12array[0]=(new_r01*(x1212.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1213=IKsin(j12);
IkReal x1214=IKcos(j12);
IkReal x1215=((1.0)*gconst17);
evalcond[0]=(new_r10*x1213);
evalcond[1]=(gconst17*x1213);
evalcond[2]=((-1.0)*new_r01*x1213);
evalcond[3]=((((-1.0)*x1214*x1215))+new_r10);
evalcond[4]=(((new_r10*x1214))+(((-1.0)*x1215)));
evalcond[5]=(((new_r01*x1214))+(((-1.0)*x1215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[4];
CheckValue<IkReal> x1217 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1217.valid){
continue;
}
IkReal x1216=((1.0)*(x1217.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1216)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1216)));
IkReal gconst16=((1.0)*new_r11);
IkReal gconst17=((1.0)*new_r01);
j12eval[0]=1.0;
j12eval[1]=new_r01;
j12eval[2]=1.0;
j12eval[3]=1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal j12eval[4];
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
IkReal x1218=((1.0)*(x1219.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1218)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1218)));
IkReal gconst16=((1.0)*new_r11);
IkReal gconst17=((1.0)*new_r01);
j12eval[0]=1.0;
j12eval[1]=new_r01;
j12eval[2]=1.0;
j12eval[3]=1.0;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  || IKabs(j12eval[3]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
IkReal x1220=((1.0)*(x1221.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1220)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1220)));
IkReal gconst16=((1.0)*new_r11);
IkReal gconst17=((1.0)*new_r01);
j12eval[0]=1.0;
j12eval[1]=1.0;
j12eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(IKsign(((gconst17*gconst17)+(gconst16*gconst16))),-1);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223 = IKatan2WithCheck(IkReal((gconst17*new_r11)),IkReal(((-1.0)*gconst16*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1223.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1222.value)))+(x1223.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1224=IKcos(j12);
IkReal x1225=IKsin(j12);
IkReal x1226=((1.0)*gconst17);
IkReal x1227=(gconst16*x1224);
IkReal x1228=(gconst17*x1225);
IkReal x1229=((1.0)*x1225);
IkReal x1230=(((x1224*x1226))+((gconst16*x1229)));
evalcond[0]=(x1228+(((-1.0)*x1227)));
evalcond[1]=(gconst16+(((-1.0)*new_r01*x1229))+((new_r11*x1224)));
evalcond[2]=(x1227+(((-1.0)*x1225*x1226))+new_r11);
evalcond[3]=((-1.0)*x1230);
evalcond[4]=((((-1.0)*x1226))+((new_r11*x1225))+((new_r01*x1224)));
evalcond[5]=((((-1.0)*x1230))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(IKsign(((gconst17*gconst17)+(gconst16*gconst16))),-1);
if(!x1231.valid){
continue;
}
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal((gconst16*new_r01)),IkReal((gconst17*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1231.value)))+(x1232.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1233=IKcos(j12);
IkReal x1234=IKsin(j12);
IkReal x1235=((1.0)*gconst17);
IkReal x1236=(gconst16*x1233);
IkReal x1237=(gconst17*x1234);
IkReal x1238=((1.0)*x1234);
IkReal x1239=(((x1233*x1235))+((gconst16*x1238)));
evalcond[0]=((((-1.0)*x1236))+x1237);
evalcond[1]=(gconst16+(((-1.0)*new_r01*x1238))+((new_r11*x1233)));
evalcond[2]=(x1236+(((-1.0)*x1234*x1235))+new_r11);
evalcond[3]=((-1.0)*x1239);
evalcond[4]=((((-1.0)*x1235))+((new_r01*x1233))+((new_r11*x1234)));
evalcond[5]=((((-1.0)*x1239))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal((gconst16*gconst17)),IkReal(gconst17*gconst17),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
CheckValue<IkReal> x1241=IKPowWithIntegerCheck(IKsign((((gconst16*new_r11))+((gconst17*new_r01)))),-1);
if(!x1241.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1240.value)+(((1.5707963267949)*(x1241.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1242=IKcos(j12);
IkReal x1243=IKsin(j12);
IkReal x1244=((1.0)*gconst17);
IkReal x1245=(gconst16*x1242);
IkReal x1246=(gconst17*x1243);
IkReal x1247=((1.0)*x1243);
IkReal x1248=(((gconst16*x1247))+((x1242*x1244)));
evalcond[0]=(x1246+(((-1.0)*x1245)));
evalcond[1]=(((new_r11*x1242))+gconst16+(((-1.0)*new_r01*x1247)));
evalcond[2]=(x1245+(((-1.0)*x1243*x1244))+new_r11);
evalcond[3]=((-1.0)*x1248);
evalcond[4]=(((new_r11*x1243))+(((-1.0)*x1244))+((new_r01*x1242)));
evalcond[5]=((((-1.0)*x1248))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1249=IKPowWithIntegerCheck(gconst16,-1);
if(!x1249.valid){
continue;
}
cj12array[0]=(new_r00*(x1249.value));
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j12);
IkReal x1251=IKcos(j12);
IkReal x1252=((-1.0)*x1250);
evalcond[0]=(new_r11*x1250);
evalcond[1]=(new_r00*x1252);
evalcond[2]=(gconst16*x1252);
evalcond[3]=(gconst16+((new_r11*x1251)));
evalcond[4]=(new_r11+((gconst16*x1251)));
evalcond[5]=(((new_r00*x1251))+(((-1.0)*gconst16)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
CheckValue<IkReal> x1254 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1254.valid){
continue;
}
IkReal x1253=((1.0)*(x1254.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1253)));
new_r11=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1253)));
IkReal gconst16=0;
IkReal x1255 = new_r01*new_r01;
if(IKabs(x1255)==0){
continue;
}
IkReal gconst17=((1.0)*new_r01*(pow(x1255,-0.5)));
j12eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x1257 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1257.valid){
continue;
}
IkReal x1256=((1.0)*(x1257.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1256)));
new_r11=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1256)));
IkReal gconst16=0;
IkReal x1258 = new_r01*new_r01;
if(IKabs(x1258)==0){
continue;
}
IkReal gconst17=((1.0)*new_r01*(pow(x1258,-0.5)));
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
IkReal x1259=((1.0)*(x1260.value));
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
sj14=gconst16;
cj14=gconst17;
j14=((3.14159265)+(((-1.0)*x1259)));
new_r11=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1259)));
IkReal gconst16=0;
IkReal x1261 = new_r01*new_r01;
if(IKabs(x1261)==0){
continue;
}
IkReal gconst17=((1.0)*new_r01*(pow(x1261,-0.5)));
j12eval[0]=new_r01;
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1262=IKPowWithIntegerCheck(gconst17,-1);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(new_r01,-1);
if(!x1263.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1262.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst17*(x1263.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1262.value)))+IKsqr((gconst17*(x1263.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r00*(x1262.value)), (gconst17*(x1263.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1264=IKsin(j12);
IkReal x1265=IKcos(j12);
IkReal x1266=((1.0)*gconst17);
IkReal x1267=(gconst17*x1264);
IkReal x1268=(x1265*x1266);
evalcond[0]=((-1.0)*new_r01*x1264);
evalcond[1]=((-1.0)*x1267);
evalcond[2]=(x1267+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1268)));
evalcond[4]=(new_r10+(((-1.0)*x1268)));
evalcond[5]=(((new_r01*x1265))+(((-1.0)*x1266)));
evalcond[6]=(((new_r00*x1265))+((new_r10*x1264)));
evalcond[7]=((((-1.0)*new_r00*x1264))+((new_r10*x1265))+(((-1.0)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign(gconst17),-1);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1270.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1269.value)))+(x1270.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1271=IKsin(j12);
IkReal x1272=IKcos(j12);
IkReal x1273=((1.0)*gconst17);
IkReal x1274=(gconst17*x1271);
IkReal x1275=(x1272*x1273);
evalcond[0]=((-1.0)*new_r01*x1271);
evalcond[1]=((-1.0)*x1274);
evalcond[2]=(x1274+new_r00);
evalcond[3]=((((-1.0)*x1275))+new_r01);
evalcond[4]=((((-1.0)*x1275))+new_r10);
evalcond[5]=(((new_r01*x1272))+(((-1.0)*x1273)));
evalcond[6]=(((new_r00*x1272))+((new_r10*x1271)));
evalcond[7]=((((-1.0)*x1273))+(((-1.0)*new_r00*x1271))+((new_r10*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1276=IKPowWithIntegerCheck(IKsign(gconst17),-1);
if(!x1276.valid){
continue;
}
CheckValue<IkReal> x1277 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1277.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1276.value)))+(x1277.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1278=IKsin(j12);
IkReal x1279=IKcos(j12);
IkReal x1280=((1.0)*gconst17);
IkReal x1281=(gconst17*x1278);
IkReal x1282=(x1279*x1280);
evalcond[0]=((-1.0)*new_r01*x1278);
evalcond[1]=((-1.0)*x1281);
evalcond[2]=(x1281+new_r00);
evalcond[3]=((((-1.0)*x1282))+new_r01);
evalcond[4]=((((-1.0)*x1282))+new_r10);
evalcond[5]=(((new_r01*x1279))+(((-1.0)*x1280)));
evalcond[6]=(((new_r00*x1279))+((new_r10*x1278)));
evalcond[7]=((((-1.0)*new_r00*x1278))+(((-1.0)*x1280))+((new_r10*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1283 = IKatan2WithCheck(IkReal((((new_r01*new_r11))+((gconst16*gconst17)))),IkReal(((new_r01*new_r01)+(((-1.0)*(gconst16*gconst16))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1283.valid){
continue;
}
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(IKsign((((gconst16*new_r11))+((gconst17*new_r01)))),-1);
if(!x1284.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1283.value)+(((1.5707963267949)*(x1284.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1285=IKsin(j12);
IkReal x1286=IKcos(j12);
IkReal x1287=((1.0)*gconst17);
IkReal x1288=((1.0)*x1285);
IkReal x1289=(gconst16*x1286);
IkReal x1290=(((x1286*x1287))+((gconst16*x1288)));
evalcond[0]=(((new_r11*x1286))+(((-1.0)*new_r01*x1288))+gconst16);
evalcond[1]=((((-1.0)*x1289))+new_r00+((gconst17*x1285)));
evalcond[2]=(x1289+(((-1.0)*x1285*x1287))+new_r11);
evalcond[3]=(((new_r10*x1285))+((new_r00*x1286))+(((-1.0)*gconst16)));
evalcond[4]=(((new_r11*x1285))+((new_r01*x1286))+(((-1.0)*x1287)));
evalcond[5]=((((-1.0)*x1290))+new_r01);
evalcond[6]=((((-1.0)*x1290))+new_r10);
evalcond[7]=(((new_r10*x1286))+(((-1.0)*new_r00*x1288))+(((-1.0)*x1287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1291 = IKatan2WithCheck(IkReal((((gconst16*new_r01))+((gconst17*new_r11)))),IkReal(((((-1.0)*gconst16*new_r11))+((gconst17*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1291.valid){
continue;
}
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x1292.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1291.value)+(((1.5707963267949)*(x1292.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1293=IKsin(j12);
IkReal x1294=IKcos(j12);
IkReal x1295=((1.0)*gconst17);
IkReal x1296=((1.0)*x1293);
IkReal x1297=(gconst16*x1294);
IkReal x1298=(((x1294*x1295))+((gconst16*x1296)));
evalcond[0]=(gconst16+((new_r11*x1294))+(((-1.0)*new_r01*x1296)));
evalcond[1]=(((gconst17*x1293))+(((-1.0)*x1297))+new_r00);
evalcond[2]=(x1297+(((-1.0)*x1293*x1295))+new_r11);
evalcond[3]=(((new_r10*x1293))+(((-1.0)*gconst16))+((new_r00*x1294)));
evalcond[4]=((((-1.0)*x1295))+((new_r11*x1293))+((new_r01*x1294)));
evalcond[5]=((((-1.0)*x1298))+new_r01);
evalcond[6]=((((-1.0)*x1298))+new_r10);
evalcond[7]=((((-1.0)*x1295))+((new_r10*x1294))+(((-1.0)*new_r00*x1296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1299 = IKatan2WithCheck(IkReal((((gconst16*new_r00))+((gconst16*new_r11)))),IkReal((((gconst16*new_r01))+(((-1.0)*gconst16*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1300.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1299.value)+(((1.5707963267949)*(x1300.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1301=IKsin(j12);
IkReal x1302=IKcos(j12);
IkReal x1303=((1.0)*gconst17);
IkReal x1304=((1.0)*x1301);
IkReal x1305=(gconst16*x1302);
IkReal x1306=(((x1302*x1303))+((gconst16*x1304)));
evalcond[0]=(gconst16+(((-1.0)*new_r01*x1304))+((new_r11*x1302)));
evalcond[1]=((((-1.0)*x1305))+((gconst17*x1301))+new_r00);
evalcond[2]=(x1305+(((-1.0)*x1301*x1303))+new_r11);
evalcond[3]=(((new_r10*x1301))+(((-1.0)*gconst16))+((new_r00*x1302)));
evalcond[4]=((((-1.0)*x1303))+((new_r11*x1301))+((new_r01*x1302)));
evalcond[5]=((((-1.0)*x1306))+new_r01);
evalcond[6]=((((-1.0)*x1306))+new_r10);
evalcond[7]=((((-1.0)*x1303))+(((-1.0)*new_r00*x1304))+((new_r10*x1302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r01=0;
new_r11=0;
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1308 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1308.valid){
continue;
}
IkReal x1307=x1308.value;
j12array[0]=((-1.0)*x1307);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1307)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j12))))+((new_r10*(IKcos(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j14))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1309=IKsin(j12);
IkReal x1310=IKcos(j12);
IkReal x1311=((1.0)*x1310);
IkReal x1312=((1.0)*x1309);
evalcond[0]=(x1309+new_r00);
evalcond[1]=((((-1.0)*x1312))+new_r11);
evalcond[2]=((((-1.0)*x1311))+new_r01);
evalcond[3]=((((-1.0)*x1311))+new_r10);
evalcond[4]=(((new_r00*x1310))+((new_r10*x1309)));
evalcond[5]=((((-1.0)*new_r01*x1312))+((new_r11*x1310)));
evalcond[6]=((-1.0)+((new_r01*x1310))+((new_r11*x1309)));
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x1312))+((new_r10*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*new_r11), ((-1.0)*new_r01));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1313=IKcos(j12);
IkReal x1314=IKsin(j12);
IkReal x1315=((1.0)*x1314);
evalcond[0]=(x1314+new_r11);
evalcond[1]=(x1313+new_r01);
evalcond[2]=(x1313+new_r10);
evalcond[3]=((((-1.0)*x1315))+new_r00);
evalcond[4]=(((new_r00*x1313))+((new_r10*x1314)));
evalcond[5]=((((-1.0)*new_r01*x1315))+((new_r11*x1313)));
evalcond[6]=((1.0)+((new_r01*x1313))+((new_r11*x1314)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x1315))+((new_r10*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r11=0;
new_r00=0;
j12eval[0]=new_r01;
j12eval[1]=IKsign(new_r01);
j12eval[2]=((IKabs(sj14))+(IKabs(cj14)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r11=0;
new_r00=0;
j12eval[0]=new_r10;
j12eval[1]=((IKabs(sj14))+(IKabs(cj14)));
j12eval[2]=IKsign(new_r10);
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r11=0;
new_r00=0;
j12eval[0]=new_r01;
j12eval[1]=new_r10;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1316=IKPowWithIntegerCheck(new_r01,-1);
if(!x1316.valid){
continue;
}
CheckValue<IkReal> x1317=IKPowWithIntegerCheck(new_r10,-1);
if(!x1317.valid){
continue;
}
if( IKabs((sj14*(x1316.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj14*(x1317.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj14*(x1316.value)))+IKsqr((cj14*(x1317.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((sj14*(x1316.value)), (cj14*(x1317.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1318=IKsin(j12);
IkReal x1319=IKcos(j12);
IkReal x1320=((1.0)*cj14);
IkReal x1321=((1.0)*sj14);
IkReal x1322=(((x1319*x1320))+((x1318*x1321)));
evalcond[0]=(sj14+(((-1.0)*new_r01*x1318)));
evalcond[1]=((((-1.0)*x1320))+((new_r10*x1319)));
evalcond[2]=((((-1.0)*x1321))+((new_r10*x1318)));
evalcond[3]=(((new_r01*x1319))+(((-1.0)*x1320)));
evalcond[4]=((((-1.0)*x1319*x1321))+((cj14*x1318)));
evalcond[5]=((((-1.0)*x1322))+new_r01);
evalcond[6]=((((-1.0)*x1322))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1323 = IKatan2WithCheck(IkReal(sj14),IkReal(cj14),IKFAST_ATAN2_MAGTHRESH);
if(!x1323.valid){
continue;
}
CheckValue<IkReal> x1324=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1324.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1323.value)+(((1.5707963267949)*(x1324.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1325=IKsin(j12);
IkReal x1326=IKcos(j12);
IkReal x1327=((1.0)*cj14);
IkReal x1328=((1.0)*sj14);
IkReal x1329=(((x1326*x1327))+((x1325*x1328)));
evalcond[0]=(sj14+(((-1.0)*new_r01*x1325)));
evalcond[1]=((((-1.0)*x1327))+((new_r10*x1326)));
evalcond[2]=((((-1.0)*x1328))+((new_r10*x1325)));
evalcond[3]=(((new_r01*x1326))+(((-1.0)*x1327)));
evalcond[4]=((((-1.0)*x1326*x1328))+((cj14*x1325)));
evalcond[5]=((((-1.0)*x1329))+new_r01);
evalcond[6]=((((-1.0)*x1329))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1330.valid){
continue;
}
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(sj14),IkReal(cj14),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1330.value)))+(x1331.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1332=IKsin(j12);
IkReal x1333=IKcos(j12);
IkReal x1334=((1.0)*cj14);
IkReal x1335=((1.0)*sj14);
IkReal x1336=(((x1333*x1334))+((x1332*x1335)));
evalcond[0]=(sj14+(((-1.0)*new_r01*x1332)));
evalcond[1]=(((new_r10*x1333))+(((-1.0)*x1334)));
evalcond[2]=(((new_r10*x1332))+(((-1.0)*x1335)));
evalcond[3]=(((new_r01*x1333))+(((-1.0)*x1334)));
evalcond[4]=((((-1.0)*x1333*x1335))+((cj14*x1332)));
evalcond[5]=(new_r01+(((-1.0)*x1336)));
evalcond[6]=(new_r10+(((-1.0)*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1338 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1338.valid){
continue;
}
IkReal x1337=x1338.value;
j12array[0]=((-1.0)*x1337);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1337)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r00*(IKsin(j12))))+((new_r10*(IKcos(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1340 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1340.valid){
continue;
}
IkReal x1339=x1340.value;
j12array[0]=((-1.0)*x1339);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1339)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[1];
evalcond[0]=(((new_r11*(IKcos(j12))))+(((-1.0)*new_r01*(IKsin(j12)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[3];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r01=0;
new_r10=0;
j12eval[0]=new_r11;
j12eval[1]=IKsign(new_r11);
j12eval[2]=((IKabs(sj14))+(IKabs(cj14)));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r01=0;
new_r10=0;
j12eval[0]=new_r00;
j12eval[1]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
sj13=-1.0;
cj13=0;
j13=-1.5707963267949;
new_r01=0;
new_r10=0;
j12eval[0]=cj14;
j12eval[1]=new_r11;
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=new_r00;
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1341=IKsin(j12);
IkReal x1342=IKcos(j12);
IkReal x1343=((-1.0)*x1341);
evalcond[0]=(new_r11*x1341);
evalcond[1]=(x1342+new_r11);
evalcond[2]=x1343;
evalcond[3]=(new_r00*x1343);
evalcond[4]=((1.0)+((new_r11*x1342)));
evalcond[5]=((-1.0)+((new_r00*x1342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j14)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
cj12array[0]=new_r11;
if( cj12array[0] >= -1-IKFAST_SINCOS_THRESH && cj12array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j12valid[0] = j12valid[1] = true;
    j12array[0] = IKacos(cj12array[0]);
    sj12array[0] = IKsin(j12array[0]);
    cj12array[1] = cj12array[0];
    j12array[1] = -j12array[0];
    sj12array[1] = -sj12array[0];
}
else if( isnan(cj12array[0]) )
{
    // probably any value will work
    j12valid[0] = true;
    cj12array[0] = 1; sj12array[0] = 0; j12array[0] = 0;
}
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[6];
IkReal x1344=IKsin(j12);
IkReal x1345=IKcos(j12);
evalcond[0]=x1344;
evalcond[1]=(new_r11*x1344);
evalcond[2]=(x1345+new_r00);
evalcond[3]=((-1.0)*new_r00*x1344);
evalcond[4]=((-1.0)+((new_r11*x1345)));
evalcond[5]=((1.0)+((new_r00*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(new_r11,-1);
if(!x1347.valid){
continue;
}
IkReal x1346=x1347.value;
CheckValue<IkReal> x1348=IKPowWithIntegerCheck(cj14,-1);
if(!x1348.valid){
continue;
}
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(x1346,-2);
if(!x1349.valid){
continue;
}
if( IKabs((x1346*(x1348.value)*(((-1.0)+(x1349.value)+(cj14*cj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj14*x1346)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1346*(x1348.value)*(((-1.0)+(x1349.value)+(cj14*cj14)))))+IKsqr(((-1.0)*sj14*x1346))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((x1346*(x1348.value)*(((-1.0)+(x1349.value)+(cj14*cj14)))), ((-1.0)*sj14*x1346));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1350=IKcos(j12);
IkReal x1351=IKsin(j12);
IkReal x1352=((1.0)*cj14);
IkReal x1353=((1.0)*sj14);
IkReal x1354=((1.0)*x1351);
evalcond[0]=(((new_r11*x1350))+sj14);
evalcond[1]=((((-1.0)*x1353))+((new_r00*x1350)));
evalcond[2]=((((-1.0)*x1352))+((new_r11*x1351)));
evalcond[3]=((((-1.0)*x1352))+(((-1.0)*new_r00*x1354)));
evalcond[4]=(((cj14*x1351))+(((-1.0)*x1350*x1353))+new_r00);
evalcond[5]=(((sj14*x1350))+new_r11+(((-1.0)*x1351*x1352)));
evalcond[6]=((((-1.0)*x1350*x1352))+(((-1.0)*x1351*x1353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1355=IKPowWithIntegerCheck(new_r00,-1);
if(!x1355.valid){
continue;
}
CheckValue<IkReal> x1356=IKPowWithIntegerCheck(new_r11,-1);
if(!x1356.valid){
continue;
}
if( IKabs(((-1.0)*cj14*(x1355.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj14*(x1356.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj14*(x1355.value)))+IKsqr(((-1.0)*sj14*(x1356.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2(((-1.0)*cj14*(x1355.value)), ((-1.0)*sj14*(x1356.value)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1357=IKcos(j12);
IkReal x1358=IKsin(j12);
IkReal x1359=((1.0)*cj14);
IkReal x1360=((1.0)*sj14);
IkReal x1361=((1.0)*x1358);
evalcond[0]=(((new_r11*x1357))+sj14);
evalcond[1]=(((new_r00*x1357))+(((-1.0)*x1360)));
evalcond[2]=((((-1.0)*x1359))+((new_r11*x1358)));
evalcond[3]=((((-1.0)*new_r00*x1361))+(((-1.0)*x1359)));
evalcond[4]=(((cj14*x1358))+(((-1.0)*x1357*x1360))+new_r00);
evalcond[5]=(((sj14*x1357))+new_r11+(((-1.0)*x1358*x1359)));
evalcond[6]=((((-1.0)*x1357*x1359))+(((-1.0)*x1358*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363 = IKatan2WithCheck(IkReal(cj14),IkReal(((-1.0)*sj14)),IKFAST_ATAN2_MAGTHRESH);
if(!x1363.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1362.value)))+(x1363.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[7];
IkReal x1364=IKcos(j12);
IkReal x1365=IKsin(j12);
IkReal x1366=((1.0)*cj14);
IkReal x1367=((1.0)*sj14);
IkReal x1368=((1.0)*x1365);
evalcond[0]=(sj14+((new_r11*x1364)));
evalcond[1]=(((new_r00*x1364))+(((-1.0)*x1367)));
evalcond[2]=((((-1.0)*x1366))+((new_r11*x1365)));
evalcond[3]=((((-1.0)*new_r00*x1368))+(((-1.0)*x1366)));
evalcond[4]=((((-1.0)*x1364*x1367))+((cj14*x1365))+new_r00);
evalcond[5]=(((sj14*x1364))+(((-1.0)*x1365*x1366))+new_r11);
evalcond[6]=((((-1.0)*x1364*x1366))+(((-1.0)*x1365*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1369=((1.0)*sj14);
CheckValue<IkReal> x1370 = IKatan2WithCheck(IkReal(((-1.0)+(new_r11*new_r11)+(cj14*cj14))),IkReal(((((-1.0)*cj14*x1369))+((new_r01*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1370.valid){
continue;
}
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(IKsign((((cj14*new_r11))+(((-1.0)*new_r01*x1369)))),-1);
if(!x1371.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1370.value)+(((1.5707963267949)*(x1371.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1372=IKsin(j12);
IkReal x1373=IKcos(j12);
IkReal x1374=((1.0)*cj14);
IkReal x1375=((1.0)*sj14);
IkReal x1376=(cj14*x1372);
IkReal x1377=((1.0)*x1372);
IkReal x1378=(((x1372*x1375))+((x1373*x1374)));
evalcond[0]=((((-1.0)*new_r01*x1377))+sj14+((new_r11*x1373)));
evalcond[1]=(x1376+new_r00+(((-1.0)*x1373*x1375)));
evalcond[2]=((((-1.0)*x1372*x1374))+new_r11+((sj14*x1373)));
evalcond[3]=((((-1.0)*x1375))+((new_r10*x1372))+((new_r00*x1373)));
evalcond[4]=((((-1.0)*x1374))+((new_r11*x1372))+((new_r01*x1373)));
evalcond[5]=((((-1.0)*x1378))+new_r01);
evalcond[6]=((((-1.0)*x1378))+new_r10);
evalcond[7]=((((-1.0)*new_r00*x1377))+(((-1.0)*x1374))+((new_r10*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal((((cj14*new_r11))+((new_r01*sj14)))),IkReal((((cj14*new_r01))+(((-1.0)*new_r11*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x1380.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1379.value)+(((1.5707963267949)*(x1380.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1381=IKsin(j12);
IkReal x1382=IKcos(j12);
IkReal x1383=((1.0)*cj14);
IkReal x1384=((1.0)*sj14);
IkReal x1385=(cj14*x1381);
IkReal x1386=((1.0)*x1381);
IkReal x1387=(((x1381*x1384))+((x1382*x1383)));
evalcond[0]=(((new_r11*x1382))+sj14+(((-1.0)*new_r01*x1386)));
evalcond[1]=(x1385+(((-1.0)*x1382*x1384))+new_r00);
evalcond[2]=(((sj14*x1382))+(((-1.0)*x1381*x1383))+new_r11);
evalcond[3]=((((-1.0)*x1384))+((new_r10*x1381))+((new_r00*x1382)));
evalcond[4]=((((-1.0)*x1383))+((new_r11*x1381))+((new_r01*x1382)));
evalcond[5]=((((-1.0)*x1387))+new_r01);
evalcond[6]=((((-1.0)*x1387))+new_r10);
evalcond[7]=((((-1.0)*x1383))+((new_r10*x1382))+(((-1.0)*new_r00*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1388 = IKatan2WithCheck(IkReal((((new_r00*sj14))+((new_r11*sj14)))),IkReal(((((-1.0)*new_r10*sj14))+((new_r01*sj14)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1388.valid){
continue;
}
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1389.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1388.value)+(((1.5707963267949)*(x1389.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1390=IKsin(j12);
IkReal x1391=IKcos(j12);
IkReal x1392=((1.0)*cj14);
IkReal x1393=((1.0)*sj14);
IkReal x1394=(cj14*x1390);
IkReal x1395=((1.0)*x1390);
IkReal x1396=(((x1390*x1393))+((x1391*x1392)));
evalcond[0]=(((new_r11*x1391))+sj14+(((-1.0)*new_r01*x1395)));
evalcond[1]=(x1394+(((-1.0)*x1391*x1393))+new_r00);
evalcond[2]=(((sj14*x1391))+(((-1.0)*x1390*x1392))+new_r11);
evalcond[3]=(((new_r10*x1390))+((new_r00*x1391))+(((-1.0)*x1393)));
evalcond[4]=(((new_r11*x1390))+((new_r01*x1391))+(((-1.0)*x1392)));
evalcond[5]=(new_r01+(((-1.0)*x1396)));
evalcond[6]=(new_r10+(((-1.0)*x1396)));
evalcond[7]=(((new_r10*x1391))+(((-1.0)*new_r00*x1395))+(((-1.0)*x1392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j12eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j12eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
{
IkReal j12eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j12eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j12eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12]

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1397=((-1.0)*new_r22);
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal((new_r00*x1397)),IkReal((new_r10*x1397)),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
IkReal x1398=x1399.value;
j12array[0]=((-1.0)*x1398);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1398)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1400=IKcos(j12);
IkReal x1401=IKsin(j12);
IkReal x1402=((1.0)*x1401);
IkReal x1403=(new_r01*x1400);
evalcond[0]=(((new_r10*x1401))+((new_r00*x1400)));
evalcond[1]=(((new_r11*x1401))+x1403);
evalcond[2]=(((new_r11*x1400))+(((-1.0)*new_r01*x1402)));
evalcond[3]=(((new_r10*x1400))+(((-1.0)*new_r00*x1402)));
evalcond[4]=((((-1.0)*new_r11*new_r22*x1402))+(((-1.0)*new_r22*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1405 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1405.valid){
continue;
}
IkReal x1404=x1405.value;
j12array[0]=((-1.0)*x1404);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1404)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1406=IKcos(j12);
IkReal x1407=IKsin(j12);
IkReal x1408=((1.0)*new_r22);
IkReal x1409=((1.0)*x1407);
IkReal x1410=(new_r00*x1406);
evalcond[0]=(((new_r10*x1407))+x1410);
evalcond[1]=(((new_r11*x1406))+(((-1.0)*new_r01*x1409)));
evalcond[2]=(((new_r10*x1406))+(((-1.0)*new_r00*x1409)));
evalcond[3]=((((-1.0)*new_r10*x1407*x1408))+(((-1.0)*x1408*x1410)));
evalcond[4]=((((-1.0)*new_r01*x1406*x1408))+(((-1.0)*new_r11*x1407*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
CheckValue<IkReal> x1412 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1412.valid){
continue;
}
IkReal x1411=x1412.value;
j12array[0]=((-1.0)*x1411);
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1411)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[5];
IkReal x1413=IKcos(j12);
IkReal x1414=IKsin(j12);
IkReal x1415=((1.0)*new_r22);
IkReal x1416=((1.0)*x1414);
IkReal x1417=(new_r01*x1413);
evalcond[0]=(x1417+((new_r11*x1414)));
evalcond[1]=((((-1.0)*new_r01*x1416))+((new_r11*x1413)));
evalcond[2]=((((-1.0)*new_r00*x1416))+((new_r10*x1413)));
evalcond[3]=((((-1.0)*new_r10*x1414*x1415))+(((-1.0)*new_r00*x1413*x1415)));
evalcond[4]=((((-1.0)*x1415*x1417))+(((-1.0)*new_r11*x1414*x1415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(cj13,-1);
if(!x1419.valid){
continue;
}
IkReal x1418=x1419.value;
CheckValue<IkReal> x1420=IKPowWithIntegerCheck(new_r12,-1);
if(!x1420.valid){
continue;
}
CheckValue<IkReal> x1421=IKPowWithIntegerCheck(x1418,-2);
if(!x1421.valid){
continue;
}
if( IKabs((x1418*(x1420.value)*(((new_r02*new_r02)+(((-1.0)*(x1421.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r02*x1418)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1418*(x1420.value)*(((new_r02*new_r02)+(((-1.0)*(x1421.value)))))))+IKsqr(((-1.0)*new_r02*x1418))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j12array[0]=IKatan2((x1418*(x1420.value)*(((new_r02*new_r02)+(((-1.0)*(x1421.value)))))), ((-1.0)*new_r02*x1418));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[18];
IkReal x1422=IKcos(j12);
IkReal x1423=IKsin(j12);
IkReal x1424=((1.0)*cj14);
IkReal x1425=((1.0)*sj13);
IkReal x1426=((1.0)*cj13);
IkReal x1427=(cj14*sj13);
IkReal x1428=(sj13*sj14);
IkReal x1429=((1.0)*sj14);
IkReal x1430=(new_r02*x1422);
IkReal x1431=(new_r10*x1423);
IkReal x1432=(cj13*x1423);
IkReal x1433=(new_r01*x1422);
IkReal x1434=(new_r11*x1423);
IkReal x1435=(new_r00*x1422);
IkReal x1436=((1.0)*x1423);
IkReal x1437=(new_r12*x1423);
evalcond[0]=(((cj13*x1422))+new_r02);
evalcond[1]=(x1432+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1436))+((new_r12*x1422)));
evalcond[3]=(cj13+x1437+x1430);
evalcond[4]=(sj14+(((-1.0)*new_r01*x1436))+((new_r11*x1422)));
evalcond[5]=(((x1422*x1428))+((cj14*x1423))+new_r00);
evalcond[6]=(((x1423*x1427))+((sj14*x1422))+new_r11);
evalcond[7]=(x1428+x1435+x1431);
evalcond[8]=(x1427+x1434+x1433);
evalcond[9]=(((x1422*x1427))+(((-1.0)*x1423*x1429))+new_r01);
evalcond[10]=(((x1423*x1428))+(((-1.0)*x1422*x1424))+new_r10);
evalcond[11]=((((-1.0)*new_r00*x1436))+((new_r10*x1422))+(((-1.0)*x1424)));
evalcond[12]=(((cj13*x1435))+((cj13*x1431))+(((-1.0)*new_r20*x1425)));
evalcond[13]=((((-1.0)*new_r21*x1425))+((new_r11*x1432))+((cj13*x1433)));
evalcond[14]=((1.0)+(((-1.0)*new_r22*x1425))+((cj13*x1430))+((new_r12*x1432)));
evalcond[15]=((((-1.0)*new_r22*x1426))+(((-1.0)*x1425*x1430))+(((-1.0)*x1425*x1437)));
evalcond[16]=((((-1.0)*new_r20*x1426))+(((-1.0)*x1425*x1431))+(((-1.0)*x1425*x1435))+(((-1.0)*x1429)));
evalcond[17]=((((-1.0)*new_r21*x1426))+(((-1.0)*x1425*x1433))+(((-1.0)*x1425*x1434))+(((-1.0)*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1438=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1438.valid){
continue;
}
CheckValue<IkReal> x1439 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1439.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1438.value)))+(x1439.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[18];
IkReal x1440=IKcos(j12);
IkReal x1441=IKsin(j12);
IkReal x1442=((1.0)*cj14);
IkReal x1443=((1.0)*sj13);
IkReal x1444=((1.0)*cj13);
IkReal x1445=(cj14*sj13);
IkReal x1446=(sj13*sj14);
IkReal x1447=((1.0)*sj14);
IkReal x1448=(new_r02*x1440);
IkReal x1449=(new_r10*x1441);
IkReal x1450=(cj13*x1441);
IkReal x1451=(new_r01*x1440);
IkReal x1452=(new_r11*x1441);
IkReal x1453=(new_r00*x1440);
IkReal x1454=((1.0)*x1441);
IkReal x1455=(new_r12*x1441);
evalcond[0]=(((cj13*x1440))+new_r02);
evalcond[1]=(x1450+new_r12);
evalcond[2]=(((new_r12*x1440))+(((-1.0)*new_r02*x1454)));
evalcond[3]=(cj13+x1455+x1448);
evalcond[4]=(((new_r11*x1440))+sj14+(((-1.0)*new_r01*x1454)));
evalcond[5]=(((x1440*x1446))+((cj14*x1441))+new_r00);
evalcond[6]=(((x1441*x1445))+((sj14*x1440))+new_r11);
evalcond[7]=(x1453+x1446+x1449);
evalcond[8]=(x1451+x1452+x1445);
evalcond[9]=(((x1440*x1445))+(((-1.0)*x1441*x1447))+new_r01);
evalcond[10]=(((x1441*x1446))+new_r10+(((-1.0)*x1440*x1442)));
evalcond[11]=(((new_r10*x1440))+(((-1.0)*new_r00*x1454))+(((-1.0)*x1442)));
evalcond[12]=((((-1.0)*new_r20*x1443))+((cj13*x1453))+((cj13*x1449)));
evalcond[13]=((((-1.0)*new_r21*x1443))+((cj13*x1451))+((new_r11*x1450)));
evalcond[14]=((1.0)+(((-1.0)*new_r22*x1443))+((new_r12*x1450))+((cj13*x1448)));
evalcond[15]=((((-1.0)*new_r22*x1444))+(((-1.0)*x1443*x1448))+(((-1.0)*x1443*x1455)));
evalcond[16]=((((-1.0)*new_r20*x1444))+(((-1.0)*x1447))+(((-1.0)*x1443*x1449))+(((-1.0)*x1443*x1453)));
evalcond[17]=((((-1.0)*new_r21*x1444))+(((-1.0)*x1442))+(((-1.0)*x1443*x1451))+(((-1.0)*x1443*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
CheckValue<IkReal> x1456=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1456.valid){
continue;
}
CheckValue<IkReal> x1457 = IKatan2WithCheck(IkReal(((-1.0)*new_r12)),IkReal(((-1.0)*new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1457.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1456.value)))+(x1457.value));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[8];
IkReal x1458=IKcos(j12);
IkReal x1459=IKsin(j12);
IkReal x1460=((1.0)*sj13);
IkReal x1461=(new_r02*x1458);
IkReal x1462=(cj13*x1459);
IkReal x1463=(new_r12*x1459);
IkReal x1464=(cj13*x1458);
evalcond[0]=(x1464+new_r02);
evalcond[1]=(x1462+new_r12);
evalcond[2]=(((new_r12*x1458))+(((-1.0)*new_r02*x1459)));
evalcond[3]=(cj13+x1461+x1463);
evalcond[4]=(((new_r00*x1464))+((new_r10*x1462))+(((-1.0)*new_r20*x1460)));
evalcond[5]=(((new_r01*x1464))+((new_r11*x1462))+(((-1.0)*new_r21*x1460)));
evalcond[6]=((1.0)+((cj13*x1461))+(((-1.0)*new_r22*x1460))+((new_r12*x1462)));
evalcond[7]=((((-1.0)*cj13*new_r22))+(((-1.0)*x1460*x1463))+(((-1.0)*x1460*x1461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j14eval[3];
j14eval[0]=cj13;
j14eval[1]=IKsign(cj13);
j14eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
j14eval[0]=cj13;
j14eval[1]=sj12;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal j14eval[3];
j14eval[0]=cj13;
j14eval[1]=sj12;
j14eval[2]=sj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1465=((1.0)*cj12);
if( IKabs(((((-1.0)*new_r00*x1465))+((new_r01*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x1465))+(((-1.0)*new_r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x1465))+((new_r01*sj12))))+IKsqr(((((-1.0)*new_r01*x1465))+(((-1.0)*new_r00*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*new_r00*x1465))+((new_r01*sj12))), ((((-1.0)*new_r01*x1465))+(((-1.0)*new_r00*sj12))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1466=IKsin(j14);
IkReal x1467=IKcos(j14);
IkReal x1468=((1.0)*sj12);
IkReal x1469=(cj12*x1466);
IkReal x1470=(sj12*x1467);
IkReal x1471=((1.0)*x1467);
IkReal x1472=(sj12*x1466);
IkReal x1473=(x1469+x1470);
evalcond[0]=(((cj12*new_r00))+x1466+((new_r10*sj12)));
evalcond[1]=(((cj12*new_r01))+x1467+((new_r11*sj12)));
evalcond[2]=(((cj12*new_r11))+(((-1.0)*new_r01*x1468))+x1466);
evalcond[3]=(x1473+new_r00);
evalcond[4]=(x1473+new_r11);
evalcond[5]=(((cj12*new_r10))+(((-1.0)*new_r00*x1468))+(((-1.0)*x1471)));
evalcond[6]=(((cj12*x1467))+(((-1.0)*x1466*x1468))+new_r01);
evalcond[7]=((((-1.0)*cj12*x1471))+x1472+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs((((cj12*new_r00))+((new_r01*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj12*new_r01))+(((-1.0)*new_r00*sj12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj12*new_r00))+((new_r01*sj12))))+IKsqr((((cj12*new_r01))+(((-1.0)*new_r00*sj12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj12*new_r00))+((new_r01*sj12))), (((cj12*new_r01))+(((-1.0)*new_r00*sj12))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1474=IKsin(j14);
IkReal x1475=IKcos(j14);
IkReal x1476=((1.0)*cj12);
IkReal x1477=((1.0)*sj12);
IkReal x1478=((1.0)*x1475);
IkReal x1479=((1.0)*x1474);
IkReal x1480=(((x1474*x1477))+((x1475*x1476)));
evalcond[0]=(((cj12*new_r11))+x1474+(((-1.0)*new_r01*x1477)));
evalcond[1]=(((cj12*new_r00))+(((-1.0)*x1479))+((new_r10*sj12)));
evalcond[2]=(((cj12*new_r01))+(((-1.0)*x1478))+((new_r11*sj12)));
evalcond[3]=((((-1.0)*new_r00*x1477))+((cj12*new_r10))+(((-1.0)*x1478)));
evalcond[4]=(((sj12*x1475))+(((-1.0)*x1474*x1476))+new_r00);
evalcond[5]=((((-1.0)*x1475*x1477))+((cj12*x1474))+new_r11);
evalcond[6]=((((-1.0)*x1480))+new_r01);
evalcond[7]=((((-1.0)*x1480))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1481=IKsin(j14);
IkReal x1482=IKcos(j14);
IkReal x1483=((1.0)*sj13);
IkReal x1484=((1.0)*cj13);
IkReal x1485=((1.0)*x1482);
evalcond[0]=(x1481+new_r11);
evalcond[1]=(((cj13*x1481))+new_r20);
evalcond[2]=(((cj13*x1482))+new_r21);
evalcond[3]=((((-1.0)*x1485))+new_r10);
evalcond[4]=(new_r00+((sj13*x1481)));
evalcond[5]=(((new_r22*x1482))+new_r01);
evalcond[6]=((((-1.0)*x1481))+(((-1.0)*new_r00*x1483))+(((-1.0)*new_r20*x1484)));
evalcond[7]=((((-1.0)*x1485))+(((-1.0)*new_r21*x1484))+(((-1.0)*new_r01*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
j14eval[1]=IKsign(cj13);
j14eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  || IKabs(j14eval[2]) < 0.0000010000000000  )
{
{
IkReal j14eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
if( IKabs(j14eval[0]) < 0.0000010000000000  )
{
{
IkReal j14eval[2];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j14eval[0]=cj13;
j14eval[1]=new_r22;
if( IKabs(j14eval[0]) < 0.0000010000000000  || IKabs(j14eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, new_r01);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x1486=IKsin(j14);
IkReal x1487=IKcos(j14);
evalcond[0]=(x1486+(((-1.0)*new_r11)));
evalcond[1]=(x1486+(((-1.0)*new_r00)));
evalcond[2]=(x1487+(((-1.0)*new_r01)));
evalcond[3]=((((-1.0)*x1487))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j13)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[4];
IkReal x1488=IKsin(j14);
IkReal x1489=((1.0)*(IKcos(j14)));
evalcond[0]=(x1488+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x1489))+(((-1.0)*new_r10)));
evalcond[2]=((((-1.0)*x1488))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x1489))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[5];
IkReal x1490=IKsin(j14);
IkReal x1491=IKcos(j14);
evalcond[0]=(new_r22*x1490);
evalcond[1]=((-1.0)*x1490);
evalcond[2]=((-1.0)*x1491);
evalcond[3]=(x1490+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*x1491))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1492=IKPowWithIntegerCheck(cj13,-1);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(new_r22,-1);
if(!x1493.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x1492.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1493.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x1492.value)))+IKsqr((new_r01*(x1493.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*(x1492.value)), (new_r01*(x1493.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1494=IKsin(j14);
IkReal x1495=IKcos(j14);
IkReal x1496=((1.0)*cj13);
IkReal x1497=((1.0)*x1495);
evalcond[0]=(((cj13*x1494))+new_r20);
evalcond[1]=(((cj13*x1495))+new_r21);
evalcond[2]=(x1494+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x1497))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*new_r00))+((sj13*x1494)));
evalcond[5]=(((new_r22*x1495))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*x1494))+(((-1.0)*new_r20*x1496))+((new_r00*sj13)));
evalcond[7]=((((-1.0)*x1497))+(((-1.0)*new_r21*x1496))+((new_r01*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1498=IKPowWithIntegerCheck(cj13,-1);
if(!x1498.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x1498.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x1498.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x1498.value)));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1499=IKsin(j14);
IkReal x1500=IKcos(j14);
IkReal x1501=((1.0)*cj13);
IkReal x1502=((1.0)*x1500);
evalcond[0]=(((cj13*x1499))+new_r20);
evalcond[1]=(new_r21+((cj13*x1500)));
evalcond[2]=(x1499+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x1502))+(((-1.0)*new_r10)));
evalcond[4]=((((-1.0)*new_r00))+((sj13*x1499)));
evalcond[5]=(((new_r22*x1500))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x1501))+(((-1.0)*x1499))+((new_r00*sj13)));
evalcond[7]=((((-1.0)*x1502))+(((-1.0)*new_r21*x1501))+((new_r01*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1503.valid){
continue;
}
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1503.value)))+(x1504.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1505=IKsin(j14);
IkReal x1506=IKcos(j14);
IkReal x1507=((1.0)*cj13);
IkReal x1508=((1.0)*x1506);
evalcond[0]=(new_r20+((cj13*x1505)));
evalcond[1]=(new_r21+((cj13*x1506)));
evalcond[2]=(x1505+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x1508))+(((-1.0)*new_r10)));
evalcond[4]=(((sj13*x1505))+(((-1.0)*new_r00)));
evalcond[5]=(((new_r22*x1506))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r20*x1507))+(((-1.0)*x1505))+((new_r00*sj13)));
evalcond[7]=((((-1.0)*x1508))+(((-1.0)*new_r21*x1507))+((new_r01*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j13))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1509=IKcos(j14);
IkReal x1510=IKsin(j14);
IkReal x1511=((1.0)*sj12);
IkReal x1512=((1.0)*x1509);
evalcond[0]=(x1510+new_r20);
evalcond[1]=(x1509+new_r21);
evalcond[2]=(((sj12*x1509))+new_r00);
evalcond[3]=(((cj12*x1510))+new_r11);
evalcond[4]=((((-1.0)*x1510*x1511))+new_r01);
evalcond[5]=((((-1.0)*cj12*x1512))+new_r10);
evalcond[6]=(((cj12*new_r11))+x1510+(((-1.0)*new_r01*x1511)));
evalcond[7]=((((-1.0)*x1512))+((cj12*new_r10))+(((-1.0)*new_r00*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j13)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(new_r20, new_r21);
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[8];
IkReal x1513=IKcos(j14);
IkReal x1514=IKsin(j14);
IkReal x1515=((1.0)*sj12);
IkReal x1516=((1.0)*x1513);
IkReal x1517=((1.0)*x1514);
evalcond[0]=((((-1.0)*x1517))+new_r20);
evalcond[1]=((((-1.0)*x1516))+new_r21);
evalcond[2]=(((sj12*x1513))+new_r00);
evalcond[3]=(((cj12*x1514))+new_r11);
evalcond[4]=((((-1.0)*x1514*x1515))+new_r01);
evalcond[5]=((((-1.0)*cj12*x1516))+new_r10);
evalcond[6]=(((cj12*new_r11))+x1514+(((-1.0)*new_r01*x1515)));
evalcond[7]=((((-1.0)*x1516))+((cj12*new_r10))+(((-1.0)*new_r00*x1515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j14eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j14eval[0]=1.0;
if( IKabs(j14eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j14]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j14array[2], cj14array[2], sj14array[2], tempj14array[1];
int numsolutions = 0;
for(int ij14 = 0; ij14 < numroots; ++ij14)
{
IkReal htj14 = zeror[ij14];
tempj14array[0]=((2.0)*(atan(htj14)));
for(int kj14 = 0; kj14 < 1; ++kj14)
{
j14array[numsolutions] = tempj14array[kj14];
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
sj14array[numsolutions] = IKsin(j14array[numsolutions]);
cj14array[numsolutions] = IKcos(j14array[numsolutions]);
numsolutions++;
}
}
bool j14valid[2]={true,true};
_nj14 = 2;
for(int ij14 = 0; ij14 < numsolutions; ++ij14)
    {
if( !j14valid[ij14] )
{
    continue;
}
    j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
htj14 = IKtan(j14/2);

_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < numsolutions; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j14]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1519=IKPowWithIntegerCheck(cj13,-1);
if(!x1519.valid){
continue;
}
IkReal x1518=x1519.value;
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(sj12,-1);
if(!x1520.valid){
continue;
}
CheckValue<IkReal> x1521=IKPowWithIntegerCheck(sj13,-1);
if(!x1521.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x1518)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1518*(x1520.value)*(x1521.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x1518))+IKsqr((x1518*(x1520.value)*(x1521.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*x1518), (x1518*(x1520.value)*(x1521.value)*(((((-1.0)*cj13*new_r11))+((cj12*new_r20))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x1522=IKsin(j14);
IkReal x1523=IKcos(j14);
IkReal x1524=(cj12*new_r00);
IkReal x1525=(cj12*new_r01);
IkReal x1526=(new_r10*sj12);
IkReal x1527=((1.0)*sj12);
IkReal x1528=((1.0)*sj13);
IkReal x1529=((1.0)*cj13);
IkReal x1530=((1.0)*x1523);
IkReal x1531=(sj13*x1522);
IkReal x1532=(sj12*x1523);
IkReal x1533=(sj13*x1523);
evalcond[0]=(((cj13*x1522))+new_r20);
evalcond[1]=(((cj13*x1523))+new_r21);
evalcond[2]=(((cj12*new_r11))+x1522+(((-1.0)*new_r01*x1527)));
evalcond[3]=(x1524+x1526+x1531);
evalcond[4]=(x1525+x1533+((new_r11*sj12)));
evalcond[5]=((((-1.0)*x1530))+((cj12*new_r10))+(((-1.0)*new_r00*x1527)));
evalcond[6]=(x1532+((cj12*x1531))+new_r00);
evalcond[7]=(((sj13*x1532))+new_r11+((cj12*x1522)));
evalcond[8]=((((-1.0)*x1522*x1527))+((cj12*x1533))+new_r01);
evalcond[9]=((((-1.0)*cj12*x1530))+((sj12*x1531))+new_r10);
evalcond[10]=((((-1.0)*x1524*x1528))+(((-1.0)*new_r20*x1529))+(((-1.0)*x1526*x1528))+(((-1.0)*x1522)));
evalcond[11]=((((-1.0)*new_r21*x1529))+(((-1.0)*x1530))+(((-1.0)*x1525*x1528))+(((-1.0)*new_r11*sj13*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1535=IKPowWithIntegerCheck(cj13,-1);
if(!x1535.valid){
continue;
}
IkReal x1534=x1535.value;
CheckValue<IkReal> x1536=IKPowWithIntegerCheck(sj12,-1);
if(!x1536.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x1534)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1534*(x1536.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x1534))+IKsqr((x1534*(x1536.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((-1.0)*new_r20*x1534), (x1534*(x1536.value)*(((((-1.0)*cj13*new_r00))+((cj12*new_r20*sj13))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x1537=IKsin(j14);
IkReal x1538=IKcos(j14);
IkReal x1539=(cj12*new_r00);
IkReal x1540=(cj12*new_r01);
IkReal x1541=(new_r10*sj12);
IkReal x1542=((1.0)*sj12);
IkReal x1543=((1.0)*sj13);
IkReal x1544=((1.0)*cj13);
IkReal x1545=((1.0)*x1538);
IkReal x1546=(sj13*x1537);
IkReal x1547=(sj12*x1538);
IkReal x1548=(sj13*x1538);
evalcond[0]=(((cj13*x1537))+new_r20);
evalcond[1]=(((cj13*x1538))+new_r21);
evalcond[2]=(((cj12*new_r11))+x1537+(((-1.0)*new_r01*x1542)));
evalcond[3]=(x1546+x1541+x1539);
evalcond[4]=(x1540+x1548+((new_r11*sj12)));
evalcond[5]=((((-1.0)*new_r00*x1542))+((cj12*new_r10))+(((-1.0)*x1545)));
evalcond[6]=(x1547+((cj12*x1546))+new_r00);
evalcond[7]=(((sj13*x1547))+((cj12*x1537))+new_r11);
evalcond[8]=((((-1.0)*x1537*x1542))+((cj12*x1548))+new_r01);
evalcond[9]=((((-1.0)*cj12*x1545))+((sj12*x1546))+new_r10);
evalcond[10]=((((-1.0)*x1537))+(((-1.0)*x1539*x1543))+(((-1.0)*x1541*x1543))+(((-1.0)*new_r20*x1544)));
evalcond[11]=((((-1.0)*x1540*x1543))+(((-1.0)*new_r11*sj13*x1542))+(((-1.0)*new_r21*x1544))+(((-1.0)*x1545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign(cj13),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j14array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[12];
IkReal x1551=IKsin(j14);
IkReal x1552=IKcos(j14);
IkReal x1553=(cj12*new_r00);
IkReal x1554=(cj12*new_r01);
IkReal x1555=(new_r10*sj12);
IkReal x1556=((1.0)*sj12);
IkReal x1557=((1.0)*sj13);
IkReal x1558=((1.0)*cj13);
IkReal x1559=((1.0)*x1552);
IkReal x1560=(sj13*x1551);
IkReal x1561=(sj12*x1552);
IkReal x1562=(sj13*x1552);
evalcond[0]=(((cj13*x1551))+new_r20);
evalcond[1]=(((cj13*x1552))+new_r21);
evalcond[2]=(((cj12*new_r11))+x1551+(((-1.0)*new_r01*x1556)));
evalcond[3]=(x1560+x1553+x1555);
evalcond[4]=(x1562+x1554+((new_r11*sj12)));
evalcond[5]=(((cj12*new_r10))+(((-1.0)*x1559))+(((-1.0)*new_r00*x1556)));
evalcond[6]=(x1561+((cj12*x1560))+new_r00);
evalcond[7]=(((sj13*x1561))+((cj12*x1551))+new_r11);
evalcond[8]=(((cj12*x1562))+(((-1.0)*x1551*x1556))+new_r01);
evalcond[9]=(((sj12*x1560))+(((-1.0)*cj12*x1559))+new_r10);
evalcond[10]=((((-1.0)*x1551))+(((-1.0)*x1555*x1557))+(((-1.0)*x1553*x1557))+(((-1.0)*new_r20*x1558)));
evalcond[11]=((((-1.0)*new_r21*x1558))+(((-1.0)*x1559))+(((-1.0)*new_r11*sj13*x1556))+(((-1.0)*x1554*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j8;
vinfos[0].indices[0] = _ij8[0];
vinfos[0].indices[1] = _ij8[1];
vinfos[0].maxsolutions = _nj8;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j9;
vinfos[1].indices[0] = _ij9[0];
vinfos[1].indices[1] = _ij9[1];
vinfos[1].maxsolutions = _nj9;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j10;
vinfos[2].indices[0] = _ij10[0];
vinfos[2].indices[1] = _ij10[1];
vinfos[2].maxsolutions = _nj10;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j11;
vinfos[3].indices[0] = _ij11[0];
vinfos[3].indices[1] = _ij11[1];
vinfos[3].maxsolutions = _nj11;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j12;
vinfos[4].indices[0] = _ij12[0];
vinfos[4].indices[1] = _ij12[1];
vinfos[4].maxsolutions = _nj12;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j13;
vinfos[5].indices[0] = _ij13[0];
vinfos[5].indices[1] = _ij13[1];
vinfos[5].maxsolutions = _nj13;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j14;
vinfos[6].indices[0] = _ij14[0];
vinfos[6].indices[1] = _ij14[1];
vinfos[6].maxsolutions = _nj14;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "7a421c7dcfb04347ab6d1fd0ebd49de9"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

} // end namespace
